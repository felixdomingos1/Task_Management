"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch-native";
exports.ids = ["vendor-chunks/node-fetch-native"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n__webpack_require__(/*! node:fs */ \"node:fs\");\n__webpack_require__(/*! node:path */ \"node:path\");\nconst abortController = __webpack_require__(/*! ../shared/node-fetch-native.8afd3fea.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\");\n__webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n__webpack_require__(/*! node:zlib */ \"node:zlib\");\n__webpack_require__(/*! node:stream */ \"node:stream\");\n__webpack_require__(/*! node:buffer */ \"node:buffer\");\n__webpack_require__(/*! node:util */ \"node:util\");\n__webpack_require__(/*! node:url */ \"node:url\");\n__webpack_require__(/*! node:net */ \"node:net\");\nlet s = 0;\nconst S = {\n    START_BOUNDARY: s++,\n    HEADER_FIELD_START: s++,\n    HEADER_FIELD: s++,\n    HEADER_VALUE_START: s++,\n    HEADER_VALUE: s++,\n    HEADER_VALUE_ALMOST_DONE: s++,\n    HEADERS_ALMOST_DONE: s++,\n    PART_DATA_START: s++,\n    PART_DATA: s++,\n    END: s++\n};\nlet f = 1;\nconst F = {\n    PART_BOUNDARY: f,\n    LAST_BOUNDARY: f *= 2\n};\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\nconst lower = (c)=>c | 0x20;\nconst noop = ()=>{};\nclass MultipartParser {\n    /**\n\t * @param {string} boundary\n\t */ constructor(boundary){\n        this.index = 0;\n        this.flags = 0;\n        this.onHeaderEnd = noop;\n        this.onHeaderField = noop;\n        this.onHeadersEnd = noop;\n        this.onHeaderValue = noop;\n        this.onPartBegin = noop;\n        this.onPartData = noop;\n        this.onPartEnd = noop;\n        this.boundaryChars = {};\n        boundary = \"\\r\\n--\" + boundary;\n        const ui8a = new Uint8Array(boundary.length);\n        for(let i = 0; i < boundary.length; i++){\n            ui8a[i] = boundary.charCodeAt(i);\n            this.boundaryChars[ui8a[i]] = true;\n        }\n        this.boundary = ui8a;\n        this.lookbehind = new Uint8Array(this.boundary.length + 8);\n        this.state = S.START_BOUNDARY;\n    }\n    /**\n\t * @param {Uint8Array} data\n\t */ write(data) {\n        let i = 0;\n        const length_ = data.length;\n        let previousIndex = this.index;\n        let { lookbehind, boundary, boundaryChars, index, state, flags } = this;\n        const boundaryLength = this.boundary.length;\n        const boundaryEnd = boundaryLength - 1;\n        const bufferLength = data.length;\n        let c;\n        let cl;\n        const mark = (name)=>{\n            this[name + \"Mark\"] = i;\n        };\n        const clear = (name)=>{\n            delete this[name + \"Mark\"];\n        };\n        const callback = (callbackSymbol, start, end, ui8a)=>{\n            if (start === undefined || start !== end) {\n                this[callbackSymbol](ui8a && ui8a.subarray(start, end));\n            }\n        };\n        const dataCallback = (name, clear)=>{\n            const markSymbol = name + \"Mark\";\n            if (!(markSymbol in this)) {\n                return;\n            }\n            if (clear) {\n                callback(name, this[markSymbol], i, data);\n                delete this[markSymbol];\n            } else {\n                callback(name, this[markSymbol], data.length, data);\n                this[markSymbol] = 0;\n            }\n        };\n        for(i = 0; i < length_; i++){\n            c = data[i];\n            switch(state){\n                case S.START_BOUNDARY:\n                    if (index === boundary.length - 2) {\n                        if (c === HYPHEN) {\n                            flags |= F.LAST_BOUNDARY;\n                        } else if (c !== CR) {\n                            return;\n                        }\n                        index++;\n                        break;\n                    } else if (index - 1 === boundary.length - 2) {\n                        if (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n                            state = S.END;\n                            flags = 0;\n                        } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n                            index = 0;\n                            callback(\"onPartBegin\");\n                            state = S.HEADER_FIELD_START;\n                        } else {\n                            return;\n                        }\n                        break;\n                    }\n                    if (c !== boundary[index + 2]) {\n                        index = -2;\n                    }\n                    if (c === boundary[index + 2]) {\n                        index++;\n                    }\n                    break;\n                case S.HEADER_FIELD_START:\n                    state = S.HEADER_FIELD;\n                    mark(\"onHeaderField\");\n                    index = 0;\n                // falls through\n                case S.HEADER_FIELD:\n                    if (c === CR) {\n                        clear(\"onHeaderField\");\n                        state = S.HEADERS_ALMOST_DONE;\n                        break;\n                    }\n                    index++;\n                    if (c === HYPHEN) {\n                        break;\n                    }\n                    if (c === COLON) {\n                        if (index === 1) {\n                            // empty header field\n                            return;\n                        }\n                        dataCallback(\"onHeaderField\", true);\n                        state = S.HEADER_VALUE_START;\n                        break;\n                    }\n                    cl = lower(c);\n                    if (cl < A || cl > Z) {\n                        return;\n                    }\n                    break;\n                case S.HEADER_VALUE_START:\n                    if (c === SPACE) {\n                        break;\n                    }\n                    mark(\"onHeaderValue\");\n                    state = S.HEADER_VALUE;\n                // falls through\n                case S.HEADER_VALUE:\n                    if (c === CR) {\n                        dataCallback(\"onHeaderValue\", true);\n                        callback(\"onHeaderEnd\");\n                        state = S.HEADER_VALUE_ALMOST_DONE;\n                    }\n                    break;\n                case S.HEADER_VALUE_ALMOST_DONE:\n                    if (c !== LF) {\n                        return;\n                    }\n                    state = S.HEADER_FIELD_START;\n                    break;\n                case S.HEADERS_ALMOST_DONE:\n                    if (c !== LF) {\n                        return;\n                    }\n                    callback(\"onHeadersEnd\");\n                    state = S.PART_DATA_START;\n                    break;\n                case S.PART_DATA_START:\n                    state = S.PART_DATA;\n                    mark(\"onPartData\");\n                // falls through\n                case S.PART_DATA:\n                    previousIndex = index;\n                    if (index === 0) {\n                        // boyer-moore derrived algorithm to safely skip non-boundary data\n                        i += boundaryEnd;\n                        while(i < bufferLength && !(data[i] in boundaryChars)){\n                            i += boundaryLength;\n                        }\n                        i -= boundaryEnd;\n                        c = data[i];\n                    }\n                    if (index < boundary.length) {\n                        if (boundary[index] === c) {\n                            if (index === 0) {\n                                dataCallback(\"onPartData\", true);\n                            }\n                            index++;\n                        } else {\n                            index = 0;\n                        }\n                    } else if (index === boundary.length) {\n                        index++;\n                        if (c === CR) {\n                            // CR = part boundary\n                            flags |= F.PART_BOUNDARY;\n                        } else if (c === HYPHEN) {\n                            // HYPHEN = end boundary\n                            flags |= F.LAST_BOUNDARY;\n                        } else {\n                            index = 0;\n                        }\n                    } else if (index - 1 === boundary.length) {\n                        if (flags & F.PART_BOUNDARY) {\n                            index = 0;\n                            if (c === LF) {\n                                // unset the PART_BOUNDARY flag\n                                flags &= ~F.PART_BOUNDARY;\n                                callback(\"onPartEnd\");\n                                callback(\"onPartBegin\");\n                                state = S.HEADER_FIELD_START;\n                                break;\n                            }\n                        } else if (flags & F.LAST_BOUNDARY) {\n                            if (c === HYPHEN) {\n                                callback(\"onPartEnd\");\n                                state = S.END;\n                                flags = 0;\n                            } else {\n                                index = 0;\n                            }\n                        } else {\n                            index = 0;\n                        }\n                    }\n                    if (index > 0) {\n                        // when matching a possible boundary, keep a lookbehind reference\n                        // in case it turns out to be a false lead\n                        lookbehind[index - 1] = c;\n                    } else if (previousIndex > 0) {\n                        // if our boundary turned out to be rubbish, the captured lookbehind\n                        // belongs to partData\n                        const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n                        callback(\"onPartData\", 0, previousIndex, _lookbehind);\n                        previousIndex = 0;\n                        mark(\"onPartData\");\n                        // reconsider the current character even so it interrupted the sequence\n                        // it could be the beginning of a new sequence\n                        i--;\n                    }\n                    break;\n                case S.END:\n                    break;\n                default:\n                    throw new Error(`Unexpected state entered: ${state}`);\n            }\n        }\n        dataCallback(\"onHeaderField\");\n        dataCallback(\"onHeaderValue\");\n        dataCallback(\"onPartData\");\n        // Update properties for the next call\n        this.index = index;\n        this.state = state;\n        this.flags = flags;\n    }\n    end() {\n        if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {\n            this.onPartEnd();\n        } else if (this.state !== S.END) {\n            throw new Error(\"MultipartParser.end(): stream ended unexpectedly\");\n        }\n    }\n}\nfunction _fileName(headerValue) {\n    // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n    const m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n    if (!m) {\n        return;\n    }\n    const match = m[2] || m[3] || \"\";\n    let filename = match.slice(match.lastIndexOf(\"\\\\\") + 1);\n    filename = filename.replace(/%22/g, '\"');\n    filename = filename.replace(/&#(\\d{4});/g, (m, code)=>{\n        return String.fromCharCode(code);\n    });\n    return filename;\n}\nasync function toFormData(Body, ct) {\n    if (!/multipart/i.test(ct)) {\n        throw new TypeError(\"Failed to fetch\");\n    }\n    const m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n    if (!m) {\n        throw new TypeError(\"no or bad content-type header, no multipart boundary\");\n    }\n    const parser = new MultipartParser(m[1] || m[2]);\n    let headerField;\n    let headerValue;\n    let entryValue;\n    let entryName;\n    let contentType;\n    let filename;\n    const entryChunks = [];\n    const formData = new abortController.FormData();\n    const onPartData = (ui8a)=>{\n        entryValue += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    const appendToFile = (ui8a)=>{\n        entryChunks.push(ui8a);\n    };\n    const appendFileToFormData = ()=>{\n        const file = new abortController.File(entryChunks, filename, {\n            type: contentType\n        });\n        formData.append(entryName, file);\n    };\n    const appendEntryToFormData = ()=>{\n        formData.append(entryName, entryValue);\n    };\n    const decoder = new TextDecoder(\"utf-8\");\n    decoder.decode();\n    parser.onPartBegin = function() {\n        parser.onPartData = onPartData;\n        parser.onPartEnd = appendEntryToFormData;\n        headerField = \"\";\n        headerValue = \"\";\n        entryValue = \"\";\n        entryName = \"\";\n        contentType = \"\";\n        filename = null;\n        entryChunks.length = 0;\n    };\n    parser.onHeaderField = function(ui8a) {\n        headerField += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    parser.onHeaderValue = function(ui8a) {\n        headerValue += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    parser.onHeaderEnd = function() {\n        headerValue += decoder.decode();\n        headerField = headerField.toLowerCase();\n        if (headerField === \"content-disposition\") {\n            // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n            const m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n            if (m) {\n                entryName = m[2] || m[3] || \"\";\n            }\n            filename = _fileName(headerValue);\n            if (filename) {\n                parser.onPartData = appendToFile;\n                parser.onPartEnd = appendFileToFormData;\n            }\n        } else if (headerField === \"content-type\") {\n            contentType = headerValue;\n        }\n        headerValue = \"\";\n        headerField = \"\";\n    };\n    for await (const chunk of Body){\n        parser.write(chunk);\n    }\n    parser.end();\n    return formData;\n}\nexports.toFormData = toFormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst abortController = __webpack_require__(/*! ./shared/node-fetch-native.8afd3fea.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\n__webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n__webpack_require__(/*! node:zlib */ \"node:zlib\");\n__webpack_require__(/*! node:stream */ \"node:stream\");\n__webpack_require__(/*! node:buffer */ \"node:buffer\");\n__webpack_require__(/*! node:util */ \"node:util\");\n__webpack_require__(/*! node:url */ \"node:url\");\n__webpack_require__(/*! node:net */ \"node:net\");\nconst { stat } = node_fs.promises;\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */ const blobFromSync = (path, type)=>fromBlob(node_fs.statSync(path), path, type);\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */ const blobFrom = (path, type)=>stat(path).then((stat)=>fromBlob(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */ const fileFrom = (path, type)=>stat(path).then((stat)=>fromFile(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */ const fileFromSync = (path, type)=>fromFile(node_fs.statSync(path), path, type);\n// @ts-ignore\nconst fromBlob = (stat, path, type = \"\")=>new abortController._Blob([\n        new BlobDataItem({\n            path,\n            size: stat.size,\n            lastModified: stat.mtimeMs,\n            start: 0\n        })\n    ], {\n        type\n    });\n// @ts-ignore\nconst fromFile = (stat, path, type = \"\")=>new abortController.File([\n        new BlobDataItem({\n            path,\n            size: stat.size,\n            lastModified: stat.mtimeMs,\n            start: 0\n        })\n    ], node_path.basename(path), {\n        type,\n        lastModified: stat.mtimeMs\n    });\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */ class BlobDataItem {\n    #path;\n    #start;\n    constructor(options){\n        this.#path = options.path;\n        this.#start = options.start;\n        this.size = options.size;\n        this.lastModified = options.lastModified;\n        this.originalSize = options.originalSize === undefined ? options.size : options.originalSize;\n    }\n    /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */ slice(start, end) {\n        return new BlobDataItem({\n            path: this.#path,\n            lastModified: this.lastModified,\n            originalSize: this.originalSize,\n            size: end - start,\n            start: this.#start + start\n        });\n    }\n    async *stream() {\n        const { mtimeMs, size } = await stat(this.#path);\n        if (mtimeMs > this.lastModified || this.originalSize !== size) {\n            throw new abortController.nodeDomexception(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\", \"NotReadableError\");\n        }\n        yield* node_fs.createReadStream(this.#path, {\n            start: this.#start,\n            end: this.#start + this.size - 1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n}\nconst fetch = globalThis.fetch || abortController.fetch;\nconst Blob = globalThis.Blob || abortController._Blob;\nconst File = globalThis.File || abortController.File;\nconst FormData = globalThis.FormData || abortController.FormData;\nconst Headers = globalThis.Headers || abortController.Headers;\nconst Request = globalThis.Request || abortController.Request;\nconst Response = globalThis.Response || abortController.Response;\nconst AbortController = globalThis.AbortController || abortController.AbortController;\nexports.AbortError = abortController.AbortError;\nexports.FetchError = abortController.FetchError;\nexports.isRedirect = abortController.isRedirect;\nexports.AbortController = AbortController;\nexports.Blob = Blob;\nexports.File = File;\nexports.FormData = FormData;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports.blobFrom = blobFrom;\nexports.blobFromSync = blobFromSync;\nexports[\"default\"] = fetch;\nexports.fetch = fetch;\nexports.fileFrom = fileFrom;\nexports.fileFromSync = fileFromSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst Stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_buffer = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_url = __webpack_require__(/*! node:url */ \"node:url\");\nconst node_net = __webpack_require__(/*! node:net */ \"node:net\");\n__webpack_require__(/*! node:fs */ \"node:fs\");\n__webpack_require__(/*! node:path */ \"node:path\");\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */ function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, \"\");\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(\",\");\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError(\"malformed data: URI\");\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(\";\");\n    let charset = \"\";\n    let base64 = false;\n    const type = meta[0] || \"text/plain\";\n    let typeFull = type;\n    for(let i = 1; i < meta.length; i++){\n        if (meta[i] === \"base64\") {\n            base64 = true;\n        } else {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf(\"charset=\") === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += \";charset=US-ASCII\";\n        charset = \"US-ASCII\";\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? \"base64\" : \"ascii\";\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nvar ponyfill_es2018 = {\n    exports: {}\n};\n/**\n * web-streams-polyfill v3.2.1\n */ var hasRequiredPonyfill_es2018;\nfunction requirePonyfill_es2018() {\n    if (hasRequiredPonyfill_es2018) return ponyfill_es2018.exports;\n    hasRequiredPonyfill_es2018 = 1;\n    (function(module, exports1) {\n        (function(global1, factory) {\n            factory(exports1);\n        })(commonjsGlobal, function(exports1) {\n            /// <reference lib=\"es2015.symbol\" />\n            const SymbolPolyfill = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? Symbol : (description)=>`Symbol(${description})`;\n            /// <reference lib=\"dom\" />\n            function noop() {\n                return undefined;\n            }\n            function getGlobals() {\n                if (typeof self !== \"undefined\") {\n                    return self;\n                } else if (false) {} else if (typeof commonjsGlobal !== \"undefined\") {\n                    return commonjsGlobal;\n                }\n                return undefined;\n            }\n            const globals = getGlobals();\n            function typeIsObject(x) {\n                return typeof x === \"object\" && x !== null || typeof x === \"function\";\n            }\n            const rethrowAssertionErrorRejection = noop;\n            const originalPromise = Promise;\n            const originalPromiseThen = Promise.prototype.then;\n            const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n            const originalPromiseReject = Promise.reject.bind(originalPromise);\n            function newPromise(executor) {\n                return new originalPromise(executor);\n            }\n            function promiseResolvedWith(value1) {\n                return originalPromiseResolve(value1);\n            }\n            function promiseRejectedWith(reason) {\n                return originalPromiseReject(reason);\n            }\n            function PerformPromiseThen(promise, onFulfilled, onRejected) {\n                // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n                // approximation.\n                return originalPromiseThen.call(promise, onFulfilled, onRejected);\n            }\n            function uponPromise(promise, onFulfilled, onRejected) {\n                PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n            }\n            function uponFulfillment(promise, onFulfilled) {\n                uponPromise(promise, onFulfilled);\n            }\n            function uponRejection(promise, onRejected) {\n                uponPromise(promise, undefined, onRejected);\n            }\n            function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n                return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n            }\n            function setPromiseIsHandledToTrue(promise) {\n                PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n            }\n            const queueMicrotask = (()=>{\n                const globalQueueMicrotask = globals && globals.queueMicrotask;\n                if (typeof globalQueueMicrotask === \"function\") {\n                    return globalQueueMicrotask;\n                }\n                const resolvedPromise = promiseResolvedWith(undefined);\n                return (fn)=>PerformPromiseThen(resolvedPromise, fn);\n            })();\n            function reflectCall(F, V, args) {\n                if (typeof F !== \"function\") {\n                    throw new TypeError(\"Argument is not a function\");\n                }\n                return Function.prototype.apply.call(F, V, args);\n            }\n            function promiseCall(F, V, args) {\n                try {\n                    return promiseResolvedWith(reflectCall(F, V, args));\n                } catch (value1) {\n                    return promiseRejectedWith(value1);\n                }\n            }\n            // Original from Chromium\n            // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n            const QUEUE_MAX_ARRAY_SIZE = 16384;\n            /**\n\t\t     * Simple queue structure.\n\t\t     *\n\t\t     * Avoids scalability issues with using a packed array directly by using\n\t\t     * multiple arrays in a linked list and keeping the array size bounded.\n\t\t     */ class SimpleQueue {\n                constructor(){\n                    this._cursor = 0;\n                    this._size = 0;\n                    // _front and _back are always defined.\n                    this._front = {\n                        _elements: [],\n                        _next: undefined\n                    };\n                    this._back = this._front;\n                    // The cursor is used to avoid calling Array.shift().\n                    // It contains the index of the front element of the array inside the\n                    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n                    this._cursor = 0;\n                    // When there is only one node, size === elements.length - cursor.\n                    this._size = 0;\n                }\n                get length() {\n                    return this._size;\n                }\n                // For exception safety, this method is structured in order:\n                // 1. Read state\n                // 2. Calculate required state mutations\n                // 3. Perform state mutations\n                push(element) {\n                    const oldBack = this._back;\n                    let newBack = oldBack;\n                    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                        newBack = {\n                            _elements: [],\n                            _next: undefined\n                        };\n                    }\n                    // push() is the mutation most likely to throw an exception, so it\n                    // goes first.\n                    oldBack._elements.push(element);\n                    if (newBack !== oldBack) {\n                        this._back = newBack;\n                        oldBack._next = newBack;\n                    }\n                    ++this._size;\n                }\n                // Like push(), shift() follows the read -> calculate -> mutate pattern for\n                // exception safety.\n                shift() {\n                    const oldFront = this._front;\n                    let newFront = oldFront;\n                    const oldCursor = this._cursor;\n                    let newCursor = oldCursor + 1;\n                    const elements = oldFront._elements;\n                    const element = elements[oldCursor];\n                    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                        newFront = oldFront._next;\n                        newCursor = 0;\n                    }\n                    // No mutations before this point.\n                    --this._size;\n                    this._cursor = newCursor;\n                    if (oldFront !== newFront) {\n                        this._front = newFront;\n                    }\n                    // Permit shifted element to be garbage collected.\n                    elements[oldCursor] = undefined;\n                    return element;\n                }\n                // The tricky thing about forEach() is that it can be called\n                // re-entrantly. The queue may be mutated inside the callback. It is easy to\n                // see that push() within the callback has no negative effects since the end\n                // of the queue is checked for on every iteration. If shift() is called\n                // repeatedly within the callback then the next iteration may return an\n                // element that has been removed. In this case the callback will be called\n                // with undefined values until we either \"catch up\" with elements that still\n                // exist or reach the back of the queue.\n                forEach(callback) {\n                    let i = this._cursor;\n                    let node = this._front;\n                    let elements = node._elements;\n                    while(i !== elements.length || node._next !== undefined){\n                        if (i === elements.length) {\n                            node = node._next;\n                            elements = node._elements;\n                            i = 0;\n                            if (elements.length === 0) {\n                                break;\n                            }\n                        }\n                        callback(elements[i]);\n                        ++i;\n                    }\n                }\n                // Return the element that would be returned if shift() was called now,\n                // without modifying the queue.\n                peek() {\n                    const front = this._front;\n                    const cursor = this._cursor;\n                    return front._elements[cursor];\n                }\n            }\n            function ReadableStreamReaderGenericInitialize(reader, stream) {\n                reader._ownerReadableStream = stream;\n                stream._reader = reader;\n                if (stream._state === \"readable\") {\n                    defaultReaderClosedPromiseInitialize(reader);\n                } else if (stream._state === \"closed\") {\n                    defaultReaderClosedPromiseInitializeAsResolved(reader);\n                } else {\n                    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n                }\n            }\n            // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n            // check.\n            function ReadableStreamReaderGenericCancel(reader, reason) {\n                const stream = reader._ownerReadableStream;\n                return ReadableStreamCancel(stream, reason);\n            }\n            function ReadableStreamReaderGenericRelease(reader) {\n                if (reader._ownerReadableStream._state === \"readable\") {\n                    defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n                } else {\n                    defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n                }\n                reader._ownerReadableStream._reader = undefined;\n                reader._ownerReadableStream = undefined;\n            }\n            // Helper functions for the readers.\n            function readerLockException(name) {\n                return new TypeError(\"Cannot \" + name + \" a stream using a released reader\");\n            }\n            // Helper functions for the ReadableStreamDefaultReader.\n            function defaultReaderClosedPromiseInitialize(reader) {\n                reader._closedPromise = newPromise((resolve, reject)=>{\n                    reader._closedPromise_resolve = resolve;\n                    reader._closedPromise_reject = reject;\n                });\n            }\n            function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n                defaultReaderClosedPromiseInitialize(reader);\n                defaultReaderClosedPromiseReject(reader, reason);\n            }\n            function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n                defaultReaderClosedPromiseInitialize(reader);\n                defaultReaderClosedPromiseResolve(reader);\n            }\n            function defaultReaderClosedPromiseReject(reader, reason) {\n                if (reader._closedPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(reader._closedPromise);\n                reader._closedPromise_reject(reason);\n                reader._closedPromise_resolve = undefined;\n                reader._closedPromise_reject = undefined;\n            }\n            function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n                defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n            }\n            function defaultReaderClosedPromiseResolve(reader) {\n                if (reader._closedPromise_resolve === undefined) {\n                    return;\n                }\n                reader._closedPromise_resolve(undefined);\n                reader._closedPromise_resolve = undefined;\n                reader._closedPromise_reject = undefined;\n            }\n            const AbortSteps = SymbolPolyfill(\"[[AbortSteps]]\");\n            const ErrorSteps = SymbolPolyfill(\"[[ErrorSteps]]\");\n            const CancelSteps = SymbolPolyfill(\"[[CancelSteps]]\");\n            const PullSteps = SymbolPolyfill(\"[[PullSteps]]\");\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n            const NumberIsFinite = Number.isFinite || function(x) {\n                return typeof x === \"number\" && isFinite(x);\n            };\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n            const MathTrunc = Math.trunc || function(v) {\n                return v < 0 ? Math.ceil(v) : Math.floor(v);\n            };\n            // https://heycam.github.io/webidl/#idl-dictionaries\n            function isDictionary(x) {\n                return typeof x === \"object\" || typeof x === \"function\";\n            }\n            function assertDictionary(obj, context) {\n                if (obj !== undefined && !isDictionary(obj)) {\n                    throw new TypeError(`${context} is not an object.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-callback-functions\n            function assertFunction(x, context) {\n                if (typeof x !== \"function\") {\n                    throw new TypeError(`${context} is not a function.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-object\n            function isObject(x) {\n                return typeof x === \"object\" && x !== null || typeof x === \"function\";\n            }\n            function assertObject(x, context) {\n                if (!isObject(x)) {\n                    throw new TypeError(`${context} is not an object.`);\n                }\n            }\n            function assertRequiredArgument(x, position, context) {\n                if (x === undefined) {\n                    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n                }\n            }\n            function assertRequiredField(x, field, context) {\n                if (x === undefined) {\n                    throw new TypeError(`${field} is required in '${context}'.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-unrestricted-double\n            function convertUnrestrictedDouble(value1) {\n                return Number(value1);\n            }\n            function censorNegativeZero(x) {\n                return x === 0 ? 0 : x;\n            }\n            function integerPart(x) {\n                return censorNegativeZero(MathTrunc(x));\n            }\n            // https://heycam.github.io/webidl/#idl-unsigned-long-long\n            function convertUnsignedLongLongWithEnforceRange(value1, context) {\n                const lowerBound = 0;\n                const upperBound = Number.MAX_SAFE_INTEGER;\n                let x = Number(value1);\n                x = censorNegativeZero(x);\n                if (!NumberIsFinite(x)) {\n                    throw new TypeError(`${context} is not a finite number`);\n                }\n                x = integerPart(x);\n                if (x < lowerBound || x > upperBound) {\n                    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n                }\n                if (!NumberIsFinite(x) || x === 0) {\n                    return 0;\n                }\n                // TODO Use BigInt if supported?\n                // let xBigInt = BigInt(integerPart(x));\n                // xBigInt = BigInt.asUintN(64, xBigInt);\n                // return Number(xBigInt);\n                return x;\n            }\n            function assertReadableStream(x, context) {\n                if (!IsReadableStream(x)) {\n                    throw new TypeError(`${context} is not a ReadableStream.`);\n                }\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamDefaultReader(stream) {\n                return new ReadableStreamDefaultReader(stream);\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamAddReadRequest(stream, readRequest) {\n                stream._reader._readRequests.push(readRequest);\n            }\n            function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n                const reader = stream._reader;\n                const readRequest = reader._readRequests.shift();\n                if (done) {\n                    readRequest._closeSteps();\n                } else {\n                    readRequest._chunkSteps(chunk);\n                }\n            }\n            function ReadableStreamGetNumReadRequests(stream) {\n                return stream._reader._readRequests.length;\n            }\n            function ReadableStreamHasDefaultReader(stream) {\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return false;\n                }\n                if (!IsReadableStreamDefaultReader(reader)) {\n                    return false;\n                }\n                return true;\n            }\n            /**\n\t\t     * A default reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamDefaultReader {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"ReadableStreamDefaultReader\");\n                    assertReadableStream(stream, \"First parameter\");\n                    if (IsReadableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    }\n                    ReadableStreamReaderGenericInitialize(this, stream);\n                    this._readRequests = new SimpleQueue();\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed,\n\t\t         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"cancel\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"cancel\"));\n                    }\n                    return ReadableStreamReaderGenericCancel(this, reason);\n                }\n                /**\n\t\t         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */ read() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"read\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"read from\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: false\n                            }),\n                        _closeSteps: ()=>resolvePromise({\n                                value: undefined,\n                                done: true\n                            }),\n                        _errorSteps: (e)=>rejectPromise(e)\n                    };\n                    ReadableStreamDefaultReaderRead(this, readRequest);\n                    return promise;\n                }\n                /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */ releaseLock() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        throw defaultReaderBrandCheckException(\"releaseLock\");\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return;\n                    }\n                    if (this._readRequests.length > 0) {\n                        throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n                    }\n                    ReadableStreamReaderGenericRelease(this);\n                }\n            }\n            Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                read: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamDefaultReader\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the readers.\n            function IsReadableStreamDefaultReader(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readRequests\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamDefaultReader;\n            }\n            function ReadableStreamDefaultReaderRead(reader, readRequest) {\n                const stream = reader._ownerReadableStream;\n                stream._disturbed = true;\n                if (stream._state === \"closed\") {\n                    readRequest._closeSteps();\n                } else if (stream._state === \"errored\") {\n                    readRequest._errorSteps(stream._storedError);\n                } else {\n                    stream._readableStreamController[PullSteps](readRequest);\n                }\n            }\n            // Helper functions for the ReadableStreamDefaultReader.\n            function defaultReaderBrandCheckException(name) {\n                return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n            }\n            /// <reference lib=\"es2018.asynciterable\" />\n            /* eslint-disable @typescript-eslint/no-empty-function */ const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);\n            /// <reference lib=\"es2018.asynciterable\" />\n            class ReadableStreamAsyncIteratorImpl {\n                constructor(reader, preventCancel){\n                    this._ongoingPromise = undefined;\n                    this._isFinished = false;\n                    this._reader = reader;\n                    this._preventCancel = preventCancel;\n                }\n                next() {\n                    const nextSteps = ()=>this._nextSteps();\n                    this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n                    return this._ongoingPromise;\n                }\n                return(value1) {\n                    const returnSteps = ()=>this._returnSteps(value1);\n                    return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n                }\n                _nextSteps() {\n                    if (this._isFinished) {\n                        return Promise.resolve({\n                            value: undefined,\n                            done: true\n                        });\n                    }\n                    const reader = this._reader;\n                    if (reader._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"iterate\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            this._ongoingPromise = undefined;\n                            // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                            // FIXME Is this a bug in the specification, or in the test?\n                            queueMicrotask(()=>resolvePromise({\n                                    value: chunk,\n                                    done: false\n                                }));\n                        },\n                        _closeSteps: ()=>{\n                            this._ongoingPromise = undefined;\n                            this._isFinished = true;\n                            ReadableStreamReaderGenericRelease(reader);\n                            resolvePromise({\n                                value: undefined,\n                                done: true\n                            });\n                        },\n                        _errorSteps: (reason)=>{\n                            this._ongoingPromise = undefined;\n                            this._isFinished = true;\n                            ReadableStreamReaderGenericRelease(reader);\n                            rejectPromise(reason);\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                    return promise;\n                }\n                _returnSteps(value1) {\n                    if (this._isFinished) {\n                        return Promise.resolve({\n                            value: value1,\n                            done: true\n                        });\n                    }\n                    this._isFinished = true;\n                    const reader = this._reader;\n                    if (reader._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"finish iterating\"));\n                    }\n                    if (!this._preventCancel) {\n                        const result = ReadableStreamReaderGenericCancel(reader, value1);\n                        ReadableStreamReaderGenericRelease(reader);\n                        return transformPromiseWith(result, ()=>({\n                                value: value1,\n                                done: true\n                            }));\n                    }\n                    ReadableStreamReaderGenericRelease(reader);\n                    return promiseResolvedWith({\n                        value: value1,\n                        done: true\n                    });\n                }\n            }\n            const ReadableStreamAsyncIteratorPrototype = {\n                next () {\n                    if (!IsReadableStreamAsyncIterator(this)) {\n                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"next\"));\n                    }\n                    return this._asyncIteratorImpl.next();\n                },\n                return (value1) {\n                    if (!IsReadableStreamAsyncIterator(this)) {\n                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"return\"));\n                    }\n                    return this._asyncIteratorImpl.return(value1);\n                }\n            };\n            if (AsyncIteratorPrototype !== undefined) {\n                Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n                const reader = AcquireReadableStreamDefaultReader(stream);\n                const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n                const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n                iterator._asyncIteratorImpl = impl;\n                return iterator;\n            }\n            function IsReadableStreamAsyncIterator(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_asyncIteratorImpl\")) {\n                    return false;\n                }\n                try {\n                    // noinspection SuspiciousTypeOfGuard\n                    return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n                } catch (_a) {\n                    return false;\n                }\n            }\n            // Helper functions for the ReadableStream.\n            function streamAsyncIteratorBrandCheckException(name) {\n                return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n            }\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n            const NumberIsNaN = Number.isNaN || function(x) {\n                // eslint-disable-next-line no-self-compare\n                return x !== x;\n            };\n            function CreateArrayFromList(elements) {\n                // We use arrays to represent lists, so this is basically a no-op.\n                // Do a slice though just in case we happen to depend on the unique-ness.\n                return elements.slice();\n            }\n            function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n                new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n            }\n            // Not implemented correctly\n            function TransferArrayBuffer(O) {\n                return O;\n            }\n            // Not implemented correctly\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            function IsDetachedBuffer(O) {\n                return false;\n            }\n            function ArrayBufferSlice(buffer, begin, end) {\n                // ArrayBuffer.prototype.slice is not available on IE10\n                // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n                if (buffer.slice) {\n                    return buffer.slice(begin, end);\n                }\n                const length = end - begin;\n                const slice = new ArrayBuffer(length);\n                CopyDataBlockBytes(slice, 0, buffer, begin, length);\n                return slice;\n            }\n            function IsNonNegativeNumber(v) {\n                if (typeof v !== \"number\") {\n                    return false;\n                }\n                if (NumberIsNaN(v)) {\n                    return false;\n                }\n                if (v < 0) {\n                    return false;\n                }\n                return true;\n            }\n            function CloneAsUint8Array(O) {\n                const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n                return new Uint8Array(buffer);\n            }\n            function DequeueValue(container) {\n                const pair = container._queue.shift();\n                container._queueTotalSize -= pair.size;\n                if (container._queueTotalSize < 0) {\n                    container._queueTotalSize = 0;\n                }\n                return pair.value;\n            }\n            function EnqueueValueWithSize(container, value1, size) {\n                if (!IsNonNegativeNumber(size) || size === Infinity) {\n                    throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n                }\n                container._queue.push({\n                    value: value1,\n                    size\n                });\n                container._queueTotalSize += size;\n            }\n            function PeekQueueValue(container) {\n                const pair = container._queue.peek();\n                return pair.value;\n            }\n            function ResetQueue(container) {\n                container._queue = new SimpleQueue();\n                container._queueTotalSize = 0;\n            }\n            /**\n\t\t     * A pull-into request in a {@link ReadableByteStreamController}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamBYOBRequest {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n\t\t         */ get view() {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"view\");\n                    }\n                    return this._view;\n                }\n                respond(bytesWritten) {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"respond\");\n                    }\n                    assertRequiredArgument(bytesWritten, 1, \"respond\");\n                    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, \"First parameter\");\n                    if (this._associatedReadableByteStreamController === undefined) {\n                        throw new TypeError(\"This BYOB request has been invalidated\");\n                    }\n                    if (IsDetachedBuffer(this._view.buffer)) ;\n                    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n                }\n                respondWithNewView(view) {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"respondWithNewView\");\n                    }\n                    assertRequiredArgument(view, 1, \"respondWithNewView\");\n                    if (!ArrayBuffer.isView(view)) {\n                        throw new TypeError(\"You can only respond with array buffer views\");\n                    }\n                    if (this._associatedReadableByteStreamController === undefined) {\n                        throw new TypeError(\"This BYOB request has been invalidated\");\n                    }\n                    if (IsDetachedBuffer(view.buffer)) ;\n                    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n                }\n            }\n            Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n                respond: {\n                    enumerable: true\n                },\n                respondWithNewView: {\n                    enumerable: true\n                },\n                view: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamBYOBRequest\",\n                    configurable: true\n                });\n            }\n            /**\n\t\t     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableByteStreamController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the current BYOB pull request, or `null` if there isn't one.\n\t\t         */ get byobRequest() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"byobRequest\");\n                    }\n                    return ReadableByteStreamControllerGetBYOBRequest(this);\n                }\n                /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n\t\t         */ get desiredSize() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"desiredSize\");\n                    }\n                    return ReadableByteStreamControllerGetDesiredSize(this);\n                }\n                /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */ close() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"close\");\n                    }\n                    if (this._closeRequested) {\n                        throw new TypeError(\"The stream has already been closed; do not close it again!\");\n                    }\n                    const state = this._controlledReadableByteStream._state;\n                    if (state !== \"readable\") {\n                        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n                    }\n                    ReadableByteStreamControllerClose(this);\n                }\n                enqueue(chunk) {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"enqueue\");\n                    }\n                    assertRequiredArgument(chunk, 1, \"enqueue\");\n                    if (!ArrayBuffer.isView(chunk)) {\n                        throw new TypeError(\"chunk must be an array buffer view\");\n                    }\n                    if (chunk.byteLength === 0) {\n                        throw new TypeError(\"chunk must have non-zero byteLength\");\n                    }\n                    if (chunk.buffer.byteLength === 0) {\n                        throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n                    }\n                    if (this._closeRequested) {\n                        throw new TypeError(\"stream is closed or draining\");\n                    }\n                    const state = this._controlledReadableByteStream._state;\n                    if (state !== \"readable\") {\n                        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n                    }\n                    ReadableByteStreamControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */ error(e = undefined) {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"error\");\n                    }\n                    ReadableByteStreamControllerError(this, e);\n                }\n                /** @internal */ [CancelSteps](reason) {\n                    ReadableByteStreamControllerClearPendingPullIntos(this);\n                    ResetQueue(this);\n                    const result = this._cancelAlgorithm(reason);\n                    ReadableByteStreamControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [PullSteps](readRequest) {\n                    const stream = this._controlledReadableByteStream;\n                    if (this._queueTotalSize > 0) {\n                        const entry = this._queue.shift();\n                        this._queueTotalSize -= entry.byteLength;\n                        ReadableByteStreamControllerHandleQueueDrain(this);\n                        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n                        readRequest._chunkSteps(view);\n                        return;\n                    }\n                    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n                    if (autoAllocateChunkSize !== undefined) {\n                        let buffer;\n                        try {\n                            buffer = new ArrayBuffer(autoAllocateChunkSize);\n                        } catch (bufferE) {\n                            readRequest._errorSteps(bufferE);\n                            return;\n                        }\n                        const pullIntoDescriptor = {\n                            buffer,\n                            bufferByteLength: autoAllocateChunkSize,\n                            byteOffset: 0,\n                            byteLength: autoAllocateChunkSize,\n                            bytesFilled: 0,\n                            elementSize: 1,\n                            viewConstructor: Uint8Array,\n                            readerType: \"default\"\n                        };\n                        this._pendingPullIntos.push(pullIntoDescriptor);\n                    }\n                    ReadableStreamAddReadRequest(stream, readRequest);\n                    ReadableByteStreamControllerCallPullIfNeeded(this);\n                }\n            }\n            Object.defineProperties(ReadableByteStreamController.prototype, {\n                close: {\n                    enumerable: true\n                },\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                byobRequest: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableByteStreamController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableByteStreamController.\n            function IsReadableByteStreamController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledReadableByteStream\")) {\n                    return false;\n                }\n                return x instanceof ReadableByteStreamController;\n            }\n            function IsReadableStreamBYOBRequest(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_associatedReadableByteStreamController\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamBYOBRequest;\n            }\n            function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n                const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n                if (!shouldPull) {\n                    return;\n                }\n                if (controller._pulling) {\n                    controller._pullAgain = true;\n                    return;\n                }\n                controller._pulling = true;\n                // TODO: Test controller argument\n                const pullPromise = controller._pullAlgorithm();\n                uponPromise(pullPromise, ()=>{\n                    controller._pulling = false;\n                    if (controller._pullAgain) {\n                        controller._pullAgain = false;\n                        ReadableByteStreamControllerCallPullIfNeeded(controller);\n                    }\n                }, (e)=>{\n                    ReadableByteStreamControllerError(controller, e);\n                });\n            }\n            function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                controller._pendingPullIntos = new SimpleQueue();\n            }\n            function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n                let done = false;\n                if (stream._state === \"closed\") {\n                    done = true;\n                }\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                if (pullIntoDescriptor.readerType === \"default\") {\n                    ReadableStreamFulfillReadRequest(stream, filledView, done);\n                } else {\n                    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n                }\n            }\n            function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n                const bytesFilled = pullIntoDescriptor.bytesFilled;\n                const elementSize = pullIntoDescriptor.elementSize;\n                return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n            }\n            function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n                controller._queue.push({\n                    buffer,\n                    byteOffset,\n                    byteLength\n                });\n                controller._queueTotalSize += byteLength;\n            }\n            function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n                const elementSize = pullIntoDescriptor.elementSize;\n                const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n                const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n                const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n                const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n                let totalBytesToCopyRemaining = maxBytesToCopy;\n                let ready = false;\n                if (maxAlignedBytes > currentAlignedBytes) {\n                    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n                    ready = true;\n                }\n                const queue = controller._queue;\n                while(totalBytesToCopyRemaining > 0){\n                    const headOfQueue = queue.peek();\n                    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n                    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n                    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n                    if (headOfQueue.byteLength === bytesToCopy) {\n                        queue.shift();\n                    } else {\n                        headOfQueue.byteOffset += bytesToCopy;\n                        headOfQueue.byteLength -= bytesToCopy;\n                    }\n                    controller._queueTotalSize -= bytesToCopy;\n                    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n                    totalBytesToCopyRemaining -= bytesToCopy;\n                }\n                return ready;\n            }\n            function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n                pullIntoDescriptor.bytesFilled += size;\n            }\n            function ReadableByteStreamControllerHandleQueueDrain(controller) {\n                if (controller._queueTotalSize === 0 && controller._closeRequested) {\n                    ReadableByteStreamControllerClearAlgorithms(controller);\n                    ReadableStreamClose(controller._controlledReadableByteStream);\n                } else {\n                    ReadableByteStreamControllerCallPullIfNeeded(controller);\n                }\n            }\n            function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n                if (controller._byobRequest === null) {\n                    return;\n                }\n                controller._byobRequest._associatedReadableByteStreamController = undefined;\n                controller._byobRequest._view = null;\n                controller._byobRequest = null;\n            }\n            function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n                while(controller._pendingPullIntos.length > 0){\n                    if (controller._queueTotalSize === 0) {\n                        return;\n                    }\n                    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                        ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n                    }\n                }\n            }\n            function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n                const stream = controller._controlledReadableByteStream;\n                let elementSize = 1;\n                if (view.constructor !== DataView) {\n                    elementSize = view.constructor.BYTES_PER_ELEMENT;\n                }\n                const ctor = view.constructor;\n                // try {\n                const buffer = TransferArrayBuffer(view.buffer);\n                // } catch (e) {\n                //   readIntoRequest._errorSteps(e);\n                //   return;\n                // }\n                const pullIntoDescriptor = {\n                    buffer,\n                    bufferByteLength: buffer.byteLength,\n                    byteOffset: view.byteOffset,\n                    byteLength: view.byteLength,\n                    bytesFilled: 0,\n                    elementSize,\n                    viewConstructor: ctor,\n                    readerType: \"byob\"\n                };\n                if (controller._pendingPullIntos.length > 0) {\n                    controller._pendingPullIntos.push(pullIntoDescriptor);\n                    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n                    // - No change happens on desiredSize\n                    // - The source has already been notified of that there's at least 1 pending read(view)\n                    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n                    return;\n                }\n                if (stream._state === \"closed\") {\n                    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n                    readIntoRequest._closeSteps(emptyView);\n                    return;\n                }\n                if (controller._queueTotalSize > 0) {\n                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                        ReadableByteStreamControllerHandleQueueDrain(controller);\n                        readIntoRequest._chunkSteps(filledView);\n                        return;\n                    }\n                    if (controller._closeRequested) {\n                        const e = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        ReadableByteStreamControllerError(controller, e);\n                        readIntoRequest._errorSteps(e);\n                        return;\n                    }\n                }\n                controller._pendingPullIntos.push(pullIntoDescriptor);\n                ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n                const stream = controller._controlledReadableByteStream;\n                if (ReadableStreamHasBYOBReader(stream)) {\n                    while(ReadableStreamGetNumReadIntoRequests(stream) > 0){\n                        const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n                    }\n                }\n            }\n            function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n                ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n                if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n                    return;\n                }\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n                if (remainderSize > 0) {\n                    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n                    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n                }\n                pullIntoDescriptor.bytesFilled -= remainderSize;\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n                ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n            }\n            function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    ReadableByteStreamControllerRespondInClosedState(controller);\n                } else {\n                    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n                }\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n                const descriptor = controller._pendingPullIntos.shift();\n                return descriptor;\n            }\n            function ReadableByteStreamControllerShouldCallPull(controller) {\n                const stream = controller._controlledReadableByteStream;\n                if (stream._state !== \"readable\") {\n                    return false;\n                }\n                if (controller._closeRequested) {\n                    return false;\n                }\n                if (!controller._started) {\n                    return false;\n                }\n                if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    return true;\n                }\n                if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                    return true;\n                }\n                const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n                if (desiredSize > 0) {\n                    return true;\n                }\n                return false;\n            }\n            function ReadableByteStreamControllerClearAlgorithms(controller) {\n                controller._pullAlgorithm = undefined;\n                controller._cancelAlgorithm = undefined;\n            }\n            // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n            function ReadableByteStreamControllerClose(controller) {\n                const stream = controller._controlledReadableByteStream;\n                if (controller._closeRequested || stream._state !== \"readable\") {\n                    return;\n                }\n                if (controller._queueTotalSize > 0) {\n                    controller._closeRequested = true;\n                    return;\n                }\n                if (controller._pendingPullIntos.length > 0) {\n                    const firstPendingPullInto = controller._pendingPullIntos.peek();\n                    if (firstPendingPullInto.bytesFilled > 0) {\n                        const e = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        ReadableByteStreamControllerError(controller, e);\n                        throw e;\n                    }\n                }\n                ReadableByteStreamControllerClearAlgorithms(controller);\n                ReadableStreamClose(stream);\n            }\n            function ReadableByteStreamControllerEnqueue(controller, chunk) {\n                const stream = controller._controlledReadableByteStream;\n                if (controller._closeRequested || stream._state !== \"readable\") {\n                    return;\n                }\n                const buffer = chunk.buffer;\n                const byteOffset = chunk.byteOffset;\n                const byteLength = chunk.byteLength;\n                const transferredBuffer = TransferArrayBuffer(buffer);\n                if (controller._pendingPullIntos.length > 0) {\n                    const firstPendingPullInto = controller._pendingPullIntos.peek();\n                    if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n                    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n                }\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                if (ReadableStreamHasDefaultReader(stream)) {\n                    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                    } else {\n                        if (controller._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        }\n                        const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n                    }\n                } else if (ReadableStreamHasBYOBReader(stream)) {\n                    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n                } else {\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                }\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerError(controller, e) {\n                const stream = controller._controlledReadableByteStream;\n                if (stream._state !== \"readable\") {\n                    return;\n                }\n                ReadableByteStreamControllerClearPendingPullIntos(controller);\n                ResetQueue(controller);\n                ReadableByteStreamControllerClearAlgorithms(controller);\n                ReadableStreamError(stream, e);\n            }\n            function ReadableByteStreamControllerGetBYOBRequest(controller) {\n                if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n                    const firstDescriptor = controller._pendingPullIntos.peek();\n                    const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n                    const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n                    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n                    controller._byobRequest = byobRequest;\n                }\n                return controller._byobRequest;\n            }\n            function ReadableByteStreamControllerGetDesiredSize(controller) {\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"errored\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    if (bytesWritten !== 0) {\n                        throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n                    }\n                } else {\n                    if (bytesWritten === 0) {\n                        throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n                    }\n                    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                        throw new RangeError(\"bytesWritten out of range\");\n                    }\n                }\n                firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n                ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n            }\n            function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    if (view.byteLength !== 0) {\n                        throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n                    }\n                } else {\n                    if (view.byteLength === 0) {\n                        throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n                    }\n                }\n                if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n                    throw new RangeError(\"The region specified by view does not match byobRequest\");\n                }\n                if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n                    throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n                }\n                if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n                    throw new RangeError(\"The region specified by view is larger than byobRequest\");\n                }\n                const viewByteLength = view.byteLength;\n                firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n                ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n            }\n            function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n                controller._controlledReadableByteStream = stream;\n                controller._pullAgain = false;\n                controller._pulling = false;\n                controller._byobRequest = null;\n                // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n                controller._queue = controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._closeRequested = false;\n                controller._started = false;\n                controller._strategyHWM = highWaterMark;\n                controller._pullAlgorithm = pullAlgorithm;\n                controller._cancelAlgorithm = cancelAlgorithm;\n                controller._autoAllocateChunkSize = autoAllocateChunkSize;\n                controller._pendingPullIntos = new SimpleQueue();\n                stream._readableStreamController = controller;\n                const startResult = startAlgorithm();\n                uponPromise(promiseResolvedWith(startResult), ()=>{\n                    controller._started = true;\n                    ReadableByteStreamControllerCallPullIfNeeded(controller);\n                }, (r)=>{\n                    ReadableByteStreamControllerError(controller, r);\n                });\n            }\n            function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n                const controller = Object.create(ReadableByteStreamController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let pullAlgorithm = ()=>promiseResolvedWith(undefined);\n                let cancelAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingByteSource.start !== undefined) {\n                    startAlgorithm = ()=>underlyingByteSource.start(controller);\n                }\n                if (underlyingByteSource.pull !== undefined) {\n                    pullAlgorithm = ()=>underlyingByteSource.pull(controller);\n                }\n                if (underlyingByteSource.cancel !== undefined) {\n                    cancelAlgorithm = (reason)=>underlyingByteSource.cancel(reason);\n                }\n                const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n                if (autoAllocateChunkSize === 0) {\n                    throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n                }\n                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n            }\n            function SetUpReadableStreamBYOBRequest(request, controller, view) {\n                request._associatedReadableByteStreamController = controller;\n                request._view = view;\n            }\n            // Helper functions for the ReadableStreamBYOBRequest.\n            function byobRequestBrandCheckException(name) {\n                return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n            }\n            // Helper functions for the ReadableByteStreamController.\n            function byteStreamControllerBrandCheckException(name) {\n                return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamBYOBReader(stream) {\n                return new ReadableStreamBYOBReader(stream);\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n                stream._reader._readIntoRequests.push(readIntoRequest);\n            }\n            function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n                const reader = stream._reader;\n                const readIntoRequest = reader._readIntoRequests.shift();\n                if (done) {\n                    readIntoRequest._closeSteps(chunk);\n                } else {\n                    readIntoRequest._chunkSteps(chunk);\n                }\n            }\n            function ReadableStreamGetNumReadIntoRequests(stream) {\n                return stream._reader._readIntoRequests.length;\n            }\n            function ReadableStreamHasBYOBReader(stream) {\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return false;\n                }\n                if (!IsReadableStreamBYOBReader(reader)) {\n                    return false;\n                }\n                return true;\n            }\n            /**\n\t\t     * A BYOB reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamBYOBReader {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"ReadableStreamBYOBReader\");\n                    assertReadableStream(stream, \"First parameter\");\n                    if (IsReadableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    }\n                    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                        throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte \" + \"source\");\n                    }\n                    ReadableStreamReaderGenericInitialize(this, stream);\n                    this._readIntoRequests = new SimpleQueue();\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the reader's lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"cancel\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"cancel\"));\n                    }\n                    return ReadableStreamReaderGenericCancel(this, reason);\n                }\n                /**\n\t\t         * Attempts to reads bytes into view, and returns a promise resolved with the result.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */ read(view) {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"read\"));\n                    }\n                    if (!ArrayBuffer.isView(view)) {\n                        return promiseRejectedWith(new TypeError(\"view must be an array buffer view\"));\n                    }\n                    if (view.byteLength === 0) {\n                        return promiseRejectedWith(new TypeError(\"view must have non-zero byteLength\"));\n                    }\n                    if (view.buffer.byteLength === 0) {\n                        return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n                    }\n                    if (IsDetachedBuffer(view.buffer)) ;\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"read from\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readIntoRequest = {\n                        _chunkSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: false\n                            }),\n                        _closeSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: true\n                            }),\n                        _errorSteps: (e)=>rejectPromise(e)\n                    };\n                    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n                    return promise;\n                }\n                /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */ releaseLock() {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        throw byobReaderBrandCheckException(\"releaseLock\");\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return;\n                    }\n                    if (this._readIntoRequests.length > 0) {\n                        throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n                    }\n                    ReadableStreamReaderGenericRelease(this);\n                }\n            }\n            Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                read: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamBYOBReader\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the readers.\n            function IsReadableStreamBYOBReader(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readIntoRequests\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamBYOBReader;\n            }\n            function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n                const stream = reader._ownerReadableStream;\n                stream._disturbed = true;\n                if (stream._state === \"errored\") {\n                    readIntoRequest._errorSteps(stream._storedError);\n                } else {\n                    ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n                }\n            }\n            // Helper functions for the ReadableStreamBYOBReader.\n            function byobReaderBrandCheckException(name) {\n                return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n            }\n            function ExtractHighWaterMark(strategy, defaultHWM) {\n                const { highWaterMark } = strategy;\n                if (highWaterMark === undefined) {\n                    return defaultHWM;\n                }\n                if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n                    throw new RangeError(\"Invalid highWaterMark\");\n                }\n                return highWaterMark;\n            }\n            function ExtractSizeAlgorithm(strategy) {\n                const { size } = strategy;\n                if (!size) {\n                    return ()=>1;\n                }\n                return size;\n            }\n            function convertQueuingStrategy(init, context) {\n                assertDictionary(init, context);\n                const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n                const size = init === null || init === void 0 ? void 0 : init.size;\n                return {\n                    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n                    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n                };\n            }\n            function convertQueuingStrategySize(fn, context) {\n                assertFunction(fn, context);\n                return (chunk)=>convertUnrestrictedDouble(fn(chunk));\n            }\n            function convertUnderlyingSink(original, context) {\n                assertDictionary(original, context);\n                const abort = original === null || original === void 0 ? void 0 : original.abort;\n                const close = original === null || original === void 0 ? void 0 : original.close;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const type = original === null || original === void 0 ? void 0 : original.type;\n                const write = original === null || original === void 0 ? void 0 : original.write;\n                return {\n                    abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n                    close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n                    start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n                    write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n                    type\n                };\n            }\n            function convertUnderlyingSinkAbortCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (reason)=>promiseCall(fn, original, [\n                        reason\n                    ]);\n            }\n            function convertUnderlyingSinkCloseCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return ()=>promiseCall(fn, original, []);\n            }\n            function convertUnderlyingSinkStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertUnderlyingSinkWriteCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (chunk, controller)=>promiseCall(fn, original, [\n                        chunk,\n                        controller\n                    ]);\n            }\n            function assertWritableStream(x, context) {\n                if (!IsWritableStream(x)) {\n                    throw new TypeError(`${context} is not a WritableStream.`);\n                }\n            }\n            function isAbortSignal(value1) {\n                if (typeof value1 !== \"object\" || value1 === null) {\n                    return false;\n                }\n                try {\n                    return typeof value1.aborted === \"boolean\";\n                } catch (_a) {\n                    // AbortSignal.prototype.aborted throws if its brand check fails\n                    return false;\n                }\n            }\n            const supportsAbortController = typeof AbortController === \"function\";\n            /**\n\t\t     * Construct a new AbortController, if supported by the platform.\n\t\t     *\n\t\t     * @internal\n\t\t     */ function createAbortController() {\n                if (supportsAbortController) {\n                    return new AbortController();\n                }\n                return undefined;\n            }\n            /**\n\t\t     * A writable stream represents a destination for data, into which you can write.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStream {\n                constructor(rawUnderlyingSink = {}, rawStrategy = {}){\n                    if (rawUnderlyingSink === undefined) {\n                        rawUnderlyingSink = null;\n                    } else {\n                        assertObject(rawUnderlyingSink, \"First parameter\");\n                    }\n                    const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n                    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, \"First parameter\");\n                    InitializeWritableStream(this);\n                    const type = underlyingSink.type;\n                    if (type !== undefined) {\n                        throw new RangeError(\"Invalid type is specified\");\n                    }\n                    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n                }\n                /**\n\t\t         * Returns whether or not the writable stream is locked to a writer.\n\t\t         */ get locked() {\n                    if (!IsWritableStream(this)) {\n                        throw streamBrandCheckException$2(\"locked\");\n                    }\n                    return IsWritableStreamLocked(this);\n                }\n                /**\n\t\t         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n\t\t         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n\t\t         * mechanism of the underlying sink.\n\t\t         *\n\t\t         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n\t\t         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n\t\t         * the stream) if the stream is currently locked.\n\t\t         */ abort(reason = undefined) {\n                    if (!IsWritableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$2(\"abort\"));\n                    }\n                    if (IsWritableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot abort a stream that already has a writer\"));\n                    }\n                    return WritableStreamAbort(this, reason);\n                }\n                /**\n\t\t         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n\t\t         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n\t\t         *\n\t\t         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n\t\t         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n\t\t         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n\t\t         */ close() {\n                    if (!IsWritableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$2(\"close\"));\n                    }\n                    if (IsWritableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close a stream that already has a writer\"));\n                    }\n                    if (WritableStreamCloseQueuedOrInFlight(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n                    }\n                    return WritableStreamClose(this);\n                }\n                /**\n\t\t         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n\t\t         * is locked, no other writer can be acquired until this one is released.\n\t\t         *\n\t\t         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n\t\t         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n\t\t         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n\t\t         */ getWriter() {\n                    if (!IsWritableStream(this)) {\n                        throw streamBrandCheckException$2(\"getWriter\");\n                    }\n                    return AcquireWritableStreamDefaultWriter(this);\n                }\n            }\n            Object.defineProperties(WritableStream.prototype, {\n                abort: {\n                    enumerable: true\n                },\n                close: {\n                    enumerable: true\n                },\n                getWriter: {\n                    enumerable: true\n                },\n                locked: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStream\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the WritableStream.\n            function AcquireWritableStreamDefaultWriter(stream) {\n                return new WritableStreamDefaultWriter(stream);\n            }\n            // Throws if and only if startAlgorithm throws.\n            function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = ()=>1) {\n                const stream = Object.create(WritableStream.prototype);\n                InitializeWritableStream(stream);\n                const controller = Object.create(WritableStreamDefaultController.prototype);\n                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n                return stream;\n            }\n            function InitializeWritableStream(stream) {\n                stream._state = \"writable\";\n                // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n                // 'erroring' or 'errored'. May be set to an undefined value.\n                stream._storedError = undefined;\n                stream._writer = undefined;\n                // Initialize to undefined first because the constructor of the controller checks this\n                // variable to validate the caller.\n                stream._writableStreamController = undefined;\n                // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n                // producer without waiting for the queued writes to finish.\n                stream._writeRequests = new SimpleQueue();\n                // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n                // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n                stream._inFlightWriteRequest = undefined;\n                // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n                // has been detached.\n                stream._closeRequest = undefined;\n                // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n                // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n                stream._inFlightCloseRequest = undefined;\n                // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n                stream._pendingAbortRequest = undefined;\n                // The backpressure signal set by the controller.\n                stream._backpressure = false;\n            }\n            function IsWritableStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_writableStreamController\")) {\n                    return false;\n                }\n                return x instanceof WritableStream;\n            }\n            function IsWritableStreamLocked(stream) {\n                if (stream._writer === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamAbort(stream, reason) {\n                var _a;\n                if (stream._state === \"closed\" || stream._state === \"errored\") {\n                    return promiseResolvedWith(undefined);\n                }\n                stream._writableStreamController._abortReason = reason;\n                (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n                // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n                // but it doesn't know that signaling abort runs author code that might have changed the state.\n                // Widen the type again by casting to WritableStreamState.\n                const state = stream._state;\n                if (state === \"closed\" || state === \"errored\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (stream._pendingAbortRequest !== undefined) {\n                    return stream._pendingAbortRequest._promise;\n                }\n                let wasAlreadyErroring = false;\n                if (state === \"erroring\") {\n                    wasAlreadyErroring = true;\n                    // reason will not be used, so don't keep a reference to it.\n                    reason = undefined;\n                }\n                const promise = newPromise((resolve, reject)=>{\n                    stream._pendingAbortRequest = {\n                        _promise: undefined,\n                        _resolve: resolve,\n                        _reject: reject,\n                        _reason: reason,\n                        _wasAlreadyErroring: wasAlreadyErroring\n                    };\n                });\n                stream._pendingAbortRequest._promise = promise;\n                if (!wasAlreadyErroring) {\n                    WritableStreamStartErroring(stream, reason);\n                }\n                return promise;\n            }\n            function WritableStreamClose(stream) {\n                const state = stream._state;\n                if (state === \"closed\" || state === \"errored\") {\n                    return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n                }\n                const promise = newPromise((resolve, reject)=>{\n                    const closeRequest = {\n                        _resolve: resolve,\n                        _reject: reject\n                    };\n                    stream._closeRequest = closeRequest;\n                });\n                const writer = stream._writer;\n                if (writer !== undefined && stream._backpressure && state === \"writable\") {\n                    defaultWriterReadyPromiseResolve(writer);\n                }\n                WritableStreamDefaultControllerClose(stream._writableStreamController);\n                return promise;\n            }\n            // WritableStream API exposed for controllers.\n            function WritableStreamAddWriteRequest(stream) {\n                const promise = newPromise((resolve, reject)=>{\n                    const writeRequest = {\n                        _resolve: resolve,\n                        _reject: reject\n                    };\n                    stream._writeRequests.push(writeRequest);\n                });\n                return promise;\n            }\n            function WritableStreamDealWithRejection(stream, error) {\n                const state = stream._state;\n                if (state === \"writable\") {\n                    WritableStreamStartErroring(stream, error);\n                    return;\n                }\n                WritableStreamFinishErroring(stream);\n            }\n            function WritableStreamStartErroring(stream, reason) {\n                const controller = stream._writableStreamController;\n                stream._state = \"erroring\";\n                stream._storedError = reason;\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n                }\n                if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n                    WritableStreamFinishErroring(stream);\n                }\n            }\n            function WritableStreamFinishErroring(stream) {\n                stream._state = \"errored\";\n                stream._writableStreamController[ErrorSteps]();\n                const storedError = stream._storedError;\n                stream._writeRequests.forEach((writeRequest)=>{\n                    writeRequest._reject(storedError);\n                });\n                stream._writeRequests = new SimpleQueue();\n                if (stream._pendingAbortRequest === undefined) {\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                    return;\n                }\n                const abortRequest = stream._pendingAbortRequest;\n                stream._pendingAbortRequest = undefined;\n                if (abortRequest._wasAlreadyErroring) {\n                    abortRequest._reject(storedError);\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                    return;\n                }\n                const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n                uponPromise(promise, ()=>{\n                    abortRequest._resolve();\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                }, (reason)=>{\n                    abortRequest._reject(reason);\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                });\n            }\n            function WritableStreamFinishInFlightWrite(stream) {\n                stream._inFlightWriteRequest._resolve(undefined);\n                stream._inFlightWriteRequest = undefined;\n            }\n            function WritableStreamFinishInFlightWriteWithError(stream, error) {\n                stream._inFlightWriteRequest._reject(error);\n                stream._inFlightWriteRequest = undefined;\n                WritableStreamDealWithRejection(stream, error);\n            }\n            function WritableStreamFinishInFlightClose(stream) {\n                stream._inFlightCloseRequest._resolve(undefined);\n                stream._inFlightCloseRequest = undefined;\n                const state = stream._state;\n                if (state === \"erroring\") {\n                    // The error was too late to do anything, so it is ignored.\n                    stream._storedError = undefined;\n                    if (stream._pendingAbortRequest !== undefined) {\n                        stream._pendingAbortRequest._resolve();\n                        stream._pendingAbortRequest = undefined;\n                    }\n                }\n                stream._state = \"closed\";\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    defaultWriterClosedPromiseResolve(writer);\n                }\n            }\n            function WritableStreamFinishInFlightCloseWithError(stream, error) {\n                stream._inFlightCloseRequest._reject(error);\n                stream._inFlightCloseRequest = undefined;\n                // Never execute sink abort() after sink close().\n                if (stream._pendingAbortRequest !== undefined) {\n                    stream._pendingAbortRequest._reject(error);\n                    stream._pendingAbortRequest = undefined;\n                }\n                WritableStreamDealWithRejection(stream, error);\n            }\n            // TODO(ricea): Fix alphabetical order.\n            function WritableStreamCloseQueuedOrInFlight(stream) {\n                if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamHasOperationMarkedInFlight(stream) {\n                if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamMarkCloseRequestInFlight(stream) {\n                stream._inFlightCloseRequest = stream._closeRequest;\n                stream._closeRequest = undefined;\n            }\n            function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n                stream._inFlightWriteRequest = stream._writeRequests.shift();\n            }\n            function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n                if (stream._closeRequest !== undefined) {\n                    stream._closeRequest._reject(stream._storedError);\n                    stream._closeRequest = undefined;\n                }\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    defaultWriterClosedPromiseReject(writer, stream._storedError);\n                }\n            }\n            function WritableStreamUpdateBackpressure(stream, backpressure) {\n                const writer = stream._writer;\n                if (writer !== undefined && backpressure !== stream._backpressure) {\n                    if (backpressure) {\n                        defaultWriterReadyPromiseReset(writer);\n                    } else {\n                        defaultWriterReadyPromiseResolve(writer);\n                    }\n                }\n                stream._backpressure = backpressure;\n            }\n            /**\n\t\t     * A default writer vended by a {@link WritableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStreamDefaultWriter {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"WritableStreamDefaultWriter\");\n                    assertWritableStream(stream, \"First parameter\");\n                    if (IsWritableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n                    }\n                    this._ownerWritableStream = stream;\n                    stream._writer = this;\n                    const state = stream._state;\n                    if (state === \"writable\") {\n                        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                            defaultWriterReadyPromiseInitialize(this);\n                        } else {\n                            defaultWriterReadyPromiseInitializeAsResolved(this);\n                        }\n                        defaultWriterClosedPromiseInitialize(this);\n                    } else if (state === \"erroring\") {\n                        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                        defaultWriterClosedPromiseInitialize(this);\n                    } else if (state === \"closed\") {\n                        defaultWriterReadyPromiseInitializeAsResolved(this);\n                        defaultWriterClosedPromiseInitializeAsResolved(this);\n                    } else {\n                        const storedError = stream._storedError;\n                        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n                    }\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the writer’s lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n\t\t         * A producer can use this information to determine the right amount of data to write.\n\t\t         *\n\t\t         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n\t\t         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n\t\t         * the writer’s lock is released.\n\t\t         */ get desiredSize() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        throw defaultWriterBrandCheckException(\"desiredSize\");\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        throw defaultWriterLockException(\"desiredSize\");\n                    }\n                    return WritableStreamDefaultWriterGetDesiredSize(this);\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n\t\t         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n\t\t         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n\t\t         *\n\t\t         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n\t\t         * rejected.\n\t\t         */ get ready() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"ready\"));\n                    }\n                    return this._readyPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n\t\t         */ abort(reason = undefined) {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"abort\"));\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"abort\"));\n                    }\n                    return WritableStreamDefaultWriterAbort(this, reason);\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n\t\t         */ close() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"close\"));\n                    }\n                    const stream = this._ownerWritableStream;\n                    if (stream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"close\"));\n                    }\n                    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n                    }\n                    return WritableStreamDefaultWriterClose(this);\n                }\n                /**\n\t\t         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n\t\t         * now on; otherwise, the writer will appear closed.\n\t\t         *\n\t\t         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n\t\t         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n\t\t         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n\t\t         * other producers from writing in an interleaved manner.\n\t\t         */ releaseLock() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        throw defaultWriterBrandCheckException(\"releaseLock\");\n                    }\n                    const stream = this._ownerWritableStream;\n                    if (stream === undefined) {\n                        return;\n                    }\n                    WritableStreamDefaultWriterRelease(this);\n                }\n                write(chunk = undefined) {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"write\"));\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n                    }\n                    return WritableStreamDefaultWriterWrite(this, chunk);\n                }\n            }\n            Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n                abort: {\n                    enumerable: true\n                },\n                close: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                write: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                },\n                ready: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStreamDefaultWriter\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the WritableStreamDefaultWriter.\n            function IsWritableStreamDefaultWriter(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_ownerWritableStream\")) {\n                    return false;\n                }\n                return x instanceof WritableStreamDefaultWriter;\n            }\n            // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n            function WritableStreamDefaultWriterAbort(writer, reason) {\n                const stream = writer._ownerWritableStream;\n                return WritableStreamAbort(stream, reason);\n            }\n            function WritableStreamDefaultWriterClose(writer) {\n                const stream = writer._ownerWritableStream;\n                return WritableStreamClose(stream);\n            }\n            function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n                const stream = writer._ownerWritableStream;\n                const state = stream._state;\n                if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                return WritableStreamDefaultWriterClose(writer);\n            }\n            function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n                if (writer._closedPromiseState === \"pending\") {\n                    defaultWriterClosedPromiseReject(writer, error);\n                } else {\n                    defaultWriterClosedPromiseResetToRejected(writer, error);\n                }\n            }\n            function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n                if (writer._readyPromiseState === \"pending\") {\n                    defaultWriterReadyPromiseReject(writer, error);\n                } else {\n                    defaultWriterReadyPromiseResetToRejected(writer, error);\n                }\n            }\n            function WritableStreamDefaultWriterGetDesiredSize(writer) {\n                const stream = writer._ownerWritableStream;\n                const state = stream._state;\n                if (state === \"errored\" || state === \"erroring\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n            }\n            function WritableStreamDefaultWriterRelease(writer) {\n                const stream = writer._ownerWritableStream;\n                const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n                WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n                // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n                // rejected until afterwards. This means that simply testing state will not work.\n                WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n                stream._writer = undefined;\n                writer._ownerWritableStream = undefined;\n            }\n            function WritableStreamDefaultWriterWrite(writer, chunk) {\n                const stream = writer._ownerWritableStream;\n                const controller = stream._writableStreamController;\n                const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n                if (stream !== writer._ownerWritableStream) {\n                    return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n                }\n                const state = stream._state;\n                if (state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n                    return promiseRejectedWith(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n                }\n                if (state === \"erroring\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                const promise = WritableStreamAddWriteRequest(stream);\n                WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n                return promise;\n            }\n            const closeSentinel = {};\n            /**\n\t\t     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n\t\t         *\n\t\t         * @deprecated\n\t\t         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n\t\t         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n\t\t         */ get abortReason() {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"abortReason\");\n                    }\n                    return this._abortReason;\n                }\n                /**\n\t\t         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n\t\t         */ get signal() {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"signal\");\n                    }\n                    if (this._abortController === undefined) {\n                        // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                        // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                        // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                        throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n                    }\n                    return this._abortController.signal;\n                }\n                /**\n\t\t         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n\t\t         *\n\t\t         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n\t\t         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n\t\t         * normal lifecycle of interactions with the underlying sink.\n\t\t         */ error(e = undefined) {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"error\");\n                    }\n                    const state = this._controlledWritableStream._state;\n                    if (state !== \"writable\") {\n                        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                        // just treat it as a no-op.\n                        return;\n                    }\n                    WritableStreamDefaultControllerError(this, e);\n                }\n                /** @internal */ [AbortSteps](reason) {\n                    const result = this._abortAlgorithm(reason);\n                    WritableStreamDefaultControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [ErrorSteps]() {\n                    ResetQueue(this);\n                }\n            }\n            Object.defineProperties(WritableStreamDefaultController.prototype, {\n                abortReason: {\n                    enumerable: true\n                },\n                signal: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations implementing interface required by the WritableStream.\n            function IsWritableStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledWritableStream\")) {\n                    return false;\n                }\n                return x instanceof WritableStreamDefaultController;\n            }\n            function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n                controller._controlledWritableStream = stream;\n                stream._writableStreamController = controller;\n                // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n                controller._queue = undefined;\n                controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._abortReason = undefined;\n                controller._abortController = createAbortController();\n                controller._started = false;\n                controller._strategySizeAlgorithm = sizeAlgorithm;\n                controller._strategyHWM = highWaterMark;\n                controller._writeAlgorithm = writeAlgorithm;\n                controller._closeAlgorithm = closeAlgorithm;\n                controller._abortAlgorithm = abortAlgorithm;\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n                const startResult = startAlgorithm();\n                const startPromise = promiseResolvedWith(startResult);\n                uponPromise(startPromise, ()=>{\n                    controller._started = true;\n                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n                }, (r)=>{\n                    controller._started = true;\n                    WritableStreamDealWithRejection(stream, r);\n                });\n            }\n            function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n                const controller = Object.create(WritableStreamDefaultController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let writeAlgorithm = ()=>promiseResolvedWith(undefined);\n                let closeAlgorithm = ()=>promiseResolvedWith(undefined);\n                let abortAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingSink.start !== undefined) {\n                    startAlgorithm = ()=>underlyingSink.start(controller);\n                }\n                if (underlyingSink.write !== undefined) {\n                    writeAlgorithm = (chunk)=>underlyingSink.write(chunk, controller);\n                }\n                if (underlyingSink.close !== undefined) {\n                    closeAlgorithm = ()=>underlyingSink.close();\n                }\n                if (underlyingSink.abort !== undefined) {\n                    abortAlgorithm = (reason)=>underlyingSink.abort(reason);\n                }\n                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n            }\n            // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n            function WritableStreamDefaultControllerClearAlgorithms(controller) {\n                controller._writeAlgorithm = undefined;\n                controller._closeAlgorithm = undefined;\n                controller._abortAlgorithm = undefined;\n                controller._strategySizeAlgorithm = undefined;\n            }\n            function WritableStreamDefaultControllerClose(controller) {\n                EnqueueValueWithSize(controller, closeSentinel, 0);\n                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }\n            function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n                try {\n                    return controller._strategySizeAlgorithm(chunk);\n                } catch (chunkSizeE) {\n                    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n                    return 1;\n                }\n            }\n            function WritableStreamDefaultControllerGetDesiredSize(controller) {\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n                try {\n                    EnqueueValueWithSize(controller, chunk, chunkSize);\n                } catch (enqueueE) {\n                    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n                    return;\n                }\n                const stream = controller._controlledWritableStream;\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === \"writable\") {\n                    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                    WritableStreamUpdateBackpressure(stream, backpressure);\n                }\n                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }\n            // Abstract operations for the WritableStreamDefaultController.\n            function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n                const stream = controller._controlledWritableStream;\n                if (!controller._started) {\n                    return;\n                }\n                if (stream._inFlightWriteRequest !== undefined) {\n                    return;\n                }\n                const state = stream._state;\n                if (state === \"erroring\") {\n                    WritableStreamFinishErroring(stream);\n                    return;\n                }\n                if (controller._queue.length === 0) {\n                    return;\n                }\n                const value1 = PeekQueueValue(controller);\n                if (value1 === closeSentinel) {\n                    WritableStreamDefaultControllerProcessClose(controller);\n                } else {\n                    WritableStreamDefaultControllerProcessWrite(controller, value1);\n                }\n            }\n            function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n                if (controller._controlledWritableStream._state === \"writable\") {\n                    WritableStreamDefaultControllerError(controller, error);\n                }\n            }\n            function WritableStreamDefaultControllerProcessClose(controller) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamMarkCloseRequestInFlight(stream);\n                DequeueValue(controller);\n                const sinkClosePromise = controller._closeAlgorithm();\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n                uponPromise(sinkClosePromise, ()=>{\n                    WritableStreamFinishInFlightClose(stream);\n                }, (reason)=>{\n                    WritableStreamFinishInFlightCloseWithError(stream, reason);\n                });\n            }\n            function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamMarkFirstWriteRequestInFlight(stream);\n                const sinkWritePromise = controller._writeAlgorithm(chunk);\n                uponPromise(sinkWritePromise, ()=>{\n                    WritableStreamFinishInFlightWrite(stream);\n                    const state = stream._state;\n                    DequeueValue(controller);\n                    if (!WritableStreamCloseQueuedOrInFlight(stream) && state === \"writable\") {\n                        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                        WritableStreamUpdateBackpressure(stream, backpressure);\n                    }\n                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n                }, (reason)=>{\n                    if (stream._state === \"writable\") {\n                        WritableStreamDefaultControllerClearAlgorithms(controller);\n                    }\n                    WritableStreamFinishInFlightWriteWithError(stream, reason);\n                });\n            }\n            function WritableStreamDefaultControllerGetBackpressure(controller) {\n                const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n                return desiredSize <= 0;\n            }\n            // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n            function WritableStreamDefaultControllerError(controller, error) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n                WritableStreamStartErroring(stream, error);\n            }\n            // Helper functions for the WritableStream.\n            function streamBrandCheckException$2(name) {\n                return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n            }\n            // Helper functions for the WritableStreamDefaultController.\n            function defaultControllerBrandCheckException$2(name) {\n                return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n            }\n            // Helper functions for the WritableStreamDefaultWriter.\n            function defaultWriterBrandCheckException(name) {\n                return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n            }\n            function defaultWriterLockException(name) {\n                return new TypeError(\"Cannot \" + name + \" a stream using a released writer\");\n            }\n            function defaultWriterClosedPromiseInitialize(writer) {\n                writer._closedPromise = newPromise((resolve, reject)=>{\n                    writer._closedPromise_resolve = resolve;\n                    writer._closedPromise_reject = reject;\n                    writer._closedPromiseState = \"pending\";\n                });\n            }\n            function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n                defaultWriterClosedPromiseInitialize(writer);\n                defaultWriterClosedPromiseReject(writer, reason);\n            }\n            function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n                defaultWriterClosedPromiseInitialize(writer);\n                defaultWriterClosedPromiseResolve(writer);\n            }\n            function defaultWriterClosedPromiseReject(writer, reason) {\n                if (writer._closedPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(writer._closedPromise);\n                writer._closedPromise_reject(reason);\n                writer._closedPromise_resolve = undefined;\n                writer._closedPromise_reject = undefined;\n                writer._closedPromiseState = \"rejected\";\n            }\n            function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n                defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n            }\n            function defaultWriterClosedPromiseResolve(writer) {\n                if (writer._closedPromise_resolve === undefined) {\n                    return;\n                }\n                writer._closedPromise_resolve(undefined);\n                writer._closedPromise_resolve = undefined;\n                writer._closedPromise_reject = undefined;\n                writer._closedPromiseState = \"resolved\";\n            }\n            function defaultWriterReadyPromiseInitialize(writer) {\n                writer._readyPromise = newPromise((resolve, reject)=>{\n                    writer._readyPromise_resolve = resolve;\n                    writer._readyPromise_reject = reject;\n                });\n                writer._readyPromiseState = \"pending\";\n            }\n            function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n                defaultWriterReadyPromiseInitialize(writer);\n                defaultWriterReadyPromiseReject(writer, reason);\n            }\n            function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n                defaultWriterReadyPromiseInitialize(writer);\n                defaultWriterReadyPromiseResolve(writer);\n            }\n            function defaultWriterReadyPromiseReject(writer, reason) {\n                if (writer._readyPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(writer._readyPromise);\n                writer._readyPromise_reject(reason);\n                writer._readyPromise_resolve = undefined;\n                writer._readyPromise_reject = undefined;\n                writer._readyPromiseState = \"rejected\";\n            }\n            function defaultWriterReadyPromiseReset(writer) {\n                defaultWriterReadyPromiseInitialize(writer);\n            }\n            function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n                defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n            }\n            function defaultWriterReadyPromiseResolve(writer) {\n                if (writer._readyPromise_resolve === undefined) {\n                    return;\n                }\n                writer._readyPromise_resolve(undefined);\n                writer._readyPromise_resolve = undefined;\n                writer._readyPromise_reject = undefined;\n                writer._readyPromiseState = \"fulfilled\";\n            }\n            /// <reference lib=\"dom\" />\n            const NativeDOMException = typeof DOMException !== \"undefined\" ? DOMException : undefined;\n            /// <reference types=\"node\" />\n            function isDOMExceptionConstructor(ctor) {\n                if (!(typeof ctor === \"function\" || typeof ctor === \"object\")) {\n                    return false;\n                }\n                try {\n                    new ctor();\n                    return true;\n                } catch (_a) {\n                    return false;\n                }\n            }\n            function createDOMExceptionPolyfill() {\n                // eslint-disable-next-line no-shadow\n                const ctor = function DOMException1(message, name) {\n                    this.message = message || \"\";\n                    this.name = name || \"Error\";\n                    if (Error.captureStackTrace) {\n                        Error.captureStackTrace(this, this.constructor);\n                    }\n                };\n                ctor.prototype = Object.create(Error.prototype);\n                Object.defineProperty(ctor.prototype, \"constructor\", {\n                    value: ctor,\n                    writable: true,\n                    configurable: true\n                });\n                return ctor;\n            }\n            // eslint-disable-next-line no-redeclare\n            const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n            function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n                const reader = AcquireReadableStreamDefaultReader(source);\n                const writer = AcquireWritableStreamDefaultWriter(dest);\n                source._disturbed = true;\n                let shuttingDown = false;\n                // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n                let currentWrite = promiseResolvedWith(undefined);\n                return newPromise((resolve, reject)=>{\n                    let abortAlgorithm;\n                    if (signal !== undefined) {\n                        abortAlgorithm = ()=>{\n                            const error = new DOMException$1(\"Aborted\", \"AbortError\");\n                            const actions = [];\n                            if (!preventAbort) {\n                                actions.push(()=>{\n                                    if (dest._state === \"writable\") {\n                                        return WritableStreamAbort(dest, error);\n                                    }\n                                    return promiseResolvedWith(undefined);\n                                });\n                            }\n                            if (!preventCancel) {\n                                actions.push(()=>{\n                                    if (source._state === \"readable\") {\n                                        return ReadableStreamCancel(source, error);\n                                    }\n                                    return promiseResolvedWith(undefined);\n                                });\n                            }\n                            shutdownWithAction(()=>Promise.all(actions.map((action)=>action())), true, error);\n                        };\n                        if (signal.aborted) {\n                            abortAlgorithm();\n                            return;\n                        }\n                        signal.addEventListener(\"abort\", abortAlgorithm);\n                    }\n                    // Using reader and writer, read all chunks from this and write them to dest\n                    // - Backpressure must be enforced\n                    // - Shutdown must stop all activity\n                    function pipeLoop() {\n                        return newPromise((resolveLoop, rejectLoop)=>{\n                            function next(done) {\n                                if (done) {\n                                    resolveLoop();\n                                } else {\n                                    // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                                    // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                                    PerformPromiseThen(pipeStep(), next, rejectLoop);\n                                }\n                            }\n                            next(false);\n                        });\n                    }\n                    function pipeStep() {\n                        if (shuttingDown) {\n                            return promiseResolvedWith(true);\n                        }\n                        return PerformPromiseThen(writer._readyPromise, ()=>{\n                            return newPromise((resolveRead, rejectRead)=>{\n                                ReadableStreamDefaultReaderRead(reader, {\n                                    _chunkSteps: (chunk)=>{\n                                        currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                        resolveRead(false);\n                                    },\n                                    _closeSteps: ()=>resolveRead(true),\n                                    _errorSteps: rejectRead\n                                });\n                            });\n                        });\n                    }\n                    // Errors must be propagated forward\n                    isOrBecomesErrored(source, reader._closedPromise, (storedError)=>{\n                        if (!preventAbort) {\n                            shutdownWithAction(()=>WritableStreamAbort(dest, storedError), true, storedError);\n                        } else {\n                            shutdown(true, storedError);\n                        }\n                    });\n                    // Errors must be propagated backward\n                    isOrBecomesErrored(dest, writer._closedPromise, (storedError)=>{\n                        if (!preventCancel) {\n                            shutdownWithAction(()=>ReadableStreamCancel(source, storedError), true, storedError);\n                        } else {\n                            shutdown(true, storedError);\n                        }\n                    });\n                    // Closing must be propagated forward\n                    isOrBecomesClosed(source, reader._closedPromise, ()=>{\n                        if (!preventClose) {\n                            shutdownWithAction(()=>WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                        } else {\n                            shutdown();\n                        }\n                    });\n                    // Closing must be propagated backward\n                    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === \"closed\") {\n                        const destClosed = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n                        if (!preventCancel) {\n                            shutdownWithAction(()=>ReadableStreamCancel(source, destClosed), true, destClosed);\n                        } else {\n                            shutdown(true, destClosed);\n                        }\n                    }\n                    setPromiseIsHandledToTrue(pipeLoop());\n                    function waitForWritesToFinish() {\n                        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                        // for that too.\n                        const oldCurrentWrite = currentWrite;\n                        return PerformPromiseThen(currentWrite, ()=>oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n                    }\n                    function isOrBecomesErrored(stream, promise, action) {\n                        if (stream._state === \"errored\") {\n                            action(stream._storedError);\n                        } else {\n                            uponRejection(promise, action);\n                        }\n                    }\n                    function isOrBecomesClosed(stream, promise, action) {\n                        if (stream._state === \"closed\") {\n                            action();\n                        } else {\n                            uponFulfillment(promise, action);\n                        }\n                    }\n                    function shutdownWithAction(action, originalIsError, originalError) {\n                        if (shuttingDown) {\n                            return;\n                        }\n                        shuttingDown = true;\n                        if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                            uponFulfillment(waitForWritesToFinish(), doTheRest);\n                        } else {\n                            doTheRest();\n                        }\n                        function doTheRest() {\n                            uponPromise(action(), ()=>finalize(originalIsError, originalError), (newError)=>finalize(true, newError));\n                        }\n                    }\n                    function shutdown(isError, error) {\n                        if (shuttingDown) {\n                            return;\n                        }\n                        shuttingDown = true;\n                        if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                            uponFulfillment(waitForWritesToFinish(), ()=>finalize(isError, error));\n                        } else {\n                            finalize(isError, error);\n                        }\n                    }\n                    function finalize(isError, error) {\n                        WritableStreamDefaultWriterRelease(writer);\n                        ReadableStreamReaderGenericRelease(reader);\n                        if (signal !== undefined) {\n                            signal.removeEventListener(\"abort\", abortAlgorithm);\n                        }\n                        if (isError) {\n                            reject(error);\n                        } else {\n                            resolve(undefined);\n                        }\n                    }\n                });\n            }\n            /**\n\t\t     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n\t\t         */ get desiredSize() {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"desiredSize\");\n                    }\n                    return ReadableStreamDefaultControllerGetDesiredSize(this);\n                }\n                /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */ close() {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"close\");\n                    }\n                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                        throw new TypeError(\"The stream is not in a state that permits close\");\n                    }\n                    ReadableStreamDefaultControllerClose(this);\n                }\n                enqueue(chunk = undefined) {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"enqueue\");\n                    }\n                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                        throw new TypeError(\"The stream is not in a state that permits enqueue\");\n                    }\n                    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */ error(e = undefined) {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"error\");\n                    }\n                    ReadableStreamDefaultControllerError(this, e);\n                }\n                /** @internal */ [CancelSteps](reason) {\n                    ResetQueue(this);\n                    const result = this._cancelAlgorithm(reason);\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [PullSteps](readRequest) {\n                    const stream = this._controlledReadableStream;\n                    if (this._queue.length > 0) {\n                        const chunk = DequeueValue(this);\n                        if (this._closeRequested && this._queue.length === 0) {\n                            ReadableStreamDefaultControllerClearAlgorithms(this);\n                            ReadableStreamClose(stream);\n                        } else {\n                            ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                        }\n                        readRequest._chunkSteps(chunk);\n                    } else {\n                        ReadableStreamAddReadRequest(stream, readRequest);\n                        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                    }\n                }\n            }\n            Object.defineProperties(ReadableStreamDefaultController.prototype, {\n                close: {\n                    enumerable: true\n                },\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableStreamDefaultController.\n            function IsReadableStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledReadableStream\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamDefaultController;\n            }\n            function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n                const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n                if (!shouldPull) {\n                    return;\n                }\n                if (controller._pulling) {\n                    controller._pullAgain = true;\n                    return;\n                }\n                controller._pulling = true;\n                const pullPromise = controller._pullAlgorithm();\n                uponPromise(pullPromise, ()=>{\n                    controller._pulling = false;\n                    if (controller._pullAgain) {\n                        controller._pullAgain = false;\n                        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n                    }\n                }, (e)=>{\n                    ReadableStreamDefaultControllerError(controller, e);\n                });\n            }\n            function ReadableStreamDefaultControllerShouldCallPull(controller) {\n                const stream = controller._controlledReadableStream;\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return false;\n                }\n                if (!controller._started) {\n                    return false;\n                }\n                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    return true;\n                }\n                const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n                if (desiredSize > 0) {\n                    return true;\n                }\n                return false;\n            }\n            function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n                controller._pullAlgorithm = undefined;\n                controller._cancelAlgorithm = undefined;\n                controller._strategySizeAlgorithm = undefined;\n            }\n            // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n            function ReadableStreamDefaultControllerClose(controller) {\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return;\n                }\n                const stream = controller._controlledReadableStream;\n                controller._closeRequested = true;\n                if (controller._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(controller);\n                    ReadableStreamClose(stream);\n                }\n            }\n            function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return;\n                }\n                const stream = controller._controlledReadableStream;\n                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    ReadableStreamFulfillReadRequest(stream, chunk, false);\n                } else {\n                    let chunkSize;\n                    try {\n                        chunkSize = controller._strategySizeAlgorithm(chunk);\n                    } catch (chunkSizeE) {\n                        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                        throw chunkSizeE;\n                    }\n                    try {\n                        EnqueueValueWithSize(controller, chunk, chunkSize);\n                    } catch (enqueueE) {\n                        ReadableStreamDefaultControllerError(controller, enqueueE);\n                        throw enqueueE;\n                    }\n                }\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n            function ReadableStreamDefaultControllerError(controller, e) {\n                const stream = controller._controlledReadableStream;\n                if (stream._state !== \"readable\") {\n                    return;\n                }\n                ResetQueue(controller);\n                ReadableStreamDefaultControllerClearAlgorithms(controller);\n                ReadableStreamError(stream, e);\n            }\n            function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n                const state = controller._controlledReadableStream._state;\n                if (state === \"errored\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            // This is used in the implementation of TransformStream.\n            function ReadableStreamDefaultControllerHasBackpressure(controller) {\n                if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n                    return false;\n                }\n                return true;\n            }\n            function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n                const state = controller._controlledReadableStream._state;\n                if (!controller._closeRequested && state === \"readable\") {\n                    return true;\n                }\n                return false;\n            }\n            function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n                controller._controlledReadableStream = stream;\n                controller._queue = undefined;\n                controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._started = false;\n                controller._closeRequested = false;\n                controller._pullAgain = false;\n                controller._pulling = false;\n                controller._strategySizeAlgorithm = sizeAlgorithm;\n                controller._strategyHWM = highWaterMark;\n                controller._pullAlgorithm = pullAlgorithm;\n                controller._cancelAlgorithm = cancelAlgorithm;\n                stream._readableStreamController = controller;\n                const startResult = startAlgorithm();\n                uponPromise(promiseResolvedWith(startResult), ()=>{\n                    controller._started = true;\n                    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n                }, (r)=>{\n                    ReadableStreamDefaultControllerError(controller, r);\n                });\n            }\n            function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n                const controller = Object.create(ReadableStreamDefaultController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let pullAlgorithm = ()=>promiseResolvedWith(undefined);\n                let cancelAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingSource.start !== undefined) {\n                    startAlgorithm = ()=>underlyingSource.start(controller);\n                }\n                if (underlyingSource.pull !== undefined) {\n                    pullAlgorithm = ()=>underlyingSource.pull(controller);\n                }\n                if (underlyingSource.cancel !== undefined) {\n                    cancelAlgorithm = (reason)=>underlyingSource.cancel(reason);\n                }\n                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n            }\n            // Helper functions for the ReadableStreamDefaultController.\n            function defaultControllerBrandCheckException$1(name) {\n                return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n            }\n            function ReadableStreamTee(stream, cloneForBranch2) {\n                if (IsReadableByteStreamController(stream._readableStreamController)) {\n                    return ReadableByteStreamTee(stream);\n                }\n                return ReadableStreamDefaultTee(stream);\n            }\n            function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n                const reader = AcquireReadableStreamDefaultReader(stream);\n                let reading = false;\n                let readAgain = false;\n                let canceled1 = false;\n                let canceled2 = false;\n                let reason1;\n                let reason2;\n                let branch1;\n                let branch2;\n                let resolveCancelPromise;\n                const cancelPromise = newPromise((resolve)=>{\n                    resolveCancelPromise = resolve;\n                });\n                function pullAlgorithm() {\n                    if (reading) {\n                        readAgain = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgain = false;\n                                const chunk1 = chunk;\n                                const chunk2 = chunk;\n                                // There is no way to access the cloning code right now in the reference implementation.\n                                // If we add one then we'll need an implementation for serializable objects.\n                                // if (!canceled2 && cloneForBranch2) {\n                                //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                                // }\n                                if (!canceled1) {\n                                    ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                                }\n                                if (!canceled2) {\n                                    ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                                }\n                                reading = false;\n                                if (readAgain) {\n                                    pullAlgorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            reading = false;\n                            if (!canceled1) {\n                                ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                            }\n                            if (!canceled2) {\n                                ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                            }\n                            if (!canceled1 || !canceled2) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                    return promiseResolvedWith(undefined);\n                }\n                function cancel1Algorithm(reason) {\n                    canceled1 = true;\n                    reason1 = reason;\n                    if (canceled2) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function cancel2Algorithm(reason) {\n                    canceled2 = true;\n                    reason2 = reason;\n                    if (canceled1) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function startAlgorithm() {\n                // do nothing\n                }\n                branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n                branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n                uponRejection(reader._closedPromise, (r)=>{\n                    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n                    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                });\n                return [\n                    branch1,\n                    branch2\n                ];\n            }\n            function ReadableByteStreamTee(stream) {\n                let reader = AcquireReadableStreamDefaultReader(stream);\n                let reading = false;\n                let readAgainForBranch1 = false;\n                let readAgainForBranch2 = false;\n                let canceled1 = false;\n                let canceled2 = false;\n                let reason1;\n                let reason2;\n                let branch1;\n                let branch2;\n                let resolveCancelPromise;\n                const cancelPromise = newPromise((resolve)=>{\n                    resolveCancelPromise = resolve;\n                });\n                function forwardReaderError(thisReader) {\n                    uponRejection(thisReader._closedPromise, (r)=>{\n                        if (thisReader !== reader) {\n                            return;\n                        }\n                        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                        if (!canceled1 || !canceled2) {\n                            resolveCancelPromise(undefined);\n                        }\n                    });\n                }\n                function pullWithDefaultReader() {\n                    if (IsReadableStreamBYOBReader(reader)) {\n                        ReadableStreamReaderGenericRelease(reader);\n                        reader = AcquireReadableStreamDefaultReader(stream);\n                        forwardReaderError(reader);\n                    }\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgainForBranch1 = false;\n                                readAgainForBranch2 = false;\n                                const chunk1 = chunk;\n                                let chunk2 = chunk;\n                                if (!canceled1 && !canceled2) {\n                                    try {\n                                        chunk2 = CloneAsUint8Array(chunk);\n                                    } catch (cloneE) {\n                                        ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                        ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                        return;\n                                    }\n                                }\n                                if (!canceled1) {\n                                    ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                                }\n                                if (!canceled2) {\n                                    ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                                }\n                                reading = false;\n                                if (readAgainForBranch1) {\n                                    pull1Algorithm();\n                                } else if (readAgainForBranch2) {\n                                    pull2Algorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            reading = false;\n                            if (!canceled1) {\n                                ReadableByteStreamControllerClose(branch1._readableStreamController);\n                            }\n                            if (!canceled2) {\n                                ReadableByteStreamControllerClose(branch2._readableStreamController);\n                            }\n                            if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                                ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                            }\n                            if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                                ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                            }\n                            if (!canceled1 || !canceled2) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                }\n                function pullWithBYOBReader(view, forBranch2) {\n                    if (IsReadableStreamDefaultReader(reader)) {\n                        ReadableStreamReaderGenericRelease(reader);\n                        reader = AcquireReadableStreamBYOBReader(stream);\n                        forwardReaderError(reader);\n                    }\n                    const byobBranch = forBranch2 ? branch2 : branch1;\n                    const otherBranch = forBranch2 ? branch1 : branch2;\n                    const readIntoRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgainForBranch1 = false;\n                                readAgainForBranch2 = false;\n                                const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                                const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                                if (!otherCanceled) {\n                                    let clonedChunk;\n                                    try {\n                                        clonedChunk = CloneAsUint8Array(chunk);\n                                    } catch (cloneE) {\n                                        ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                        ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                        return;\n                                    }\n                                    if (!byobCanceled) {\n                                        ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                    }\n                                    ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                                } else if (!byobCanceled) {\n                                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                }\n                                reading = false;\n                                if (readAgainForBranch1) {\n                                    pull1Algorithm();\n                                } else if (readAgainForBranch2) {\n                                    pull2Algorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: (chunk)=>{\n                            reading = false;\n                            const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                            const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                            }\n                            if (!otherCanceled) {\n                                ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                            }\n                            if (chunk !== undefined) {\n                                if (!byobCanceled) {\n                                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                }\n                                if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                                    ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                                }\n                            }\n                            if (!byobCanceled || !otherCanceled) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n                }\n                function pull1Algorithm() {\n                    if (reading) {\n                        readAgainForBranch1 = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n                    if (byobRequest === null) {\n                        pullWithDefaultReader();\n                    } else {\n                        pullWithBYOBReader(byobRequest._view, false);\n                    }\n                    return promiseResolvedWith(undefined);\n                }\n                function pull2Algorithm() {\n                    if (reading) {\n                        readAgainForBranch2 = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n                    if (byobRequest === null) {\n                        pullWithDefaultReader();\n                    } else {\n                        pullWithBYOBReader(byobRequest._view, true);\n                    }\n                    return promiseResolvedWith(undefined);\n                }\n                function cancel1Algorithm(reason) {\n                    canceled1 = true;\n                    reason1 = reason;\n                    if (canceled2) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function cancel2Algorithm(reason) {\n                    canceled2 = true;\n                    reason2 = reason;\n                    if (canceled1) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function startAlgorithm() {\n                    return;\n                }\n                branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n                branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n                forwardReaderError(reader);\n                return [\n                    branch1,\n                    branch2\n                ];\n            }\n            function convertUnderlyingDefaultOrByteSource(source, context) {\n                assertDictionary(source, context);\n                const original = source;\n                const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n                const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n                const pull = original === null || original === void 0 ? void 0 : original.pull;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const type = original === null || original === void 0 ? void 0 : original.type;\n                return {\n                    autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n                    cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n                    pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n                    start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n                    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n                };\n            }\n            function convertUnderlyingSourceCancelCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (reason)=>promiseCall(fn, original, [\n                        reason\n                    ]);\n            }\n            function convertUnderlyingSourcePullCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>promiseCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertUnderlyingSourceStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertReadableStreamType(type, context) {\n                type = `${type}`;\n                if (type !== \"bytes\") {\n                    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n                }\n                return type;\n            }\n            function convertReaderOptions(options, context) {\n                assertDictionary(options, context);\n                const mode = options === null || options === void 0 ? void 0 : options.mode;\n                return {\n                    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n                };\n            }\n            function convertReadableStreamReaderMode(mode, context) {\n                mode = `${mode}`;\n                if (mode !== \"byob\") {\n                    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n                }\n                return mode;\n            }\n            function convertIteratorOptions(options, context) {\n                assertDictionary(options, context);\n                const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n                return {\n                    preventCancel: Boolean(preventCancel)\n                };\n            }\n            function convertPipeOptions(options, context) {\n                assertDictionary(options, context);\n                const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n                const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n                const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n                const signal = options === null || options === void 0 ? void 0 : options.signal;\n                if (signal !== undefined) {\n                    assertAbortSignal(signal, `${context} has member 'signal' that`);\n                }\n                return {\n                    preventAbort: Boolean(preventAbort),\n                    preventCancel: Boolean(preventCancel),\n                    preventClose: Boolean(preventClose),\n                    signal\n                };\n            }\n            function assertAbortSignal(signal, context) {\n                if (!isAbortSignal(signal)) {\n                    throw new TypeError(`${context} is not an AbortSignal.`);\n                }\n            }\n            function convertReadableWritablePair(pair, context) {\n                assertDictionary(pair, context);\n                const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n                assertRequiredField(readable, \"readable\", \"ReadableWritablePair\");\n                assertReadableStream(readable, `${context} has member 'readable' that`);\n                const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n                assertRequiredField(writable, \"writable\", \"ReadableWritablePair\");\n                assertWritableStream(writable, `${context} has member 'writable' that`);\n                return {\n                    readable,\n                    writable\n                };\n            }\n            /**\n\t\t     * A readable stream represents a source of data, from which you can read.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStream1 {\n                constructor(rawUnderlyingSource = {}, rawStrategy = {}){\n                    if (rawUnderlyingSource === undefined) {\n                        rawUnderlyingSource = null;\n                    } else {\n                        assertObject(rawUnderlyingSource, \"First parameter\");\n                    }\n                    const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n                    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, \"First parameter\");\n                    InitializeReadableStream(this);\n                    if (underlyingSource.type === \"bytes\") {\n                        if (strategy.size !== undefined) {\n                            throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n                        }\n                        const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n                    } else {\n                        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                        const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n                    }\n                }\n                /**\n\t\t         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n\t\t         */ get locked() {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"locked\");\n                    }\n                    return IsReadableStreamLocked(this);\n                }\n                /**\n\t\t         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n\t\t         *\n\t\t         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n\t\t         * method, which might or might not use it.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$1(\"cancel\"));\n                    }\n                    if (IsReadableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot cancel a stream that already has a reader\"));\n                    }\n                    return ReadableStreamCancel(this, reason);\n                }\n                getReader(rawOptions = undefined) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"getReader\");\n                    }\n                    const options = convertReaderOptions(rawOptions, \"First parameter\");\n                    if (options.mode === undefined) {\n                        return AcquireReadableStreamDefaultReader(this);\n                    }\n                    return AcquireReadableStreamBYOBReader(this);\n                }\n                pipeThrough(rawTransform, rawOptions = {}) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"pipeThrough\");\n                    }\n                    assertRequiredArgument(rawTransform, 1, \"pipeThrough\");\n                    const transform = convertReadableWritablePair(rawTransform, \"First parameter\");\n                    const options = convertPipeOptions(rawOptions, \"Second parameter\");\n                    if (IsReadableStreamLocked(this)) {\n                        throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n                    }\n                    if (IsWritableStreamLocked(transform.writable)) {\n                        throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n                    }\n                    const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n                    setPromiseIsHandledToTrue(promise);\n                    return transform.readable;\n                }\n                pipeTo(destination, rawOptions = {}) {\n                    if (!IsReadableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$1(\"pipeTo\"));\n                    }\n                    if (destination === undefined) {\n                        return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n                    }\n                    if (!IsWritableStream(destination)) {\n                        return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n                    }\n                    let options;\n                    try {\n                        options = convertPipeOptions(rawOptions, \"Second parameter\");\n                    } catch (e) {\n                        return promiseRejectedWith(e);\n                    }\n                    if (IsReadableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\"));\n                    }\n                    if (IsWritableStreamLocked(destination)) {\n                        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\"));\n                    }\n                    return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n                }\n                /**\n\t\t         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n\t\t         * new {@link ReadableStream} instances.\n\t\t         *\n\t\t         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n\t\t         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n\t\t         * propagated to the stream's underlying source.\n\t\t         *\n\t\t         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n\t\t         * this could allow interference between the two branches.\n\t\t         */ tee() {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"tee\");\n                    }\n                    const branches = ReadableStreamTee(this);\n                    return CreateArrayFromList(branches);\n                }\n                values(rawOptions = undefined) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"values\");\n                    }\n                    const options = convertIteratorOptions(rawOptions, \"First parameter\");\n                    return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n                }\n            }\n            Object.defineProperties(ReadableStream1.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                getReader: {\n                    enumerable: true\n                },\n                pipeThrough: {\n                    enumerable: true\n                },\n                pipeTo: {\n                    enumerable: true\n                },\n                tee: {\n                    enumerable: true\n                },\n                values: {\n                    enumerable: true\n                },\n                locked: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStream1.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStream\",\n                    configurable: true\n                });\n            }\n            if (typeof SymbolPolyfill.asyncIterator === \"symbol\") {\n                Object.defineProperty(ReadableStream1.prototype, SymbolPolyfill.asyncIterator, {\n                    value: ReadableStream1.prototype.values,\n                    writable: true,\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableStream.\n            // Throws if and only if startAlgorithm throws.\n            function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = ()=>1) {\n                const stream = Object.create(ReadableStream1.prototype);\n                InitializeReadableStream(stream);\n                const controller = Object.create(ReadableStreamDefaultController.prototype);\n                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n                return stream;\n            }\n            // Throws if and only if startAlgorithm throws.\n            function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n                const stream = Object.create(ReadableStream1.prototype);\n                InitializeReadableStream(stream);\n                const controller = Object.create(ReadableByteStreamController.prototype);\n                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n                return stream;\n            }\n            function InitializeReadableStream(stream) {\n                stream._state = \"readable\";\n                stream._reader = undefined;\n                stream._storedError = undefined;\n                stream._disturbed = false;\n            }\n            function IsReadableStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readableStreamController\")) {\n                    return false;\n                }\n                return x instanceof ReadableStream1;\n            }\n            function IsReadableStreamLocked(stream) {\n                if (stream._reader === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamCancel(stream, reason) {\n                stream._disturbed = true;\n                if (stream._state === \"closed\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (stream._state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                ReadableStreamClose(stream);\n                const reader = stream._reader;\n                if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n                    reader._readIntoRequests.forEach((readIntoRequest)=>{\n                        readIntoRequest._closeSteps(undefined);\n                    });\n                    reader._readIntoRequests = new SimpleQueue();\n                }\n                const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n                return transformPromiseWith(sourceCancelPromise, noop);\n            }\n            function ReadableStreamClose(stream) {\n                stream._state = \"closed\";\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return;\n                }\n                defaultReaderClosedPromiseResolve(reader);\n                if (IsReadableStreamDefaultReader(reader)) {\n                    reader._readRequests.forEach((readRequest)=>{\n                        readRequest._closeSteps();\n                    });\n                    reader._readRequests = new SimpleQueue();\n                }\n            }\n            function ReadableStreamError(stream, e) {\n                stream._state = \"errored\";\n                stream._storedError = e;\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return;\n                }\n                defaultReaderClosedPromiseReject(reader, e);\n                if (IsReadableStreamDefaultReader(reader)) {\n                    reader._readRequests.forEach((readRequest)=>{\n                        readRequest._errorSteps(e);\n                    });\n                    reader._readRequests = new SimpleQueue();\n                } else {\n                    reader._readIntoRequests.forEach((readIntoRequest)=>{\n                        readIntoRequest._errorSteps(e);\n                    });\n                    reader._readIntoRequests = new SimpleQueue();\n                }\n            }\n            // Helper functions for the ReadableStream.\n            function streamBrandCheckException$1(name) {\n                return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n            }\n            function convertQueuingStrategyInit(init, context) {\n                assertDictionary(init, context);\n                const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n                assertRequiredField(highWaterMark, \"highWaterMark\", \"QueuingStrategyInit\");\n                return {\n                    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n                };\n            }\n            // The size function must not have a prototype property nor be a constructor\n            const byteLengthSizeFunction = (chunk)=>{\n                return chunk.byteLength;\n            };\n            try {\n                Object.defineProperty(byteLengthSizeFunction, \"name\", {\n                    value: \"size\",\n                    configurable: true\n                });\n            } catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n            }\n            /**\n\t\t     * A queuing strategy that counts the number of bytes in each chunk.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ByteLengthQueuingStrategy {\n                constructor(options){\n                    assertRequiredArgument(options, 1, \"ByteLengthQueuingStrategy\");\n                    options = convertQueuingStrategyInit(options, \"First parameter\");\n                    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n                }\n                /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */ get highWaterMark() {\n                    if (!IsByteLengthQueuingStrategy(this)) {\n                        throw byteLengthBrandCheckException(\"highWaterMark\");\n                    }\n                    return this._byteLengthQueuingStrategyHighWaterMark;\n                }\n                /**\n\t\t         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n\t\t         */ get size() {\n                    if (!IsByteLengthQueuingStrategy(this)) {\n                        throw byteLengthBrandCheckException(\"size\");\n                    }\n                    return byteLengthSizeFunction;\n                }\n            }\n            Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n                highWaterMark: {\n                    enumerable: true\n                },\n                size: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ByteLengthQueuingStrategy\",\n                    configurable: true\n                });\n            }\n            // Helper functions for the ByteLengthQueuingStrategy.\n            function byteLengthBrandCheckException(name) {\n                return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n            }\n            function IsByteLengthQueuingStrategy(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_byteLengthQueuingStrategyHighWaterMark\")) {\n                    return false;\n                }\n                return x instanceof ByteLengthQueuingStrategy;\n            }\n            // The size function must not have a prototype property nor be a constructor\n            const countSizeFunction = ()=>{\n                return 1;\n            };\n            try {\n                Object.defineProperty(countSizeFunction, \"name\", {\n                    value: \"size\",\n                    configurable: true\n                });\n            } catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n            }\n            /**\n\t\t     * A queuing strategy that counts the number of chunks.\n\t\t     *\n\t\t     * @public\n\t\t     */ class CountQueuingStrategy {\n                constructor(options){\n                    assertRequiredArgument(options, 1, \"CountQueuingStrategy\");\n                    options = convertQueuingStrategyInit(options, \"First parameter\");\n                    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n                }\n                /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */ get highWaterMark() {\n                    if (!IsCountQueuingStrategy(this)) {\n                        throw countBrandCheckException(\"highWaterMark\");\n                    }\n                    return this._countQueuingStrategyHighWaterMark;\n                }\n                /**\n\t\t         * Measures the size of `chunk` by always returning 1.\n\t\t         * This ensures that the total queue size is a count of the number of chunks in the queue.\n\t\t         */ get size() {\n                    if (!IsCountQueuingStrategy(this)) {\n                        throw countBrandCheckException(\"size\");\n                    }\n                    return countSizeFunction;\n                }\n            }\n            Object.defineProperties(CountQueuingStrategy.prototype, {\n                highWaterMark: {\n                    enumerable: true\n                },\n                size: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"CountQueuingStrategy\",\n                    configurable: true\n                });\n            }\n            // Helper functions for the CountQueuingStrategy.\n            function countBrandCheckException(name) {\n                return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n            }\n            function IsCountQueuingStrategy(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_countQueuingStrategyHighWaterMark\")) {\n                    return false;\n                }\n                return x instanceof CountQueuingStrategy;\n            }\n            function convertTransformer(original, context) {\n                assertDictionary(original, context);\n                const flush = original === null || original === void 0 ? void 0 : original.flush;\n                const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const transform = original === null || original === void 0 ? void 0 : original.transform;\n                const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n                return {\n                    flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n                    readableType,\n                    start: start === undefined ? undefined : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n                    transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n                    writableType\n                };\n            }\n            function convertTransformerFlushCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>promiseCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertTransformerStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertTransformerTransformCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (chunk, controller)=>promiseCall(fn, original, [\n                        chunk,\n                        controller\n                    ]);\n            }\n            // Class TransformStream\n            /**\n\t\t     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n\t\t     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n\t\t     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n\t\t     * made available for reading from the readable side.\n\t\t     *\n\t\t     * @public\n\t\t     */ class TransformStream {\n                constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}){\n                    if (rawTransformer === undefined) {\n                        rawTransformer = null;\n                    }\n                    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, \"Second parameter\");\n                    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, \"Third parameter\");\n                    const transformer = convertTransformer(rawTransformer, \"First parameter\");\n                    if (transformer.readableType !== undefined) {\n                        throw new RangeError(\"Invalid readableType specified\");\n                    }\n                    if (transformer.writableType !== undefined) {\n                        throw new RangeError(\"Invalid writableType specified\");\n                    }\n                    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n                    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n                    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n                    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n                    let startPromise_resolve;\n                    const startPromise = newPromise((resolve)=>{\n                        startPromise_resolve = resolve;\n                    });\n                    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n                    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n                    if (transformer.start !== undefined) {\n                        startPromise_resolve(transformer.start(this._transformStreamController));\n                    } else {\n                        startPromise_resolve(undefined);\n                    }\n                }\n                /**\n\t\t         * The readable side of the transform stream.\n\t\t         */ get readable() {\n                    if (!IsTransformStream(this)) {\n                        throw streamBrandCheckException(\"readable\");\n                    }\n                    return this._readable;\n                }\n                /**\n\t\t         * The writable side of the transform stream.\n\t\t         */ get writable() {\n                    if (!IsTransformStream(this)) {\n                        throw streamBrandCheckException(\"writable\");\n                    }\n                    return this._writable;\n                }\n            }\n            Object.defineProperties(TransformStream.prototype, {\n                readable: {\n                    enumerable: true\n                },\n                writable: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"TransformStream\",\n                    configurable: true\n                });\n            }\n            function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n                function startAlgorithm() {\n                    return startPromise;\n                }\n                function writeAlgorithm(chunk) {\n                    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n                }\n                function abortAlgorithm(reason) {\n                    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n                }\n                function closeAlgorithm() {\n                    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n                }\n                stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n                function pullAlgorithm() {\n                    return TransformStreamDefaultSourcePullAlgorithm(stream);\n                }\n                function cancelAlgorithm(reason) {\n                    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n                    return promiseResolvedWith(undefined);\n                }\n                stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n                // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n                stream._backpressure = undefined;\n                stream._backpressureChangePromise = undefined;\n                stream._backpressureChangePromise_resolve = undefined;\n                TransformStreamSetBackpressure(stream, true);\n                stream._transformStreamController = undefined;\n            }\n            function IsTransformStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_transformStreamController\")) {\n                    return false;\n                }\n                return x instanceof TransformStream;\n            }\n            // This is a no-op if both sides are already errored.\n            function TransformStreamError(stream, e) {\n                ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n                TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            }\n            function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n                TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n                WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n                if (stream._backpressure) {\n                    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n                    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n                    // _backpressure is set.\n                    TransformStreamSetBackpressure(stream, false);\n                }\n            }\n            function TransformStreamSetBackpressure(stream, backpressure) {\n                // Passes also when called during construction.\n                if (stream._backpressureChangePromise !== undefined) {\n                    stream._backpressureChangePromise_resolve();\n                }\n                stream._backpressureChangePromise = newPromise((resolve)=>{\n                    stream._backpressureChangePromise_resolve = resolve;\n                });\n                stream._backpressure = backpressure;\n            }\n            // Class TransformStreamDefaultController\n            /**\n\t\t     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class TransformStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n\t\t         */ get desiredSize() {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"desiredSize\");\n                    }\n                    const readableController = this._controlledTransformStream._readable._readableStreamController;\n                    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n                }\n                enqueue(chunk = undefined) {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"enqueue\");\n                    }\n                    TransformStreamDefaultControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n\t\t         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n\t\t         */ error(reason = undefined) {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"error\");\n                    }\n                    TransformStreamDefaultControllerError(this, reason);\n                }\n                /**\n\t\t         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n\t\t         * transformer only needs to consume a portion of the chunks written to the writable side.\n\t\t         */ terminate() {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"terminate\");\n                    }\n                    TransformStreamDefaultControllerTerminate(this);\n                }\n            }\n            Object.defineProperties(TransformStreamDefaultController.prototype, {\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                terminate: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"TransformStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Transform Stream Default Controller Abstract Operations\n            function IsTransformStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledTransformStream\")) {\n                    return false;\n                }\n                return x instanceof TransformStreamDefaultController;\n            }\n            function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n                controller._controlledTransformStream = stream;\n                stream._transformStreamController = controller;\n                controller._transformAlgorithm = transformAlgorithm;\n                controller._flushAlgorithm = flushAlgorithm;\n            }\n            function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n                const controller = Object.create(TransformStreamDefaultController.prototype);\n                let transformAlgorithm = (chunk)=>{\n                    try {\n                        TransformStreamDefaultControllerEnqueue(controller, chunk);\n                        return promiseResolvedWith(undefined);\n                    } catch (transformResultE) {\n                        return promiseRejectedWith(transformResultE);\n                    }\n                };\n                let flushAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (transformer.transform !== undefined) {\n                    transformAlgorithm = (chunk)=>transformer.transform(chunk, controller);\n                }\n                if (transformer.flush !== undefined) {\n                    flushAlgorithm = ()=>transformer.flush(controller);\n                }\n                SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n            }\n            function TransformStreamDefaultControllerClearAlgorithms(controller) {\n                controller._transformAlgorithm = undefined;\n                controller._flushAlgorithm = undefined;\n            }\n            function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n                const stream = controller._controlledTransformStream;\n                const readableController = stream._readable._readableStreamController;\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n                    throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n                }\n                // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n                // accept TransformStreamDefaultControllerEnqueue() calls.\n                try {\n                    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n                } catch (e) {\n                    // This happens when readableStrategy.size() throws.\n                    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n                    throw stream._readable._storedError;\n                }\n                const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n                if (backpressure !== stream._backpressure) {\n                    TransformStreamSetBackpressure(stream, true);\n                }\n            }\n            function TransformStreamDefaultControllerError(controller, e) {\n                TransformStreamError(controller._controlledTransformStream, e);\n            }\n            function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n                const transformPromise = controller._transformAlgorithm(chunk);\n                return transformPromiseWith(transformPromise, undefined, (r)=>{\n                    TransformStreamError(controller._controlledTransformStream, r);\n                    throw r;\n                });\n            }\n            function TransformStreamDefaultControllerTerminate(controller) {\n                const stream = controller._controlledTransformStream;\n                const readableController = stream._readable._readableStreamController;\n                ReadableStreamDefaultControllerClose(readableController);\n                const error = new TypeError(\"TransformStream terminated\");\n                TransformStreamErrorWritableAndUnblockWrite(stream, error);\n            }\n            // TransformStreamDefaultSink Algorithms\n            function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n                const controller = stream._transformStreamController;\n                if (stream._backpressure) {\n                    const backpressureChangePromise = stream._backpressureChangePromise;\n                    return transformPromiseWith(backpressureChangePromise, ()=>{\n                        const writable = stream._writable;\n                        const state = writable._state;\n                        if (state === \"erroring\") {\n                            throw writable._storedError;\n                        }\n                        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n                    });\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            }\n            function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n                // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n                // errored.\n                TransformStreamError(stream, reason);\n                return promiseResolvedWith(undefined);\n            }\n            function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n                // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n                const readable = stream._readable;\n                const controller = stream._transformStreamController;\n                const flushPromise = controller._flushAlgorithm();\n                TransformStreamDefaultControllerClearAlgorithms(controller);\n                // Return a promise that is fulfilled with undefined on success.\n                return transformPromiseWith(flushPromise, ()=>{\n                    if (readable._state === \"errored\") {\n                        throw readable._storedError;\n                    }\n                    ReadableStreamDefaultControllerClose(readable._readableStreamController);\n                }, (r)=>{\n                    TransformStreamError(stream, r);\n                    throw readable._storedError;\n                });\n            }\n            // TransformStreamDefaultSource Algorithms\n            function TransformStreamDefaultSourcePullAlgorithm(stream) {\n                // Invariant. Enforced by the promises returned by start() and pull().\n                TransformStreamSetBackpressure(stream, false);\n                // Prevent the next pull() call until there is backpressure.\n                return stream._backpressureChangePromise;\n            }\n            // Helper functions for the TransformStreamDefaultController.\n            function defaultControllerBrandCheckException(name) {\n                return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n            }\n            // Helper functions for the TransformStream.\n            function streamBrandCheckException(name) {\n                return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n            }\n            exports1.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n            exports1.CountQueuingStrategy = CountQueuingStrategy;\n            exports1.ReadableByteStreamController = ReadableByteStreamController;\n            exports1.ReadableStream = ReadableStream1;\n            exports1.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n            exports1.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n            exports1.ReadableStreamDefaultController = ReadableStreamDefaultController;\n            exports1.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n            exports1.TransformStream = TransformStream;\n            exports1.TransformStreamDefaultController = TransformStreamDefaultController;\n            exports1.WritableStream = WritableStream;\n            exports1.WritableStreamDefaultController = WritableStreamDefaultController;\n            exports1.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n        });\n    })(ponyfill_es2018, ponyfill_es2018.exports);\n    return ponyfill_es2018.exports;\n}\n/* c8 ignore start */ // 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE$1 = 65536;\nif (!globalThis.ReadableStream) {\n    // `node:stream/web` got introduced in v16.5.0 as experimental\n    // and it's preferred over the polyfilled version. So we also\n    // suppress the warning that gets emitted by NodeJS for using it.\n    try {\n        const process1 = __webpack_require__(/*! node:process */ \"node:process\");\n        const { emitWarning } = process1;\n        try {\n            process1.emitWarning = ()=>{};\n            Object.assign(globalThis, __webpack_require__(/*! node:stream/web */ \"node:stream/web\"));\n            process1.emitWarning = emitWarning;\n        } catch (error) {\n            process1.emitWarning = emitWarning;\n            throw error;\n        }\n    } catch (error) {\n        // fallback to polyfill implementation\n        Object.assign(globalThis, requirePonyfill_es2018());\n    }\n}\ntry {\n    // Don't use node: prefix for this, require+node: is not supported until node v14.14\n    // Only `import()` can use prefix in 12.20 and later\n    const { Blob } = __webpack_require__(/*! buffer */ \"buffer\");\n    if (Blob && !Blob.prototype.stream) {\n        Blob.prototype.stream = function name(params) {\n            let position = 0;\n            const blob = this;\n            return new ReadableStream({\n                type: \"bytes\",\n                async pull (ctrl) {\n                    const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));\n                    const buffer = await chunk.arrayBuffer();\n                    position += buffer.byteLength;\n                    ctrl.enqueue(new Uint8Array(buffer));\n                    if (position === blob.size) {\n                        ctrl.close();\n                    }\n                }\n            });\n        };\n    }\n} catch (error) {}\n/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ // 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536;\n/** @param {(Blob | Uint8Array)[]} parts */ async function* toIterator(parts, clone = true) {\n    for (const part of parts){\n        if (\"stream\" in part) {\n            yield* /** @type {AsyncIterableIterator<Uint8Array>} */ part.stream();\n        } else if (ArrayBuffer.isView(part)) {\n            if (clone) {\n                let position = part.byteOffset;\n                const end = part.byteOffset + part.byteLength;\n                while(position !== end){\n                    const size = Math.min(end - position, POOL_SIZE);\n                    const chunk = part.buffer.slice(position, position + size);\n                    position += chunk.byteLength;\n                    yield new Uint8Array(chunk);\n                }\n            } else {\n                yield part;\n            }\n        /* c8 ignore next 10 */ } else {\n            // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n            let position = 0, b = /** @type {Blob} */ part;\n            while(position !== b.size){\n                const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n                const buffer = await chunk.arrayBuffer();\n                position += buffer.byteLength;\n                yield new Uint8Array(buffer);\n            }\n        }\n    }\n}\nconst _Blob = class Blob {\n    /** @type {Array.<(Blob|Uint8Array)>} */ #parts;\n    #type;\n    #size;\n    #endings;\n    /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */ constructor(blobParts = [], options = {}){\n        this.#parts = [];\n        this.#type = \"\";\n        this.#size = 0;\n        this.#endings = \"transparent\";\n        if (typeof blobParts !== \"object\" || blobParts === null) {\n            throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");\n        }\n        if (typeof blobParts[Symbol.iterator] !== \"function\") {\n            throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");\n        }\n        if (typeof options !== \"object\" && typeof options !== \"function\") {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n        }\n        if (options === null) options = {};\n        const encoder = new TextEncoder();\n        for (const element of blobParts){\n            let part;\n            if (ArrayBuffer.isView(element)) {\n                part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n            } else if (element instanceof ArrayBuffer) {\n                part = new Uint8Array(element.slice(0));\n            } else if (element instanceof Blob) {\n                part = element;\n            } else {\n                part = encoder.encode(`${element}`);\n            }\n            const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n            // Avoid pushing empty parts into the array to better GC them\n            if (size) {\n                this.#size += size;\n                this.#parts.push(part);\n            }\n        }\n        this.#endings = `${options.endings === undefined ? \"transparent\" : options.endings}`;\n        const type = options.type === undefined ? \"\" : String(options.type);\n        this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : \"\";\n    }\n    /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */ get size() {\n        return this.#size;\n    }\n    /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */ get type() {\n        return this.#type;\n    }\n    /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */ async text() {\n        // More optimized than using this.arrayBuffer()\n        // that requires twice as much ram\n        const decoder = new TextDecoder();\n        let str = \"\";\n        for await (const part of toIterator(this.#parts, false)){\n            str += decoder.decode(part, {\n                stream: true\n            });\n        }\n        // Remaining\n        str += decoder.decode();\n        return str;\n    }\n    /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */ async arrayBuffer() {\n        // Easier way... Just a unnecessary overhead\n        // const view = new Uint8Array(this.size);\n        // await this.stream().getReader({mode: 'byob'}).read(view);\n        // return view.buffer;\n        const data = new Uint8Array(this.size);\n        let offset = 0;\n        for await (const chunk of toIterator(this.#parts, false)){\n            data.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return data.buffer;\n    }\n    stream() {\n        const it = toIterator(this.#parts, true);\n        return new globalThis.ReadableStream({\n            // @ts-ignore\n            type: \"bytes\",\n            async pull (ctrl) {\n                const chunk = await it.next();\n                chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n            },\n            async cancel () {\n                await it.return();\n            }\n        });\n    }\n    /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */ slice(start = 0, end = this.size, type = \"\") {\n        const { size } = this;\n        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n        const span = Math.max(relativeEnd - relativeStart, 0);\n        const parts = this.#parts;\n        const blobParts = [];\n        let added = 0;\n        for (const part of parts){\n            // don't add the overflow to new blobParts\n            if (added >= span) {\n                break;\n            }\n            const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n            if (relativeStart && size <= relativeStart) {\n                // Skip the beginning and change the relative\n                // start & end position as we skip the unwanted parts\n                relativeStart -= size;\n                relativeEnd -= size;\n            } else {\n                let chunk;\n                if (ArrayBuffer.isView(part)) {\n                    chunk = part.subarray(relativeStart, Math.min(size, relativeEnd));\n                    added += chunk.byteLength;\n                } else {\n                    chunk = part.slice(relativeStart, Math.min(size, relativeEnd));\n                    added += chunk.size;\n                }\n                relativeEnd -= size;\n                blobParts.push(chunk);\n                relativeStart = 0; // All next sequential parts should start at 0\n            }\n        }\n        const blob = new Blob([], {\n            type: String(type).toLowerCase()\n        });\n        blob.#size = span;\n        blob.#parts = blobParts;\n        return blob;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n    static [Symbol.hasInstance](object) {\n        return object && typeof object === \"object\" && typeof object.constructor === \"function\" && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n    }\n};\nObject.defineProperties(_Blob.prototype, {\n    size: {\n        enumerable: true\n    },\n    type: {\n        enumerable: true\n    },\n    slice: {\n        enumerable: true\n    }\n});\n/** @type {typeof globalThis.Blob} */ const Blob = _Blob;\nconst _Blob$1 = Blob;\nconst _File = class File extends _Blob$1 {\n    #lastModified;\n    #name;\n    /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */ // @ts-ignore\n    constructor(fileBits, fileName, options = {}){\n        if (arguments.length < 2) {\n            throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n        }\n        super(fileBits, options);\n        this.#lastModified = 0;\n        this.#name = \"\";\n        if (options === null) options = {};\n        // Simulate WebIDL type casting for NaN value in lastModified option.\n        const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n        if (!Number.isNaN(lastModified)) {\n            this.#lastModified = lastModified;\n        }\n        this.#name = String(fileName);\n    }\n    get name() {\n        return this.#name;\n    }\n    get lastModified() {\n        return this.#lastModified;\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n    static [Symbol.hasInstance](object) {\n        return !!object && object instanceof _Blob$1 && /^(File)$/.test(object[Symbol.toStringTag]);\n    }\n};\n/** @type {typeof globalThis.File} */ // @ts-ignore\nconst File = _File;\nconst File$1 = File;\n/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ var { toStringTag: t, iterator: i, hasInstance: h } = Symbol, r = Math.random, m = \"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"), f = (a, b, c)=>(a += \"\", /^(Blob|File)$/.test(b && b[t]) ? [\n        (c = c !== void 0 ? c + \"\" : b[t] == \"File\" ? b.name : \"blob\", a),\n        b.name !== c || b[t] == \"blob\" ? new File$1([\n            b\n        ], c, b) : b\n    ] : [\n        a,\n        b + \"\"\n    ]), e = (c, f)=>(f ? c : c.replace(/\\r?\\n|\\r/g, \"\\r\\n\")).replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\"), x = (n, a, e)=>{\n    if (a.length < e) {\n        throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`);\n    }\n};\n/** @type {typeof globalThis.FormData} */ const FormData = class FormData {\n    #d;\n    constructor(...a){\n        this.#d = [];\n        if (a.length) throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);\n    }\n    get [t]() {\n        return \"FormData\";\n    }\n    [i]() {\n        return this.entries();\n    }\n    static [h](o) {\n        return o && typeof o === \"object\" && o[t] === \"FormData\" && !m.some((m)=>typeof o[m] != \"function\");\n    }\n    append(...a) {\n        x(\"append\", arguments, 2);\n        this.#d.push(f(...a));\n    }\n    delete(a) {\n        x(\"delete\", arguments, 1);\n        a += \"\";\n        this.#d = this.#d.filter(([b])=>b !== a);\n    }\n    get(a) {\n        x(\"get\", arguments, 1);\n        a += \"\";\n        for(var b = this.#d, l = b.length, c = 0; c < l; c++)if (b[c][0] === a) return b[c][1];\n        return null;\n    }\n    getAll(a, b) {\n        x(\"getAll\", arguments, 1);\n        b = [];\n        a += \"\";\n        this.#d.forEach((c)=>c[0] === a && b.push(c[1]));\n        return b;\n    }\n    has(a) {\n        x(\"has\", arguments, 1);\n        a += \"\";\n        return this.#d.some((b)=>b[0] === a);\n    }\n    forEach(a, b) {\n        x(\"forEach\", arguments, 1);\n        for (var [c, d] of this)a.call(b, d, c, this);\n    }\n    set(...a) {\n        x(\"set\", arguments, 2);\n        var b = [], c = !0;\n        a = f(...a);\n        this.#d.forEach((d)=>{\n            d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);\n        });\n        c && b.push(a);\n        this.#d = b;\n    }\n    *entries() {\n        yield* this.#d;\n    }\n    *keys() {\n        for (var [a] of this)yield a;\n    }\n    *values() {\n        for (var [, a] of this)yield a;\n    }\n};\n/** @param {FormData} F */ function formDataToBlob(F, B = _Blob$1) {\n    var b = `${r()}${r()}`.replace(/\\./g, \"\").slice(-28).padStart(32, \"-\"), c = [], p = `--${b}\\r\\nContent-Disposition: form-data; name=\"`;\n    F.forEach((v, n)=>typeof v == \"string\" ? c.push(p + e(n) + `\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, \"\\r\\n\")}\\r\\n`) : c.push(p + e(n) + `\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type || \"application/octet-stream\"}\\r\\n\\r\\n`, v, \"\\r\\n\"));\n    c.push(`--${b}--`);\n    return new B(c, {\n        type: \"multipart/form-data; boundary=\" + b\n    });\n}\nclass FetchBaseError extends Error {\n    constructor(message, type){\n        super(message);\n        // Hide custom error implementation details from end-users\n        Error.captureStackTrace(this, this.constructor);\n        this.type = type;\n    }\n    get name() {\n        return this.constructor.name;\n    }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n}\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/ /**\n * FetchError interface for operational errors\n */ class FetchError extends FetchBaseError {\n    /**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */ constructor(message, type, systemError){\n        super(message, type);\n        // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n        if (systemError) {\n            // eslint-disable-next-line no-multi-assign\n            this.code = this.errno = systemError.code;\n            this.erroredSysCall = systemError.syscall;\n        }\n    }\n}\n/**\n * Is.js\n *\n * Object type checks.\n */ const NAME = Symbol.toStringTag;\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isURLSearchParameters = (object)=>{\n    return typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && typeof object.sort === \"function\" && object[NAME] === \"URLSearchParams\";\n};\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isBlob = (object)=>{\n    return object && typeof object === \"object\" && typeof object.arrayBuffer === \"function\" && typeof object.type === \"string\" && typeof object.stream === \"function\" && typeof object.constructor === \"function\" && /^(Blob|File)$/.test(object[NAME]);\n};\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isAbortSignal = (object)=>{\n    return typeof object === \"object\" && (object[NAME] === \"AbortSignal\" || object[NAME] === \"EventTarget\");\n};\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isDomainOrSubdomain = (destination, original)=>{\n    const orig = new URL(original).hostname;\n    const dest = new URL(destination).hostname;\n    return orig === dest || orig.endsWith(`.${dest}`);\n};\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isSameProtocol = (destination, original)=>{\n    const orig = new URL(original).protocol;\n    const dest = new URL(destination).protocol;\n    return orig === dest;\n};\nconst pipeline = node_util.promisify(Stream.pipeline);\nconst INTERNALS$2 = Symbol(\"Body internals\");\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Body {\n    constructor(body, { size = 0 } = {}){\n        let boundary = null;\n        if (body === null) {\n            // Body is undefined or null\n            body = null;\n        } else if (isURLSearchParameters(body)) {\n            // Body is a URLSearchParams\n            body = node_buffer.Buffer.from(body.toString());\n        } else if (isBlob(body)) ;\n        else if (node_buffer.Buffer.isBuffer(body)) ;\n        else if (node_util.types.isAnyArrayBuffer(body)) {\n            // Body is ArrayBuffer\n            body = node_buffer.Buffer.from(body);\n        } else if (ArrayBuffer.isView(body)) {\n            // Body is ArrayBufferView\n            body = node_buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n        } else if (body instanceof Stream) ;\n        else if (body instanceof FormData) {\n            // Body is FormData\n            body = formDataToBlob(body);\n            boundary = body.type.split(\"=\")[1];\n        } else {\n            // None of the above\n            // coerce to string then buffer\n            body = node_buffer.Buffer.from(String(body));\n        }\n        let stream = body;\n        if (node_buffer.Buffer.isBuffer(body)) {\n            stream = Stream.Readable.from(body);\n        } else if (isBlob(body)) {\n            stream = Stream.Readable.from(body.stream());\n        }\n        this[INTERNALS$2] = {\n            body,\n            stream,\n            boundary,\n            disturbed: false,\n            error: null\n        };\n        this.size = size;\n        if (body instanceof Stream) {\n            body.on(\"error\", (error_)=>{\n                const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, \"system\", error_);\n                this[INTERNALS$2].error = error;\n            });\n        }\n    }\n    get body() {\n        return this[INTERNALS$2].stream;\n    }\n    get bodyUsed() {\n        return this[INTERNALS$2].disturbed;\n    }\n    /**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */ async arrayBuffer() {\n        const { buffer, byteOffset, byteLength } = await consumeBody(this);\n        return buffer.slice(byteOffset, byteOffset + byteLength);\n    }\n    async formData() {\n        const ct = this.headers.get(\"content-type\");\n        if (ct.startsWith(\"application/x-www-form-urlencoded\")) {\n            const formData = new FormData();\n            const parameters = new URLSearchParams(await this.text());\n            for (const [name, value1] of parameters){\n                formData.append(name, value1);\n            }\n            return formData;\n        }\n        const { toFormData } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../chunks/multipart-parser.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\", 19));\n        return toFormData(this.body, ct);\n    }\n    /**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */ async blob() {\n        const ct = this.headers && this.headers.get(\"content-type\") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || \"\";\n        const buf = await this.arrayBuffer();\n        return new _Blob$1([\n            buf\n        ], {\n            type: ct\n        });\n    }\n    /**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */ async json() {\n        const text = await this.text();\n        return JSON.parse(text);\n    }\n    /**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */ async text() {\n        const buffer = await consumeBody(this);\n        return new TextDecoder().decode(buffer);\n    }\n    /**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */ buffer() {\n        return consumeBody(this);\n    }\n}\nBody.prototype.buffer = node_util.deprecate(Body.prototype.buffer, \"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\", \"node-fetch#buffer\");\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n    body: {\n        enumerable: true\n    },\n    bodyUsed: {\n        enumerable: true\n    },\n    arrayBuffer: {\n        enumerable: true\n    },\n    blob: {\n        enumerable: true\n    },\n    json: {\n        enumerable: true\n    },\n    text: {\n        enumerable: true\n    },\n    data: {\n        get: node_util.deprecate(()=>{}, \"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")\n    }\n});\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */ async function consumeBody(data) {\n    if (data[INTERNALS$2].disturbed) {\n        throw new TypeError(`body used already for: ${data.url}`);\n    }\n    data[INTERNALS$2].disturbed = true;\n    if (data[INTERNALS$2].error) {\n        throw data[INTERNALS$2].error;\n    }\n    const { body } = data;\n    // Body is null\n    if (body === null) {\n        return node_buffer.Buffer.alloc(0);\n    }\n    /* c8 ignore next 3 */ if (!(body instanceof Stream)) {\n        return node_buffer.Buffer.alloc(0);\n    }\n    // Body is stream\n    // get ready to actually consume the body\n    const accum = [];\n    let accumBytes = 0;\n    try {\n        for await (const chunk of body){\n            if (data.size > 0 && accumBytes + chunk.length > data.size) {\n                const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, \"max-size\");\n                body.destroy(error);\n                throw error;\n            }\n            accumBytes += chunk.length;\n            accum.push(chunk);\n        }\n    } catch (error) {\n        const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, \"system\", error);\n        throw error_;\n    }\n    if (body.readableEnded === true || body._readableState.ended === true) {\n        try {\n            if (accum.every((c)=>typeof c === \"string\")) {\n                return node_buffer.Buffer.from(accum.join(\"\"));\n            }\n            return node_buffer.Buffer.concat(accum, accumBytes);\n        } catch (error) {\n            throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, \"system\", error);\n        }\n    } else {\n        throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n    }\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */ const clone = (instance, highWaterMark)=>{\n    let p1;\n    let p2;\n    let { body } = instance[INTERNALS$2];\n    // Don't allow cloning a used body\n    if (instance.bodyUsed) {\n        throw new Error(\"cannot clone body after it is used\");\n    }\n    // Check that body is a stream and not form-data object\n    // note: we can't clone the form-data object without having it as a dependency\n    if (body instanceof Stream && typeof body.getBoundary !== \"function\") {\n        // Tee instance body\n        p1 = new Stream.PassThrough({\n            highWaterMark\n        });\n        p2 = new Stream.PassThrough({\n            highWaterMark\n        });\n        body.pipe(p1);\n        body.pipe(p2);\n        // Set instance body to teed body and return the other teed body\n        instance[INTERNALS$2].stream = p1;\n        body = p2;\n    }\n    return body;\n};\nconst getNonSpecFormDataBoundary = node_util.deprecate((body)=>body.getBoundary(), \"form-data doesn't follow the spec and requires special treatment. Use alternative package\", \"https://github.com/node-fetch/node-fetch/issues/1167\");\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */ const extractContentType = (body, request)=>{\n    // Body is null or undefined\n    if (body === null) {\n        return null;\n    }\n    // Body is string\n    if (typeof body === \"string\") {\n        return \"text/plain;charset=UTF-8\";\n    }\n    // Body is a URLSearchParams\n    if (isURLSearchParameters(body)) {\n        return \"application/x-www-form-urlencoded;charset=UTF-8\";\n    }\n    // Body is blob\n    if (isBlob(body)) {\n        return body.type || null;\n    }\n    // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n    if (node_buffer.Buffer.isBuffer(body) || node_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n        return null;\n    }\n    if (body instanceof FormData) {\n        return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getBoundary === \"function\") {\n        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n    }\n    // Body is stream - can't really do much about this\n    if (body instanceof Stream) {\n        return null;\n    }\n    // Body constructor defaults other things to string\n    return \"text/plain;charset=UTF-8\";\n};\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */ const getTotalBytes = (request)=>{\n    const { body } = request[INTERNALS$2];\n    // Body is null or undefined\n    if (body === null) {\n        return 0;\n    }\n    // Body is Blob\n    if (isBlob(body)) {\n        return body.size;\n    }\n    // Body is Buffer\n    if (node_buffer.Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getLengthSync === \"function\") {\n        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n    }\n    // Body is stream\n    return null;\n};\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */ const writeToStream = async (dest, { body })=>{\n    if (body === null) {\n        // Body is null\n        dest.end();\n    } else {\n        // Body is stream\n        await pipeline(body, dest);\n    }\n};\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */ /* c8 ignore next 9 */ const validateHeaderName = typeof http.validateHeaderName === \"function\" ? http.validateHeaderName : (name)=>{\n    if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n        const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_HTTP_TOKEN\"\n        });\n        throw error;\n    }\n};\n/* c8 ignore next 9 */ const validateHeaderValue = typeof http.validateHeaderValue === \"function\" ? http.validateHeaderValue : (name, value1)=>{\n    if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value1)) {\n        const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_CHAR\"\n        });\n        throw error;\n    }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */ /**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */ class Headers extends URLSearchParams {\n    /**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */ constructor(init){\n        // Validate and normalize init object in [name, value(s)][]\n        /** @type {string[][]} */ let result = [];\n        if (init instanceof Headers) {\n            const raw = init.raw();\n            for (const [name, values] of Object.entries(raw)){\n                result.push(...values.map((value1)=>[\n                        name,\n                        value1\n                    ]));\n            }\n        } else if (init == null) ;\n        else if (typeof init === \"object\" && !node_util.types.isBoxedPrimitive(init)) {\n            const method = init[Symbol.iterator];\n            // eslint-disable-next-line no-eq-null, eqeqeq\n            if (method == null) {\n                // Record<ByteString, ByteString>\n                result.push(...Object.entries(init));\n            } else {\n                if (typeof method !== \"function\") {\n                    throw new TypeError(\"Header pairs must be iterable\");\n                }\n                // Sequence<sequence<ByteString>>\n                // Note: per spec we have to first exhaust the lists then process them\n                result = [\n                    ...init\n                ].map((pair)=>{\n                    if (typeof pair !== \"object\" || node_util.types.isBoxedPrimitive(pair)) {\n                        throw new TypeError(\"Each header pair must be an iterable object\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                }).map((pair)=>{\n                    if (pair.length !== 2) {\n                        throw new TypeError(\"Each header pair must be a name/value tuple\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                });\n            }\n        } else {\n            throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");\n        }\n        // Validate and lowercase\n        result = result.length > 0 ? result.map(([name, value1])=>{\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value1));\n            return [\n                String(name).toLowerCase(),\n                String(value1)\n            ];\n        }) : undefined;\n        super(result);\n        // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n        // eslint-disable-next-line no-constructor-return\n        return new Proxy(this, {\n            get (target, p, receiver) {\n                switch(p){\n                    case \"append\":\n                    case \"set\":\n                        return (name, value1)=>{\n                            validateHeaderName(name);\n                            validateHeaderValue(name, String(value1));\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value1));\n                        };\n                    case \"delete\":\n                    case \"has\":\n                    case \"getAll\":\n                        return (name)=>{\n                            validateHeaderName(name);\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n                        };\n                    case \"keys\":\n                        return ()=>{\n                            target.sort();\n                            return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n                        };\n                    default:\n                        return Reflect.get(target, p, receiver);\n                }\n            }\n        });\n    /* c8 ignore next */ }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Object.prototype.toString.call(this);\n    }\n    get(name) {\n        const values = this.getAll(name);\n        if (values.length === 0) {\n            return null;\n        }\n        let value1 = values.join(\", \");\n        if (/^content-encoding$/i.test(name)) {\n            value1 = value1.toLowerCase();\n        }\n        return value1;\n    }\n    forEach(callback, thisArg = undefined) {\n        for (const name of this.keys()){\n            Reflect.apply(callback, thisArg, [\n                this.get(name),\n                name,\n                this\n            ]);\n        }\n    }\n    *values() {\n        for (const name of this.keys()){\n            yield this.get(name);\n        }\n    }\n    /**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */ *entries() {\n        for (const name of this.keys()){\n            yield [\n                name,\n                this.get(name)\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */ raw() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            result[key] = this.getAll(key);\n            return result;\n        }, {});\n    }\n    /**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */ [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            const values = this.getAll(key);\n            // Http.request() only supports string as Host header.\n            // This hack makes specifying custom Host header possible.\n            if (key === \"host\") {\n                result[key] = values[0];\n            } else {\n                result[key] = values.length > 1 ? values : values[0];\n            }\n            return result;\n        }, {});\n    }\n}\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */ Object.defineProperties(Headers.prototype, [\n    \"get\",\n    \"entries\",\n    \"forEach\",\n    \"values\"\n].reduce((result, property)=>{\n    result[property] = {\n        enumerable: true\n    };\n    return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */ function fromRawHeaders(headers = []) {\n    return new Headers(headers// Split into pairs\n    .reduce((result, value1, index, array)=>{\n        if (index % 2 === 0) {\n            result.push(array.slice(index, index + 2));\n        }\n        return result;\n    }, []).filter(([name, value1])=>{\n        try {\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value1));\n            return true;\n        } catch  {\n            return false;\n        }\n    }));\n}\nconst redirectStatus = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */ const isRedirect = (code)=>{\n    return redirectStatus.has(code);\n};\n/**\n * Response.js\n *\n * Response class provides content decoding\n */ const INTERNALS$1 = Symbol(\"Response internals\");\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Response extends Body {\n    constructor(body = null, options = {}){\n        super(body, options);\n        // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n        const status = options.status != null ? options.status : 200;\n        const headers = new Headers(options.headers);\n        if (body !== null && !headers.has(\"Content-Type\")) {\n            const contentType = extractContentType(body, this);\n            if (contentType) {\n                headers.append(\"Content-Type\", contentType);\n            }\n        }\n        this[INTERNALS$1] = {\n            type: \"default\",\n            url: options.url,\n            status,\n            statusText: options.statusText || \"\",\n            headers,\n            counter: options.counter,\n            highWaterMark: options.highWaterMark\n        };\n    }\n    get type() {\n        return this[INTERNALS$1].type;\n    }\n    get url() {\n        return this[INTERNALS$1].url || \"\";\n    }\n    get status() {\n        return this[INTERNALS$1].status;\n    }\n    /**\n\t * Convenience property representing if the request ended normally\n\t */ get ok() {\n        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n    }\n    get redirected() {\n        return this[INTERNALS$1].counter > 0;\n    }\n    get statusText() {\n        return this[INTERNALS$1].statusText;\n    }\n    get headers() {\n        return this[INTERNALS$1].headers;\n    }\n    get highWaterMark() {\n        return this[INTERNALS$1].highWaterMark;\n    }\n    /**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */ clone() {\n        return new Response(clone(this, this.highWaterMark), {\n            type: this.type,\n            url: this.url,\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            ok: this.ok,\n            redirected: this.redirected,\n            size: this.size,\n            highWaterMark: this.highWaterMark\n        });\n    }\n    /**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */ static redirect(url, status = 302) {\n        if (!isRedirect(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        return new Response(null, {\n            headers: {\n                location: new URL(url).toString()\n            },\n            status\n        });\n    }\n    static error() {\n        const response = new Response(null, {\n            status: 0,\n            statusText: \"\"\n        });\n        response[INTERNALS$1].type = \"error\";\n        return response;\n    }\n    static json(data = undefined, init = {}) {\n        const body = JSON.stringify(data);\n        if (body === undefined) {\n            throw new TypeError(\"data is not JSON serializable\");\n        }\n        const headers = new Headers(init && init.headers);\n        if (!headers.has(\"content-type\")) {\n            headers.set(\"content-type\", \"application/json\");\n        }\n        return new Response(body, {\n            ...init,\n            headers\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Response\";\n    }\n}\nObject.defineProperties(Response.prototype, {\n    type: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    status: {\n        enumerable: true\n    },\n    ok: {\n        enumerable: true\n    },\n    redirected: {\n        enumerable: true\n    },\n    statusText: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    }\n});\nconst getSearch = (parsedURL)=>{\n    if (parsedURL.search) {\n        return parsedURL.search;\n    }\n    const lastOffset = parsedURL.href.length - 1;\n    const hash = parsedURL.hash || (parsedURL.href[lastOffset] === \"#\" ? \"#\" : \"\");\n    return parsedURL.href[lastOffset - hash.length] === \"?\" ? \"?\" : \"\";\n};\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */ /**\n * @module utils/referrer\n * @private\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */ function stripURLForUseAsAReferrer(url, originOnly = false) {\n    // 1. If url is null, return no referrer.\n    if (url == null) {\n        return \"no-referrer\";\n    }\n    url = new URL(url);\n    // 2. If url's scheme is a local scheme, then return no referrer.\n    if (/^(about|blob|data):$/.test(url.protocol)) {\n        return \"no-referrer\";\n    }\n    // 3. Set url's username to the empty string.\n    url.username = \"\";\n    // 4. Set url's password to null.\n    // Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n    url.password = \"\";\n    // 5. Set url's fragment to null.\n    // Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n    url.hash = \"\";\n    // 6. If the origin-only flag is true, then:\n    if (originOnly) {\n        // 6.1. Set url's path to null.\n        // Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n        url.pathname = \"\";\n        // 6.2. Set url's query to null.\n        // Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n        url.search = \"\";\n    }\n    // 7. Return url.\n    return url;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */ const ReferrerPolicy = new Set([\n    \"\",\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"same-origin\",\n    \"origin\",\n    \"strict-origin\",\n    \"origin-when-cross-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\"\n]);\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */ const DEFAULT_REFERRER_POLICY = \"strict-origin-when-cross-origin\";\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */ function validateReferrerPolicy(referrerPolicy) {\n    if (!ReferrerPolicy.has(referrerPolicy)) {\n        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n    }\n    return referrerPolicy;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isOriginPotentiallyTrustworthy(url) {\n    // 1. If origin is an opaque origin, return \"Not Trustworthy\".\n    // Not applicable\n    // 2. Assert: origin is a tuple origin.\n    // Not for implementations\n    // 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n    if (/^(http|ws)s:$/.test(url.protocol)) {\n        return true;\n    }\n    // 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n    const hostIp = url.host.replace(/(^\\[)|(]$)/g, \"\");\n    const hostIPVersion = node_net.isIP(hostIp);\n    if (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n        return true;\n    }\n    if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n        return true;\n    }\n    // 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n    // We are returning FALSE here because we cannot ensure conformance to\n    // let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n    if (url.host === \"localhost\" || url.host.endsWith(\".localhost\")) {\n        return false;\n    }\n    // 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n    if (url.protocol === \"file:\") {\n        return true;\n    }\n    // 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n    // Not supported\n    // 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n    // Not supported\n    // 9. Return \"Not Trustworthy\".\n    return false;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isUrlPotentiallyTrustworthy(url) {\n    // 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n    if (/^about:(blank|srcdoc)$/.test(url)) {\n        return true;\n    }\n    // 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n    if (url.protocol === \"data:\") {\n        return true;\n    }\n    // Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n    // created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n    // trustworthy.\n    if (/^(blob|filesystem):$/.test(url.protocol)) {\n        return true;\n    }\n    // 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n    return isOriginPotentiallyTrustworthy(url);\n}\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */ /**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */ function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {\n    // There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n    // these cases:\n    // > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n    // > Note: If request's referrer policy is the empty string, Fetch will not call into this\n    // > algorithm.\n    if (request.referrer === \"no-referrer\" || request.referrerPolicy === \"\") {\n        return null;\n    }\n    // 1. Let policy be request's associated referrer policy.\n    const policy = request.referrerPolicy;\n    // 2. Let environment be request's client.\n    // not applicable to node.js\n    // 3. Switch on request's referrer:\n    if (request.referrer === \"about:client\") {\n        return \"no-referrer\";\n    }\n    // \"a URL\": Let referrerSource be request's referrer.\n    const referrerSource = request.referrer;\n    // 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n    let referrerURL = stripURLForUseAsAReferrer(referrerSource);\n    // 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n    //    origin-only flag set to true.\n    let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n    // 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n    //    referrerURL to referrerOrigin.\n    if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n    }\n    // 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n    //    policy considerations in the interests of minimizing data leakage. For example, the user\n    //    agent could strip the URL down to an origin, modify its host, replace it with an empty\n    //    string, etc.\n    if (referrerURLCallback) {\n        referrerURL = referrerURLCallback(referrerURL);\n    }\n    if (referrerOriginCallback) {\n        referrerOrigin = referrerOriginCallback(referrerOrigin);\n    }\n    // 8.Execute the statements corresponding to the value of policy:\n    const currentURL = new URL(request.url);\n    switch(policy){\n        case \"no-referrer\":\n            return \"no-referrer\";\n        case \"origin\":\n            return referrerOrigin;\n        case \"unsafe-url\":\n            return referrerURL;\n        case \"strict-origin\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerOrigin.\n            return referrerOrigin.toString();\n        case \"strict-origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 3. Return referrerOrigin.\n            return referrerOrigin;\n        case \"same-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. Return no referrer.\n            return \"no-referrer\";\n        case \"origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // Return referrerOrigin.\n            return referrerOrigin;\n        case \"no-referrer-when-downgrade\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerURL.\n            return referrerURL;\n        default:\n            throw new TypeError(`Invalid referrerPolicy: ${policy}`);\n    }\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */ function parseReferrerPolicyFromHeader(headers) {\n    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n    //    and response’s header list.\n    const policyTokens = (headers.get(\"referrer-policy\") || \"\").split(/[,\\s]+/);\n    // 2. Let policy be the empty string.\n    let policy = \"\";\n    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n    //    string, then set policy to token.\n    // Note: This algorithm loops over multiple policy values to allow deployment of new policy\n    // values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n    for (const token of policyTokens){\n        if (token && ReferrerPolicy.has(token)) {\n            policy = token;\n        }\n    }\n    // 4. Return policy.\n    return policy;\n}\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const INTERNALS = Symbol(\"Request internals\");\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */ const isRequest = (object)=>{\n    return typeof object === \"object\" && typeof object[INTERNALS] === \"object\";\n};\nconst doBadDataWarn = node_util.deprecate(()=>{}, \".data is not a valid RequestInit property, use .body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */ class Request extends Body {\n    constructor(input, init = {}){\n        let parsedURL;\n        // Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n        if (isRequest(input)) {\n            parsedURL = new URL(input.url);\n        } else {\n            parsedURL = new URL(input);\n            input = {};\n        }\n        if (parsedURL.username !== \"\" || parsedURL.password !== \"\") {\n            throw new TypeError(`${parsedURL} is an url with embedded credentials.`);\n        }\n        let method = init.method || input.method || \"GET\";\n        if (/^(delete|get|head|options|post|put)$/i.test(method)) {\n            method = method.toUpperCase();\n        }\n        if (!isRequest(init) && \"data\" in init) {\n            doBadDataWarn();\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if ((init.body != null || isRequest(input) && input.body !== null) && (method === \"GET\" || method === \"HEAD\")) {\n            throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        }\n        const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n        super(inputBody, {\n            size: init.size || input.size || 0\n        });\n        const headers = new Headers(init.headers || input.headers || {});\n        if (inputBody !== null && !headers.has(\"Content-Type\")) {\n            const contentType = extractContentType(inputBody, this);\n            if (contentType) {\n                headers.set(\"Content-Type\", contentType);\n            }\n        }\n        let signal = isRequest(input) ? input.signal : null;\n        if (\"signal\" in init) {\n            signal = init.signal;\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (signal != null && !isAbortSignal(signal)) {\n            throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");\n        }\n        // §5.4, Request constructor steps, step 15.1\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        let referrer = init.referrer == null ? input.referrer : init.referrer;\n        if (referrer === \"\") {\n            // §5.4, Request constructor steps, step 15.2\n            referrer = \"no-referrer\";\n        } else if (referrer) {\n            // §5.4, Request constructor steps, step 15.3.1, 15.3.2\n            const parsedReferrer = new URL(referrer);\n            // §5.4, Request constructor steps, step 15.3.3, 15.3.4\n            referrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? \"client\" : parsedReferrer;\n        } else {\n            referrer = undefined;\n        }\n        this[INTERNALS] = {\n            method,\n            redirect: init.redirect || input.redirect || \"follow\",\n            headers,\n            parsedURL,\n            signal,\n            referrer\n        };\n        // Node-fetch-only options\n        this.follow = init.follow === undefined ? input.follow === undefined ? 20 : input.follow : init.follow;\n        this.compress = init.compress === undefined ? input.compress === undefined ? true : input.compress : init.compress;\n        this.counter = init.counter || input.counter || 0;\n        this.agent = init.agent || input.agent;\n        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n        this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n        // §5.4, Request constructor steps, step 16.\n        // Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || \"\";\n    }\n    /** @returns {string} */ get method() {\n        return this[INTERNALS].method;\n    }\n    /** @returns {string} */ get url() {\n        return node_url.format(this[INTERNALS].parsedURL);\n    }\n    /** @returns {Headers} */ get headers() {\n        return this[INTERNALS].headers;\n    }\n    get redirect() {\n        return this[INTERNALS].redirect;\n    }\n    /** @returns {AbortSignal} */ get signal() {\n        return this[INTERNALS].signal;\n    }\n    // https://fetch.spec.whatwg.org/#dom-request-referrer\n    get referrer() {\n        if (this[INTERNALS].referrer === \"no-referrer\") {\n            return \"\";\n        }\n        if (this[INTERNALS].referrer === \"client\") {\n            return \"about:client\";\n        }\n        if (this[INTERNALS].referrer) {\n            return this[INTERNALS].referrer.toString();\n        }\n        return undefined;\n    }\n    get referrerPolicy() {\n        return this[INTERNALS].referrerPolicy;\n    }\n    set referrerPolicy(referrerPolicy) {\n        this[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n    }\n    /**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */ clone() {\n        return new Request(this);\n    }\n    get [Symbol.toStringTag]() {\n        return \"Request\";\n    }\n}\nObject.defineProperties(Request.prototype, {\n    method: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    redirect: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    },\n    signal: {\n        enumerable: true\n    },\n    referrer: {\n        enumerable: true\n    },\n    referrerPolicy: {\n        enumerable: true\n    }\n});\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */ const getNodeRequestOptions = (request)=>{\n    const { parsedURL } = request[INTERNALS];\n    const headers = new Headers(request[INTERNALS].headers);\n    // Fetch step 1.3\n    if (!headers.has(\"Accept\")) {\n        headers.set(\"Accept\", \"*/*\");\n    }\n    // HTTP-network-or-cache fetch steps 2.4-2.7\n    let contentLengthValue = null;\n    if (request.body === null && /^(post|put)$/i.test(request.method)) {\n        contentLengthValue = \"0\";\n    }\n    if (request.body !== null) {\n        const totalBytes = getTotalBytes(request);\n        // Set Content-Length if totalBytes is a number (that is not NaN)\n        if (typeof totalBytes === \"number\" && !Number.isNaN(totalBytes)) {\n            contentLengthValue = String(totalBytes);\n        }\n    }\n    if (contentLengthValue) {\n        headers.set(\"Content-Length\", contentLengthValue);\n    }\n    // 4.1. Main fetch, step 2.6\n    // > If request's referrer policy is the empty string, then set request's referrer policy to the\n    // > default referrer policy.\n    if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = DEFAULT_REFERRER_POLICY;\n    }\n    // 4.1. Main fetch, step 2.7\n    // > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n    // > determine request's referrer.\n    if (request.referrer && request.referrer !== \"no-referrer\") {\n        request[INTERNALS].referrer = determineRequestsReferrer(request);\n    } else {\n        request[INTERNALS].referrer = \"no-referrer\";\n    }\n    // 4.5. HTTP-network-or-cache fetch, step 6.9\n    // > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n    // >  and isomorphic encoded, to httpRequest's header list.\n    if (request[INTERNALS].referrer instanceof URL) {\n        headers.set(\"Referer\", request.referrer);\n    }\n    // HTTP-network-or-cache fetch step 2.11\n    if (!headers.has(\"User-Agent\")) {\n        headers.set(\"User-Agent\", \"node-fetch\");\n    }\n    // HTTP-network-or-cache fetch step 2.15\n    if (request.compress && !headers.has(\"Accept-Encoding\")) {\n        headers.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n    }\n    let { agent } = request;\n    if (typeof agent === \"function\") {\n        agent = agent(parsedURL);\n    }\n    if (!headers.has(\"Connection\") && !agent) {\n        headers.set(\"Connection\", \"close\");\n    }\n    // HTTP-network fetch step 4.2\n    // chunked encoding is handled by Node.js\n    const search = getSearch(parsedURL);\n    // Pass the full URL directly to request(), but overwrite the following\n    // options:\n    const options = {\n        // Overwrite search to retain trailing ? (issue #776)\n        path: parsedURL.pathname + search,\n        // The following options are not expressed in the URL\n        method: request.method,\n        headers: headers[Symbol.for(\"nodejs.util.inspect.custom\")](),\n        insecureHTTPParser: request.insecureHTTPParser,\n        agent\n    };\n    return {\n        /** @type {URL} */ parsedURL,\n        options\n    };\n};\n/**\n * AbortError interface for cancelled requests\n */ class AbortError extends FetchBaseError {\n    constructor(message, type = \"aborted\"){\n        super(message, type);\n    }\n}\n/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ if (!globalThis.DOMException) {\n    try {\n        const { MessageChannel } = __webpack_require__(/*! worker_threads */ \"worker_threads\"), port = new MessageChannel().port1, ab = new ArrayBuffer();\n        port.postMessage(ab, [\n            ab,\n            ab\n        ]);\n    } catch (err) {\n        err.constructor.name === \"DOMException\" && (globalThis.DOMException = err.constructor);\n    }\n}\nvar nodeDomexception = globalThis.DOMException;\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const supportedSchemas = new Set([\n    \"data:\",\n    \"http:\",\n    \"https:\"\n]);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */ async function fetch(url, options_) {\n    return new Promise((resolve, reject)=>{\n        // Build request object\n        const request = new Request(url, options_);\n        const { parsedURL, options } = getNodeRequestOptions(request);\n        if (!supportedSchemas.has(parsedURL.protocol)) {\n            throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, \"\")}\" is not supported.`);\n        }\n        if (parsedURL.protocol === \"data:\") {\n            const data = dataUriToBuffer(request.url);\n            const response = new Response(data, {\n                headers: {\n                    \"Content-Type\": data.typeFull\n                }\n            });\n            resolve(response);\n            return;\n        }\n        // Wrap http.request into fetch\n        const send = (parsedURL.protocol === \"https:\" ? https : http).request;\n        const { signal } = request;\n        let response = null;\n        const abort = ()=>{\n            const error = new AbortError(\"The operation was aborted.\");\n            reject(error);\n            if (request.body && request.body instanceof Stream.Readable) {\n                request.body.destroy(error);\n            }\n            if (!response || !response.body) {\n                return;\n            }\n            response.body.emit(\"error\", error);\n        };\n        if (signal && signal.aborted) {\n            abort();\n            return;\n        }\n        const abortAndFinalize = ()=>{\n            abort();\n            finalize();\n        };\n        // Send request\n        const request_ = send(parsedURL.toString(), options);\n        if (signal) {\n            signal.addEventListener(\"abort\", abortAndFinalize);\n        }\n        const finalize = ()=>{\n            request_.abort();\n            if (signal) {\n                signal.removeEventListener(\"abort\", abortAndFinalize);\n            }\n        };\n        request_.on(\"error\", (error)=>{\n            reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, \"system\", error));\n            finalize();\n        });\n        fixResponseChunkedTransferBadEnding(request_, (error)=>{\n            if (response && response.body) {\n                response.body.destroy(error);\n            }\n        });\n        /* c8 ignore next 18 */ if (process.version < \"v14\") {\n            // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n            // properly handle when the socket close/end events are out of order.\n            request_.on(\"socket\", (s)=>{\n                let endedWithEventsCount;\n                s.prependListener(\"end\", ()=>{\n                    endedWithEventsCount = s._eventsCount;\n                });\n                s.prependListener(\"close\", (hadError)=>{\n                    // if end happened before close but the socket didn't emit an error, do it now\n                    if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n                        const error = new Error(\"Premature close\");\n                        error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                        response.body.emit(\"error\", error);\n                    }\n                });\n            });\n        }\n        request_.on(\"response\", (response_)=>{\n            request_.setTimeout(0);\n            const headers = fromRawHeaders(response_.rawHeaders);\n            // HTTP fetch step 5\n            if (isRedirect(response_.statusCode)) {\n                // HTTP fetch step 5.2\n                const location = headers.get(\"Location\");\n                // HTTP fetch step 5.3\n                let locationURL = null;\n                try {\n                    locationURL = location === null ? null : new URL(location, request.url);\n                } catch  {\n                    // error here can only be invalid URL in Location: header\n                    // do not throw when options.redirect == manual\n                    // let the user extract the errorneous redirect URL\n                    if (request.redirect !== \"manual\") {\n                        reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, \"invalid-redirect\"));\n                        finalize();\n                        return;\n                    }\n                }\n                // HTTP fetch step 5.5\n                switch(request.redirect){\n                    case \"error\":\n                        reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, \"no-redirect\"));\n                        finalize();\n                        return;\n                    case \"manual\":\n                        break;\n                    case \"follow\":\n                        {\n                            // HTTP-redirect fetch step 2\n                            if (locationURL === null) {\n                                break;\n                            }\n                            // HTTP-redirect fetch step 5\n                            if (request.counter >= request.follow) {\n                                reject(new FetchError(`maximum redirect reached at: ${request.url}`, \"max-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 6 (counter increment)\n                            // Create a new Request object.\n                            const requestOptions = {\n                                headers: new Headers(request.headers),\n                                follow: request.follow,\n                                counter: request.counter + 1,\n                                agent: request.agent,\n                                compress: request.compress,\n                                method: request.method,\n                                body: clone(request),\n                                signal: request.signal,\n                                size: request.size,\n                                referrer: request.referrer,\n                                referrerPolicy: request.referrerPolicy\n                            };\n                            // when forwarding sensitive headers like \"Authorization\",\n                            // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n                            // headers will be ignored when following a redirect to a domain\n                            // that is not a subdomain match or exact match of the initial domain.\n                            // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n                            // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n                            // headers will also be ignored when following a redirect to a domain using\n                            // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n                            // will not forward the sensitive headers\n                            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                                for (const name of [\n                                    \"authorization\",\n                                    \"www-authenticate\",\n                                    \"cookie\",\n                                    \"cookie2\"\n                                ]){\n                                    requestOptions.headers.delete(name);\n                                }\n                            }\n                            // HTTP-redirect fetch step 9\n                            if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                                reject(new FetchError(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 11\n                            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === \"POST\") {\n                                requestOptions.method = \"GET\";\n                                requestOptions.body = undefined;\n                                requestOptions.headers.delete(\"content-length\");\n                            }\n                            // HTTP-redirect fetch step 14\n                            const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n                            if (responseReferrerPolicy) {\n                                requestOptions.referrerPolicy = responseReferrerPolicy;\n                            }\n                            // HTTP-redirect fetch step 15\n                            resolve(fetch(new Request(locationURL, requestOptions)));\n                            finalize();\n                            return;\n                        }\n                    default:\n                        return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n                }\n            }\n            // Prepare response\n            if (signal) {\n                response_.once(\"end\", ()=>{\n                    signal.removeEventListener(\"abort\", abortAndFinalize);\n                });\n            }\n            let body = Stream.pipeline(response_, new Stream.PassThrough(), (error)=>{\n                if (error) {\n                    reject(error);\n                }\n            });\n            // see https://github.com/nodejs/node/pull/29376\n            /* c8 ignore next 3 */ if (process.version < \"v12.10\") {\n                response_.on(\"aborted\", abortAndFinalize);\n            }\n            const responseOptions = {\n                url: request.url,\n                status: response_.statusCode,\n                statusText: response_.statusMessage,\n                headers,\n                size: request.size,\n                counter: request.counter,\n                highWaterMark: request.highWaterMark\n            };\n            // HTTP-network fetch step 12.1.1.3\n            const codings = headers.get(\"Content-Encoding\");\n            // HTTP-network fetch step 12.1.1.4: handle content codings\n            // in following scenarios we ignore compression support\n            // 1. compression support is disabled\n            // 2. HEAD request\n            // 3. no Content-Encoding header\n            // 4. no content response (204)\n            // 5. content not modified response (304)\n            if (!request.compress || request.method === \"HEAD\" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For Node v6+\n            // Be less strict when decoding compressed responses, since sometimes\n            // servers send slightly invalid responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            const zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n            };\n            // For gzip\n            if (codings === \"gzip\" || codings === \"x-gzip\") {\n                body = Stream.pipeline(body, zlib.createGunzip(zlibOptions), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For deflate\n            if (codings === \"deflate\" || codings === \"x-deflate\") {\n                // Handle the infamous raw deflate response from old servers\n                // a hack for old IIS and Apache servers\n                const raw = Stream.pipeline(response_, new Stream.PassThrough(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                raw.once(\"data\", (chunk)=>{\n                    // See http://stackoverflow.com/questions/37519828\n                    if ((chunk[0] & 0x0F) === 0x08) {\n                        body = Stream.pipeline(body, zlib.createInflate(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    } else {\n                        body = Stream.pipeline(body, zlib.createInflateRaw(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    }\n                    response = new Response(body, responseOptions);\n                    resolve(response);\n                });\n                raw.once(\"end\", ()=>{\n                    // Some old IIS servers return zero-length OK deflate responses, so\n                    // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n                    if (!response) {\n                        response = new Response(body, responseOptions);\n                        resolve(response);\n                    }\n                });\n                return;\n            }\n            // For br\n            if (codings === \"br\") {\n                body = Stream.pipeline(body, zlib.createBrotliDecompress(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // Otherwise, use response as-is\n            response = new Response(body, responseOptions);\n            resolve(response);\n        });\n        // eslint-disable-next-line promise/prefer-await-to-then\n        writeToStream(request_, request).catch(reject);\n    });\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n    const LAST_CHUNK = node_buffer.Buffer.from(\"0\\r\\n\\r\\n\");\n    let isChunkedTransfer = false;\n    let properLastChunkReceived = false;\n    let previousChunk;\n    request.on(\"response\", (response)=>{\n        const { headers } = response;\n        isChunkedTransfer = headers[\"transfer-encoding\"] === \"chunked\" && !headers[\"content-length\"];\n    });\n    request.on(\"socket\", (socket)=>{\n        const onSocketClose = ()=>{\n            if (isChunkedTransfer && !properLastChunkReceived) {\n                const error = new Error(\"Premature close\");\n                error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                errorCallback(error);\n            }\n        };\n        const onData = (buf)=>{\n            properLastChunkReceived = node_buffer.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n            // Sometimes final 0-length chunk and end of message code are in separate packets\n            if (!properLastChunkReceived && previousChunk) {\n                properLastChunkReceived = node_buffer.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && node_buffer.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n            }\n            previousChunk = buf;\n        };\n        socket.prependListener(\"close\", onSocketClose);\n        socket.on(\"data\", onData);\n        request.on(\"close\", ()=>{\n            socket.removeListener(\"close\", onSocketClose);\n            socket.removeListener(\"data\", onData);\n        });\n    });\n}\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */ /**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */ /**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */ const privateData = new WeakMap();\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */ const wrappers = new WeakMap();\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */ function pd(event) {\n    const retv = privateData.get(event);\n    console.assert(retv != null, \"'this' is expected an Event object, but got\", event);\n    return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */ function setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n            console.error(\"Unable to preventDefault inside passive event listener invocation.\", data.passiveListener);\n        }\n        return;\n    }\n    if (!data.event.cancelable) {\n        return;\n    }\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */ /**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */ function Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now()\n    });\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", {\n        value: false,\n        enumerable: true\n    });\n    // Define accessors\n    const keys = Object.keys(event);\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */ get type () {\n        return pd(this).event.type;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */ get target () {\n        return pd(this).eventTarget;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */ get currentTarget () {\n        return pd(this).currentTarget;\n    },\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */ composedPath () {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return [];\n        }\n        return [\n            currentTarget\n        ];\n    },\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */ get NONE () {\n        return 0;\n    },\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */ get CAPTURING_PHASE () {\n        return 1;\n    },\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */ get AT_TARGET () {\n        return 2;\n    },\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */ get BUBBLING_PHASE () {\n        return 3;\n    },\n    /**\n     * The target of this event.\n     * @type {number}\n     */ get eventPhase () {\n        return pd(this).eventPhase;\n    },\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */ stopPropagation () {\n        const data = pd(this);\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */ stopImmediatePropagation () {\n        const data = pd(this);\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */ get bubbles () {\n        return Boolean(pd(this).event.bubbles);\n    },\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */ get cancelable () {\n        return Boolean(pd(this).event.cancelable);\n    },\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */ preventDefault () {\n        setCancelFlag(pd(this));\n    },\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */ get defaultPrevented () {\n        return pd(this).canceled;\n    },\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */ get composed () {\n        return Boolean(pd(this).event.composed);\n    },\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */ get timeStamp () {\n        return pd(this).timeStamp;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */ get srcElement () {\n        return pd(this).eventTarget;\n    },\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */ get cancelBubble () {\n        return pd(this).stopped;\n    },\n    set cancelBubble (value){\n        if (!value) {\n            return;\n        }\n        const data = pd(this);\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */ get returnValue () {\n        return !pd(this).canceled;\n    },\n    set returnValue (value){\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */ initEvent () {\n    // Do nothing.\n    }\n};\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true\n});\n// Ensure `event instanceof window.Event` is `true`.\nif (false) {}\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */ function defineRedirectDescriptor(key) {\n    return {\n        get () {\n            return pd(this).event[key];\n        },\n        set (value1) {\n            pd(this).event[key] = value1;\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */ function defineCallDescriptor(key) {\n    return {\n        value () {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments);\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */ function defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent;\n    }\n    /** CustomEvent */ function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: {\n            value: CustomEvent,\n            configurable: true,\n            writable: true\n        }\n    });\n    // Define accessors.\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));\n        }\n    }\n    return CustomEvent;\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */ function getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event;\n    }\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper;\n}\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */ function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event);\n}\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */ function isStopped(event) {\n    return pd(event).immediateStopped;\n}\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */ function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */ function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */ function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */ /**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */ const listenersMap = new WeakMap();\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */ function isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n    ;\n}\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */ function getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");\n    }\n    return listeners;\n}\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */ function defineEventAttributeDescriptor(eventName) {\n    return {\n        get () {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while(node != null){\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener;\n                }\n                node = node.next;\n            }\n            return null;\n        },\n        set (listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while(node != null){\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n                node = node.next;\n            }\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */ function defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));\n}\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */ function defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */ function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true\n        }\n    });\n    for(let i = 0; i < eventNames.length; ++i){\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n    return CustomEventTarget;\n}\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */ function EventTarget() {\n    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return;\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0]);\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for(let i = 0; i < arguments.length; ++i){\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types);\n    }\n    throw new TypeError(\"Cannot call a class as a function\");\n/*eslint-enable consistent-return */ }\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */ addEventListener (eventName, listener, options) {\n        if (listener == null) {\n            return;\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\");\n        }\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null\n        };\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return;\n        }\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while(node != null){\n            if (node.listener === listener && node.listenerType === listenerType) {\n                // Should ignore duplication.\n                return;\n            }\n            prev = node;\n            node = node.next;\n        }\n        // Add it.\n        prev.next = newNode;\n    },\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */ removeEventListener (eventName, listener, options) {\n        if (listener == null) {\n            return;\n        }\n        const listeners = getListeners(this);\n        const capture = isObject(options) ? Boolean(options.capture) : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        let prev = null;\n        let node = listeners.get(eventName);\n        while(node != null){\n            if (node.listener === listener && node.listenerType === listenerType) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return;\n            }\n            prev = node;\n            node = node.next;\n        }\n    },\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */ dispatchEvent (event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.');\n        }\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true;\n        }\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while(node != null){\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n            // Call this listener\n            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n                        console.error(err);\n                    }\n                }\n            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === \"function\") {\n                node.listener.handleEvent(wrappedEvent);\n            }\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break;\n            }\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n        return !wrappedEvent.defaultPrevented;\n    }\n};\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true\n});\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (false) {}\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */ /**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */ class AbortSignal extends EventTarget {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */ constructor(){\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */ get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */ function createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    EventTarget.call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */ function abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({\n        type: \"abort\"\n    });\n}\n/**\n * Aborted flag for each instances.\n */ const abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: {\n        enumerable: true\n    }\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\"\n    });\n}\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */ class AbortController$1 {\n    /**\n     * Initialize this controller.\n     */ constructor(){\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */ get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */ abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */ const signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */ function getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController$1.prototype, {\n    signal: {\n        enumerable: true\n    },\n    abort: {\n        enumerable: true\n    }\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController$1.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\"\n    });\n}\nexports.AbortController = AbortController$1;\nexports.AbortError = AbortError;\nexports.FetchError = FetchError;\nexports.File = File$1;\nexports.FormData = FormData;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports._Blob = _Blob$1;\nexports.fetch = fetch;\nexports.isRedirect = isRedirect;\nexports.nodeDomexception = nodeDomexception;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuOGFmZDNmZWEuY2pzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsT0FBT0YsbUJBQU9BLENBQUM7QUFDckIsTUFBTUcsU0FBU0gsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUksY0FBY0osbUJBQU9BLENBQUM7QUFDNUIsTUFBTUssWUFBWUwsbUJBQU9BLENBQUM7QUFDMUIsTUFBTU0sV0FBV04sbUJBQU9BLENBQUM7QUFDekIsTUFBTU8sV0FBV1AsbUJBQU9BLENBQUM7QUFDekJBLG1CQUFPQSxDQUFDO0FBQ1JBLG1CQUFPQSxDQUFDO0FBRVI7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsZ0JBQWdCQyxHQUFHO0lBQ3hCLElBQUksQ0FBQyxVQUFVQyxJQUFJLENBQUNELE1BQU07UUFDdEIsTUFBTSxJQUFJRSxVQUFVO0lBQ3hCO0lBQ0EsaUJBQWlCO0lBQ2pCRixNQUFNQSxJQUFJRyxPQUFPLENBQUMsVUFBVTtJQUM1QiwrREFBK0Q7SUFDL0QsTUFBTUMsYUFBYUosSUFBSUssT0FBTyxDQUFDO0lBQy9CLElBQUlELGVBQWUsQ0FBQyxLQUFLQSxjQUFjLEdBQUc7UUFDdEMsTUFBTSxJQUFJRixVQUFVO0lBQ3hCO0lBQ0EsbURBQW1EO0lBQ25ELE1BQU1JLE9BQU9OLElBQUlPLFNBQVMsQ0FBQyxHQUFHSCxZQUFZSSxLQUFLLENBQUM7SUFDaEQsSUFBSUMsVUFBVTtJQUNkLElBQUlDLFNBQVM7SUFDYixNQUFNQyxPQUFPTCxJQUFJLENBQUMsRUFBRSxJQUFJO0lBQ3hCLElBQUlNLFdBQVdEO0lBQ2YsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlQLEtBQUtRLE1BQU0sRUFBRUQsSUFBSztRQUNsQyxJQUFJUCxJQUFJLENBQUNPLEVBQUUs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azovL215dGFza3MvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuOGFmZDNmZWEuY2pzP2U3YjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ25vZGU6aHR0cHMnKTtcbmNvbnN0IHpsaWIgPSByZXF1aXJlKCdub2RlOnpsaWInKTtcbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ25vZGU6c3RyZWFtJyk7XG5jb25zdCBub2RlX2J1ZmZlciA9IHJlcXVpcmUoJ25vZGU6YnVmZmVyJyk7XG5jb25zdCBub2RlX3V0aWwgPSByZXF1aXJlKCdub2RlOnV0aWwnKTtcbmNvbnN0IG5vZGVfdXJsID0gcmVxdWlyZSgnbm9kZTp1cmwnKTtcbmNvbnN0IG5vZGVfbmV0ID0gcmVxdWlyZSgnbm9kZTpuZXQnKTtcbnJlcXVpcmUoJ25vZGU6ZnMnKTtcbnJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuXG4vKipcbiAqIFJldHVybnMgYSBgQnVmZmVyYCBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiBkYXRhIFVSSSBgdXJpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpIERhdGEgVVJJIHRvIHR1cm4gaW50byBhIEJ1ZmZlciBpbnN0YW5jZVxuICogQHJldHVybnMge0J1ZmZlcn0gQnVmZmVyIGluc3RhbmNlIGZyb20gRGF0YSBVUklcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRhdGFVcmlUb0J1ZmZlcih1cmkpIHtcbiAgICBpZiAoIS9eZGF0YTovaS50ZXN0KHVyaSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYHVyaWAgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgRGF0YSBVUkkgKG11c3QgYmVnaW4gd2l0aCBcImRhdGE6XCIpJyk7XG4gICAgfVxuICAgIC8vIHN0cmlwIG5ld2xpbmVzXG4gICAgdXJpID0gdXJpLnJlcGxhY2UoL1xccj9cXG4vZywgJycpO1xuICAgIC8vIHNwbGl0IHRoZSBVUkkgdXAgaW50byB0aGUgXCJtZXRhZGF0YVwiIGFuZCB0aGUgXCJkYXRhXCIgcG9ydGlvbnNcbiAgICBjb25zdCBmaXJzdENvbW1hID0gdXJpLmluZGV4T2YoJywnKTtcbiAgICBpZiAoZmlyc3RDb21tYSA9PT0gLTEgfHwgZmlyc3RDb21tYSA8PSA0KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21hbGZvcm1lZCBkYXRhOiBVUkknKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHRoZSBcImRhdGE6XCIgc2NoZW1lIGFuZCBwYXJzZSB0aGUgbWV0YWRhdGFcbiAgICBjb25zdCBtZXRhID0gdXJpLnN1YnN0cmluZyg1LCBmaXJzdENvbW1hKS5zcGxpdCgnOycpO1xuICAgIGxldCBjaGFyc2V0ID0gJyc7XG4gICAgbGV0IGJhc2U2NCA9IGZhbHNlO1xuICAgIGNvbnN0IHR5cGUgPSBtZXRhWzBdIHx8ICd0ZXh0L3BsYWluJztcbiAgICBsZXQgdHlwZUZ1bGwgPSB0eXBlO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbWV0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobWV0YVtpXSA9PT0gJ2Jhc2U2NCcpIHtcbiAgICAgICAgICAgIGJhc2U2NCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eXBlRnVsbCArPSBgOyR7bWV0YVtpXX1gO1xuICAgICAgICAgICAgaWYgKG1ldGFbaV0uaW5kZXhPZignY2hhcnNldD0nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNoYXJzZXQgPSBtZXRhW2ldLnN1YnN0cmluZyg4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBkZWZhdWx0cyB0byBVUy1BU0NJSSBvbmx5IGlmIHR5cGUgaXMgbm90IHByb3ZpZGVkXG4gICAgaWYgKCFtZXRhWzBdICYmICFjaGFyc2V0Lmxlbmd0aCkge1xuICAgICAgICB0eXBlRnVsbCArPSAnO2NoYXJzZXQ9VVMtQVNDSUknO1xuICAgICAgICBjaGFyc2V0ID0gJ1VTLUFTQ0lJJztcbiAgICB9XG4gICAgLy8gZ2V0IHRoZSBlbmNvZGVkIGRhdGEgcG9ydGlvbiBhbmQgZGVjb2RlIFVSSS1lbmNvZGVkIGNoYXJzXG4gICAgY29uc3QgZW5jb2RpbmcgPSBiYXNlNjQgPyAnYmFzZTY0JyA6ICdhc2NpaSc7XG4gICAgY29uc3QgZGF0YSA9IHVuZXNjYXBlKHVyaS5zdWJzdHJpbmcoZmlyc3RDb21tYSArIDEpKTtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZyk7XG4gICAgLy8gc2V0IGAudHlwZWAgYW5kIGAudHlwZUZ1bGxgIHByb3BlcnRpZXMgdG8gTUlNRSB0eXBlXG4gICAgYnVmZmVyLnR5cGUgPSB0eXBlO1xuICAgIGJ1ZmZlci50eXBlRnVsbCA9IHR5cGVGdWxsO1xuICAgIC8vIHNldCB0aGUgYC5jaGFyc2V0YCBwcm9wZXJ0eVxuICAgIGJ1ZmZlci5jaGFyc2V0ID0gY2hhcnNldDtcbiAgICByZXR1cm4gYnVmZmVyO1xufVxuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxudmFyIHBvbnlmaWxsX2VzMjAxOCA9IHtleHBvcnRzOiB7fX07XG5cbi8qKlxuICogd2ViLXN0cmVhbXMtcG9seWZpbGwgdjMuMi4xXG4gKi9cblxudmFyIGhhc1JlcXVpcmVkUG9ueWZpbGxfZXMyMDE4O1xuXG5mdW5jdGlvbiByZXF1aXJlUG9ueWZpbGxfZXMyMDE4ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkUG9ueWZpbGxfZXMyMDE4KSByZXR1cm4gcG9ueWZpbGxfZXMyMDE4LmV4cG9ydHM7XG5cdGhhc1JlcXVpcmVkUG9ueWZpbGxfZXMyMDE4ID0gMTtcblx0KGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblx0XHQoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHRcdCAgICBmYWN0b3J5KGV4cG9ydHMpIDtcblx0XHR9KGNvbW1vbmpzR2xvYmFsLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0XHQgICAgLy8vIDxyZWZlcmVuY2UgbGliPVwiZXMyMDE1LnN5bWJvbFwiIC8+XG5cdFx0ICAgIGNvbnN0IFN5bWJvbFBvbHlmaWxsID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJyA/XG5cdFx0ICAgICAgICBTeW1ib2wgOlxuXHRcdCAgICAgICAgZGVzY3JpcHRpb24gPT4gYFN5bWJvbCgke2Rlc2NyaXB0aW9ufSlgO1xuXG5cdFx0ICAgIC8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5cdFx0ICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG5cdFx0ICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGdldEdsb2JhbHMoKSB7XG5cdFx0ICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIGlmICh0eXBlb2YgY29tbW9uanNHbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0XHQgICAgfVxuXHRcdCAgICBjb25zdCBnbG9iYWxzID0gZ2V0R2xvYmFscygpO1xuXG5cdFx0ICAgIGZ1bmN0aW9uIHR5cGVJc09iamVjdCh4KSB7XG5cdFx0ICAgICAgICByZXR1cm4gKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsKSB8fCB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcblx0XHQgICAgfVxuXHRcdCAgICBjb25zdCByZXRocm93QXNzZXJ0aW9uRXJyb3JSZWplY3Rpb24gPSBub29wO1xuXG5cdFx0ICAgIGNvbnN0IG9yaWdpbmFsUHJvbWlzZSA9IFByb21pc2U7XG5cdFx0ICAgIGNvbnN0IG9yaWdpbmFsUHJvbWlzZVRoZW4gPSBQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXHRcdCAgICBjb25zdCBvcmlnaW5hbFByb21pc2VSZXNvbHZlID0gUHJvbWlzZS5yZXNvbHZlLmJpbmQob3JpZ2luYWxQcm9taXNlKTtcblx0XHQgICAgY29uc3Qgb3JpZ2luYWxQcm9taXNlUmVqZWN0ID0gUHJvbWlzZS5yZWplY3QuYmluZChvcmlnaW5hbFByb21pc2UpO1xuXHRcdCAgICBmdW5jdGlvbiBuZXdQcm9taXNlKGV4ZWN1dG9yKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IG9yaWdpbmFsUHJvbWlzZShleGVjdXRvcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gcHJvbWlzZVJlc29sdmVkV2l0aCh2YWx1ZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG9yaWdpbmFsUHJvbWlzZVJlc29sdmUodmFsdWUpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIHByb21pc2VSZWplY3RlZFdpdGgocmVhc29uKSB7XG5cdFx0ICAgICAgICByZXR1cm4gb3JpZ2luYWxQcm9taXNlUmVqZWN0KHJlYXNvbik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG5cdFx0ICAgICAgICAvLyBUaGVyZSBkb2Vzbid0IGFwcGVhciB0byBiZSBhbnkgd2F5IHRvIGNvcnJlY3RseSBlbXVsYXRlIHRoZSBiZWhhdmlvdXIgZnJvbSBKYXZhU2NyaXB0LCBzbyB0aGlzIGlzIGp1c3QgYW5cblx0XHQgICAgICAgIC8vIGFwcHJveGltYXRpb24uXG5cdFx0ICAgICAgICByZXR1cm4gb3JpZ2luYWxQcm9taXNlVGhlbi5jYWxsKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiB1cG9uUHJvbWlzZShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuXHRcdCAgICAgICAgUGVyZm9ybVByb21pc2VUaGVuKFBlcmZvcm1Qcm9taXNlVGhlbihwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCksIHVuZGVmaW5lZCwgcmV0aHJvd0Fzc2VydGlvbkVycm9yUmVqZWN0aW9uKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiB1cG9uRnVsZmlsbG1lbnQocHJvbWlzZSwgb25GdWxmaWxsZWQpIHtcblx0XHQgICAgICAgIHVwb25Qcm9taXNlKHByb21pc2UsIG9uRnVsZmlsbGVkKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiB1cG9uUmVqZWN0aW9uKHByb21pc2UsIG9uUmVqZWN0ZWQpIHtcblx0XHQgICAgICAgIHVwb25Qcm9taXNlKHByb21pc2UsIHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gdHJhbnNmb3JtUHJvbWlzZVdpdGgocHJvbWlzZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG5cdFx0ICAgICAgICByZXR1cm4gUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwcm9taXNlKSB7XG5cdFx0ICAgICAgICBQZXJmb3JtUHJvbWlzZVRoZW4ocHJvbWlzZSwgdW5kZWZpbmVkLCByZXRocm93QXNzZXJ0aW9uRXJyb3JSZWplY3Rpb24pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGNvbnN0IHF1ZXVlTWljcm90YXNrID0gKCgpID0+IHtcblx0XHQgICAgICAgIGNvbnN0IGdsb2JhbFF1ZXVlTWljcm90YXNrID0gZ2xvYmFscyAmJiBnbG9iYWxzLnF1ZXVlTWljcm90YXNrO1xuXHRcdCAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxRdWV1ZU1pY3JvdGFzayA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBnbG9iYWxRdWV1ZU1pY3JvdGFzaztcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcblx0XHQgICAgICAgIHJldHVybiAoZm4pID0+IFBlcmZvcm1Qcm9taXNlVGhlbihyZXNvbHZlZFByb21pc2UsIGZuKTtcblx0XHQgICAgfSkoKTtcblx0XHQgICAgZnVuY3Rpb24gcmVmbGVjdENhbGwoRiwgViwgYXJncykge1xuXHRcdCAgICAgICAgaWYgKHR5cGVvZiBGICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChGLCBWLCBhcmdzKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBwcm9taXNlQ2FsbChGLCBWLCBhcmdzKSB7XG5cdFx0ICAgICAgICB0cnkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHJlZmxlY3RDYWxsKEYsIFYsIGFyZ3MpKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNhdGNoICh2YWx1ZSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHZhbHVlKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXG5cdFx0ICAgIC8vIE9yaWdpbmFsIGZyb20gQ2hyb21pdW1cblx0XHQgICAgLy8gaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rLzBhZWU0NDM0YTRkYmE0MmE0MmFiYWVhOWJmYmMwY2QxOTZhNjNiYzEvdGhpcmRfcGFydHkvYmxpbmsvcmVuZGVyZXIvY29yZS9zdHJlYW1zL1NpbXBsZVF1ZXVlLmpzXG5cdFx0ICAgIGNvbnN0IFFVRVVFX01BWF9BUlJBWV9TSVpFID0gMTYzODQ7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBTaW1wbGUgcXVldWUgc3RydWN0dXJlLlxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBBdm9pZHMgc2NhbGFiaWxpdHkgaXNzdWVzIHdpdGggdXNpbmcgYSBwYWNrZWQgYXJyYXkgZGlyZWN0bHkgYnkgdXNpbmdcblx0XHQgICAgICogbXVsdGlwbGUgYXJyYXlzIGluIGEgbGlua2VkIGxpc3QgYW5kIGtlZXBpbmcgdGhlIGFycmF5IHNpemUgYm91bmRlZC5cblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFNpbXBsZVF1ZXVlIHtcblx0XHQgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuXHRcdCAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IDA7XG5cdFx0ICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG5cdFx0ICAgICAgICAgICAgLy8gX2Zyb250IGFuZCBfYmFjayBhcmUgYWx3YXlzIGRlZmluZWQuXG5cdFx0ICAgICAgICAgICAgdGhpcy5fZnJvbnQgPSB7XG5cdFx0ICAgICAgICAgICAgICAgIF9lbGVtZW50czogW10sXG5cdFx0ICAgICAgICAgICAgICAgIF9uZXh0OiB1bmRlZmluZWRcblx0XHQgICAgICAgICAgICB9O1xuXHRcdCAgICAgICAgICAgIHRoaXMuX2JhY2sgPSB0aGlzLl9mcm9udDtcblx0XHQgICAgICAgICAgICAvLyBUaGUgY3Vyc29yIGlzIHVzZWQgdG8gYXZvaWQgY2FsbGluZyBBcnJheS5zaGlmdCgpLlxuXHRcdCAgICAgICAgICAgIC8vIEl0IGNvbnRhaW5zIHRoZSBpbmRleCBvZiB0aGUgZnJvbnQgZWxlbWVudCBvZiB0aGUgYXJyYXkgaW5zaWRlIHRoZVxuXHRcdCAgICAgICAgICAgIC8vIGZyb250LW1vc3Qgbm9kZS4gSXQgaXMgYWx3YXlzIGluIHRoZSByYW5nZSBbMCwgUVVFVUVfTUFYX0FSUkFZX1NJWkUpLlxuXHRcdCAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IDA7XG5cdFx0ICAgICAgICAgICAgLy8gV2hlbiB0aGVyZSBpcyBvbmx5IG9uZSBub2RlLCBzaXplID09PSBlbGVtZW50cy5sZW5ndGggLSBjdXJzb3IuXG5cdFx0ICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBnZXQgbGVuZ3RoKCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLy8gRm9yIGV4Y2VwdGlvbiBzYWZldHksIHRoaXMgbWV0aG9kIGlzIHN0cnVjdHVyZWQgaW4gb3JkZXI6XG5cdFx0ICAgICAgICAvLyAxLiBSZWFkIHN0YXRlXG5cdFx0ICAgICAgICAvLyAyLiBDYWxjdWxhdGUgcmVxdWlyZWQgc3RhdGUgbXV0YXRpb25zXG5cdFx0ICAgICAgICAvLyAzLiBQZXJmb3JtIHN0YXRlIG11dGF0aW9uc1xuXHRcdCAgICAgICAgcHVzaChlbGVtZW50KSB7XG5cdFx0ICAgICAgICAgICAgY29uc3Qgb2xkQmFjayA9IHRoaXMuX2JhY2s7XG5cdFx0ICAgICAgICAgICAgbGV0IG5ld0JhY2sgPSBvbGRCYWNrO1xuXHRcdCAgICAgICAgICAgIGlmIChvbGRCYWNrLl9lbGVtZW50cy5sZW5ndGggPT09IFFVRVVFX01BWF9BUlJBWV9TSVpFIC0gMSkge1xuXHRcdCAgICAgICAgICAgICAgICBuZXdCYWNrID0ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgX2VsZW1lbnRzOiBbXSxcblx0XHQgICAgICAgICAgICAgICAgICAgIF9uZXh0OiB1bmRlZmluZWRcblx0XHQgICAgICAgICAgICAgICAgfTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgLy8gcHVzaCgpIGlzIHRoZSBtdXRhdGlvbiBtb3N0IGxpa2VseSB0byB0aHJvdyBhbiBleGNlcHRpb24sIHNvIGl0XG5cdFx0ICAgICAgICAgICAgLy8gZ29lcyBmaXJzdC5cblx0XHQgICAgICAgICAgICBvbGRCYWNrLl9lbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuXHRcdCAgICAgICAgICAgIGlmIChuZXdCYWNrICE9PSBvbGRCYWNrKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMuX2JhY2sgPSBuZXdCYWNrO1xuXHRcdCAgICAgICAgICAgICAgICBvbGRCYWNrLl9uZXh0ID0gbmV3QmFjaztcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgKyt0aGlzLl9zaXplO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLy8gTGlrZSBwdXNoKCksIHNoaWZ0KCkgZm9sbG93cyB0aGUgcmVhZCAtPiBjYWxjdWxhdGUgLT4gbXV0YXRlIHBhdHRlcm4gZm9yXG5cdFx0ICAgICAgICAvLyBleGNlcHRpb24gc2FmZXR5LlxuXHRcdCAgICAgICAgc2hpZnQoKSB7IC8vIG11c3Qgbm90IGJlIGNhbGxlZCBvbiBhbiBlbXB0eSBxdWV1ZVxuXHRcdCAgICAgICAgICAgIGNvbnN0IG9sZEZyb250ID0gdGhpcy5fZnJvbnQ7XG5cdFx0ICAgICAgICAgICAgbGV0IG5ld0Zyb250ID0gb2xkRnJvbnQ7XG5cdFx0ICAgICAgICAgICAgY29uc3Qgb2xkQ3Vyc29yID0gdGhpcy5fY3Vyc29yO1xuXHRcdCAgICAgICAgICAgIGxldCBuZXdDdXJzb3IgPSBvbGRDdXJzb3IgKyAxO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gb2xkRnJvbnQuX2VsZW1lbnRzO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tvbGRDdXJzb3JdO1xuXHRcdCAgICAgICAgICAgIGlmIChuZXdDdXJzb3IgPT09IFFVRVVFX01BWF9BUlJBWV9TSVpFKSB7XG5cdFx0ICAgICAgICAgICAgICAgIG5ld0Zyb250ID0gb2xkRnJvbnQuX25leHQ7XG5cdFx0ICAgICAgICAgICAgICAgIG5ld0N1cnNvciA9IDA7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIC8vIE5vIG11dGF0aW9ucyBiZWZvcmUgdGhpcyBwb2ludC5cblx0XHQgICAgICAgICAgICAtLXRoaXMuX3NpemU7XG5cdFx0ICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gbmV3Q3Vyc29yO1xuXHRcdCAgICAgICAgICAgIGlmIChvbGRGcm9udCAhPT0gbmV3RnJvbnQpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhpcy5fZnJvbnQgPSBuZXdGcm9udDtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgLy8gUGVybWl0IHNoaWZ0ZWQgZWxlbWVudCB0byBiZSBnYXJiYWdlIGNvbGxlY3RlZC5cblx0XHQgICAgICAgICAgICBlbGVtZW50c1tvbGRDdXJzb3JdID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLy8gVGhlIHRyaWNreSB0aGluZyBhYm91dCBmb3JFYWNoKCkgaXMgdGhhdCBpdCBjYW4gYmUgY2FsbGVkXG5cdFx0ICAgICAgICAvLyByZS1lbnRyYW50bHkuIFRoZSBxdWV1ZSBtYXkgYmUgbXV0YXRlZCBpbnNpZGUgdGhlIGNhbGxiYWNrLiBJdCBpcyBlYXN5IHRvXG5cdFx0ICAgICAgICAvLyBzZWUgdGhhdCBwdXNoKCkgd2l0aGluIHRoZSBjYWxsYmFjayBoYXMgbm8gbmVnYXRpdmUgZWZmZWN0cyBzaW5jZSB0aGUgZW5kXG5cdFx0ICAgICAgICAvLyBvZiB0aGUgcXVldWUgaXMgY2hlY2tlZCBmb3Igb24gZXZlcnkgaXRlcmF0aW9uLiBJZiBzaGlmdCgpIGlzIGNhbGxlZFxuXHRcdCAgICAgICAgLy8gcmVwZWF0ZWRseSB3aXRoaW4gdGhlIGNhbGxiYWNrIHRoZW4gdGhlIG5leHQgaXRlcmF0aW9uIG1heSByZXR1cm4gYW5cblx0XHQgICAgICAgIC8vIGVsZW1lbnQgdGhhdCBoYXMgYmVlbiByZW1vdmVkLiBJbiB0aGlzIGNhc2UgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkXG5cdFx0ICAgICAgICAvLyB3aXRoIHVuZGVmaW5lZCB2YWx1ZXMgdW50aWwgd2UgZWl0aGVyIFwiY2F0Y2ggdXBcIiB3aXRoIGVsZW1lbnRzIHRoYXQgc3RpbGxcblx0XHQgICAgICAgIC8vIGV4aXN0IG9yIHJlYWNoIHRoZSBiYWNrIG9mIHRoZSBxdWV1ZS5cblx0XHQgICAgICAgIGZvckVhY2goY2FsbGJhY2spIHtcblx0XHQgICAgICAgICAgICBsZXQgaSA9IHRoaXMuX2N1cnNvcjtcblx0XHQgICAgICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2Zyb250O1xuXHRcdCAgICAgICAgICAgIGxldCBlbGVtZW50cyA9IG5vZGUuX2VsZW1lbnRzO1xuXHRcdCAgICAgICAgICAgIHdoaWxlIChpICE9PSBlbGVtZW50cy5sZW5ndGggfHwgbm9kZS5fbmV4dCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChpID09PSBlbGVtZW50cy5sZW5ndGgpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLl9uZXh0O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMgPSBub2RlLl9lbGVtZW50cztcblx0XHQgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnRzW2ldKTtcblx0XHQgICAgICAgICAgICAgICAgKytpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8vIFJldHVybiB0aGUgZWxlbWVudCB0aGF0IHdvdWxkIGJlIHJldHVybmVkIGlmIHNoaWZ0KCkgd2FzIGNhbGxlZCBub3csXG5cdFx0ICAgICAgICAvLyB3aXRob3V0IG1vZGlmeWluZyB0aGUgcXVldWUuXG5cdFx0ICAgICAgICBwZWVrKCkgeyAvLyBtdXN0IG5vdCBiZSBjYWxsZWQgb24gYW4gZW1wdHkgcXVldWVcblx0XHQgICAgICAgICAgICBjb25zdCBmcm9udCA9IHRoaXMuX2Zyb250O1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IHRoaXMuX2N1cnNvcjtcblx0XHQgICAgICAgICAgICByZXR1cm4gZnJvbnQuX2VsZW1lbnRzW2N1cnNvcl07XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNJbml0aWFsaXplKHJlYWRlciwgc3RyZWFtKSB7XG5cdFx0ICAgICAgICByZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW0gPSBzdHJlYW07XG5cdFx0ICAgICAgICBzdHJlYW0uX3JlYWRlciA9IHJlYWRlcjtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3N0YXRlID09PSAncmVhZGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHJlYWRlcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykge1xuXHRcdCAgICAgICAgICAgIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWQocmVhZGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQocmVhZGVyLCBzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICAvLyBBIGNsaWVudCBvZiBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIgYW5kIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlciBtYXkgdXNlIHRoZXNlIGZ1bmN0aW9ucyBkaXJlY3RseSB0byBieXBhc3Mgc3RhdGVcblx0XHQgICAgLy8gY2hlY2suXG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbChyZWFkZXIsIHJlYXNvbikge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtO1xuXHRcdCAgICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHN0cmVhbSwgcmVhc29uKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNSZWxlYXNlKHJlYWRlcikge1xuXHRcdCAgICAgICAgaWYgKHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbS5fc3RhdGUgPT09ICdyZWFkYWJsZScpIHtcblx0XHQgICAgICAgICAgICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIG5ldyBUeXBlRXJyb3IoYFJlYWRlciB3YXMgcmVsZWFzZWQgYW5kIGNhbiBubyBsb25nZXIgYmUgdXNlZCB0byBtb25pdG9yIHRoZSBzdHJlYW0ncyBjbG9zZWRuZXNzYCkpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNldFRvUmVqZWN0ZWQocmVhZGVyLCBuZXcgVHlwZUVycm9yKGBSZWFkZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtJ3MgY2xvc2VkbmVzc2ApKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbS5fcmVhZGVyID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtID0gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSByZWFkZXJzLlxuXHRcdCAgICBmdW5jdGlvbiByZWFkZXJMb2NrRXhjZXB0aW9uKG5hbWUpIHtcblx0XHQgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdDYW5ub3QgJyArIG5hbWUgKyAnIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgcmVhZGVyJyk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgdGhlIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHJlYWRlcikge1xuXHRcdCAgICAgICAgcmVhZGVyLl9jbG9zZWRQcm9taXNlID0gbmV3UHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ICAgICAgICAgICAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdCAgICAgICAgICAgIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSByZWplY3Q7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHJlYWRlciwgcmVhc29uKSB7XG5cdFx0ICAgICAgICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUocmVhZGVyKTtcblx0XHQgICAgICAgIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVqZWN0KHJlYWRlciwgcmVhc29uKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHJlYWRlcikge1xuXHRcdCAgICAgICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHJlYWRlcik7XG5cdFx0ICAgICAgICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUocmVhZGVyKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIHJlYXNvbikge1xuXHRcdCAgICAgICAgaWYgKHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHNldFByb21pc2VJc0hhbmRsZWRUb1RydWUocmVhZGVyLl9jbG9zZWRQcm9taXNlKTtcblx0XHQgICAgICAgIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QocmVhc29uKTtcblx0XHQgICAgICAgIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc2V0VG9SZWplY3RlZChyZWFkZXIsIHJlYXNvbikge1xuXHRcdCAgICAgICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZChyZWFkZXIsIHJlYXNvbik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNvbHZlKHJlYWRlcikge1xuXHRcdCAgICAgICAgaWYgKHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZWFkZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICByZWFkZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID0gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cblx0XHQgICAgY29uc3QgQWJvcnRTdGVwcyA9IFN5bWJvbFBvbHlmaWxsKCdbW0Fib3J0U3RlcHNdXScpO1xuXHRcdCAgICBjb25zdCBFcnJvclN0ZXBzID0gU3ltYm9sUG9seWZpbGwoJ1tbRXJyb3JTdGVwc11dJyk7XG5cdFx0ICAgIGNvbnN0IENhbmNlbFN0ZXBzID0gU3ltYm9sUG9seWZpbGwoJ1tbQ2FuY2VsU3RlcHNdXScpO1xuXHRcdCAgICBjb25zdCBQdWxsU3RlcHMgPSBTeW1ib2xQb2x5ZmlsbCgnW1tQdWxsU3RlcHNdXScpO1xuXG5cdFx0ICAgIC8vLyA8cmVmZXJlbmNlIGxpYj1cImVzMjAxNS5jb3JlXCIgLz5cblx0XHQgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyL2lzRmluaXRlI1BvbHlmaWxsXG5cdFx0ICAgIGNvbnN0IE51bWJlcklzRmluaXRlID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh4KSB7XG5cdFx0ICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdudW1iZXInICYmIGlzRmluaXRlKHgpO1xuXHRcdCAgICB9O1xuXG5cdFx0ICAgIC8vLyA8cmVmZXJlbmNlIGxpYj1cImVzMjAxNS5jb3JlXCIgLz5cblx0XHQgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC90cnVuYyNQb2x5ZmlsbFxuXHRcdCAgICBjb25zdCBNYXRoVHJ1bmMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uICh2KSB7XG5cdFx0ICAgICAgICByZXR1cm4gdiA8IDAgPyBNYXRoLmNlaWwodikgOiBNYXRoLmZsb29yKHYpO1xuXHRcdCAgICB9O1xuXG5cdFx0ICAgIC8vIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2lkbC1kaWN0aW9uYXJpZXNcblx0XHQgICAgZnVuY3Rpb24gaXNEaWN0aW9uYXJ5KHgpIHtcblx0XHQgICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gYXNzZXJ0RGljdGlvbmFyeShvYmosIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGlmIChvYmogIT09IHVuZGVmaW5lZCAmJiAhaXNEaWN0aW9uYXJ5KG9iaikpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NvbnRleHR9IGlzIG5vdCBhbiBvYmplY3QuYCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gaHR0cHM6Ly9oZXljYW0uZ2l0aHViLmlvL3dlYmlkbC8jaWRsLWNhbGxiYWNrLWZ1bmN0aW9uc1xuXHRcdCAgICBmdW5jdGlvbiBhc3NlcnRGdW5jdGlvbih4LCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBpZiAodHlwZW9mIHggIT09ICdmdW5jdGlvbicpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NvbnRleHR9IGlzIG5vdCBhIGZ1bmN0aW9uLmApO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIC8vIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2lkbC1vYmplY3Rcblx0XHQgICAgZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuXHRcdCAgICAgICAgcmV0dXJuICh0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCkgfHwgdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gYXNzZXJ0T2JqZWN0KHgsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGlmICghaXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NvbnRleHR9IGlzIG5vdCBhbiBvYmplY3QuYCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gYXNzZXJ0UmVxdWlyZWRBcmd1bWVudCh4LCBwb3NpdGlvbiwgY29udGV4dCkge1xuXHRcdCAgICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAke3Bvc2l0aW9ufSBpcyByZXF1aXJlZCBpbiAnJHtjb250ZXh0fScuYCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gYXNzZXJ0UmVxdWlyZWRGaWVsZCh4LCBmaWVsZCwgY29udGV4dCkge1xuXHRcdCAgICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7ZmllbGR9IGlzIHJlcXVpcmVkIGluICcke2NvbnRleHR9Jy5gKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICAvLyBodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyNpZGwtdW5yZXN0cmljdGVkLWRvdWJsZVxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0VW5yZXN0cmljdGVkRG91YmxlKHZhbHVlKSB7XG5cdFx0ICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjZW5zb3JOZWdhdGl2ZVplcm8oeCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHggPT09IDAgPyAwIDogeDtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBpbnRlZ2VyUGFydCh4KSB7XG5cdFx0ICAgICAgICByZXR1cm4gY2Vuc29yTmVnYXRpdmVaZXJvKE1hdGhUcnVuYyh4KSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gaHR0cHM6Ly9oZXljYW0uZ2l0aHViLmlvL3dlYmlkbC8jaWRsLXVuc2lnbmVkLWxvbmctbG9uZ1xuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0VW5zaWduZWRMb25nTG9uZ1dpdGhFbmZvcmNlUmFuZ2UodmFsdWUsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGNvbnN0IGxvd2VyQm91bmQgPSAwO1xuXHRcdCAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuXHRcdCAgICAgICAgbGV0IHggPSBOdW1iZXIodmFsdWUpO1xuXHRcdCAgICAgICAgeCA9IGNlbnNvck5lZ2F0aXZlWmVybyh4KTtcblx0XHQgICAgICAgIGlmICghTnVtYmVySXNGaW5pdGUoeCkpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NvbnRleHR9IGlzIG5vdCBhIGZpbml0ZSBudW1iZXJgKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHggPSBpbnRlZ2VyUGFydCh4KTtcblx0XHQgICAgICAgIGlmICh4IDwgbG93ZXJCb3VuZCB8fCB4ID4gdXBwZXJCb3VuZCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7Y29udGV4dH0gaXMgb3V0c2lkZSB0aGUgYWNjZXB0ZWQgcmFuZ2Ugb2YgJHtsb3dlckJvdW5kfSB0byAke3VwcGVyQm91bmR9LCBpbmNsdXNpdmVgKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICghTnVtYmVySXNGaW5pdGUoeCkgfHwgeCA9PT0gMCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiAwO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLy8gVE9ETyBVc2UgQmlnSW50IGlmIHN1cHBvcnRlZD9cblx0XHQgICAgICAgIC8vIGxldCB4QmlnSW50ID0gQmlnSW50KGludGVnZXJQYXJ0KHgpKTtcblx0XHQgICAgICAgIC8vIHhCaWdJbnQgPSBCaWdJbnQuYXNVaW50Tig2NCwgeEJpZ0ludCk7XG5cdFx0ICAgICAgICAvLyByZXR1cm4gTnVtYmVyKHhCaWdJbnQpO1xuXHRcdCAgICAgICAgcmV0dXJuIHg7XG5cdFx0ICAgIH1cblxuXHRcdCAgICBmdW5jdGlvbiBhc3NlcnRSZWFkYWJsZVN0cmVhbSh4LCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW0oeCkpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NvbnRleHR9IGlzIG5vdCBhIFJlYWRhYmxlU3RyZWFtLmApO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cblx0XHQgICAgLy8gQWJzdHJhY3Qgb3BlcmF0aW9ucyBmb3IgdGhlIFJlYWRhYmxlU3RyZWFtLlxuXHRcdCAgICBmdW5jdGlvbiBBY3F1aXJlUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHN0cmVhbSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBSZWFkYWJsZVN0cmVhbSBBUEkgZXhwb3NlZCBmb3IgY29udHJvbGxlcnMuXG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtQWRkUmVhZFJlcXVlc3Qoc3RyZWFtLCByZWFkUmVxdWVzdCkge1xuXHRcdCAgICAgICAgc3RyZWFtLl9yZWFkZXIuX3JlYWRSZXF1ZXN0cy5wdXNoKHJlYWRSZXF1ZXN0KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUZ1bGZpbGxSZWFkUmVxdWVzdChzdHJlYW0sIGNodW5rLCBkb25lKSB7XG5cdFx0ICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uX3JlYWRlcjtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRSZXF1ZXN0ID0gcmVhZGVyLl9yZWFkUmVxdWVzdHMuc2hpZnQoKTtcblx0XHQgICAgICAgIGlmIChkb25lKSB7XG5cdFx0ICAgICAgICAgICAgcmVhZFJlcXVlc3QuX2Nsb3NlU3RlcHMoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgIHJlYWRSZXF1ZXN0Ll9jaHVua1N0ZXBzKGNodW5rKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pIHtcblx0XHQgICAgICAgIHJldHVybiBzdHJlYW0uX3JlYWRlci5fcmVhZFJlcXVlc3RzLmxlbmd0aDtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXIoc3RyZWFtKSB7XG5cdFx0ICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uX3JlYWRlcjtcblx0XHQgICAgICAgIGlmIChyZWFkZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIocmVhZGVyKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB0cnVlO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBBIGRlZmF1bHQgcmVhZGVyIHZlbmRlZCBieSBhIHtAbGluayBSZWFkYWJsZVN0cmVhbX0uXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlciB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcblx0XHQgICAgICAgICAgICBhc3NlcnRSZXF1aXJlZEFyZ3VtZW50KHN0cmVhbSwgMSwgJ1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcicpO1xuXHRcdCAgICAgICAgICAgIGFzc2VydFJlYWRhYmxlU3RyZWFtKHN0cmVhbSwgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHN0cmVhbSkpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSByZWFkaW5nIGJ5IGFub3RoZXIgcmVhZGVyJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0luaXRpYWxpemUodGhpcywgc3RyZWFtKTtcblx0XHQgICAgICAgICAgICB0aGlzLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlIGZ1bGZpbGxlZCB3aGVuIHRoZSBzdHJlYW0gYmVjb21lcyBjbG9zZWQsXG5cdFx0ICAgICAgICAgKiBvciByZWplY3RlZCBpZiB0aGUgc3RyZWFtIGV2ZXIgZXJyb3JzIG9yIHRoZSByZWFkZXIncyBsb2NrIGlzIHJlbGVhc2VkIGJlZm9yZSB0aGUgc3RyZWFtIGZpbmlzaGVzIGNsb3NpbmcuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBjbG9zZWQoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2xvc2VkJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkUHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogSWYgdGhlIHJlYWRlciBpcyBhY3RpdmUsIGJlaGF2ZXMgdGhlIHNhbWUgYXMge0BsaW5rIFJlYWRhYmxlU3RyZWFtLmNhbmNlbCB8IHN0cmVhbS5jYW5jZWwocmVhc29uKX0uXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGNhbmNlbChyZWFzb24gPSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjYW5jZWwnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgocmVhZGVyTG9ja0V4Y2VwdGlvbignY2FuY2VsJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljQ2FuY2VsKHRoaXMsIHJlYXNvbik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgYWxsb3dzIGFjY2VzcyB0byB0aGUgbmV4dCBjaHVuayBmcm9tIHRoZSBzdHJlYW0ncyBpbnRlcm5hbCBxdWV1ZSwgaWYgYXZhaWxhYmxlLlxuXHRcdCAgICAgICAgICpcblx0XHQgICAgICAgICAqIElmIHJlYWRpbmcgYSBjaHVuayBjYXVzZXMgdGhlIHF1ZXVlIHRvIGJlY29tZSBlbXB0eSwgbW9yZSBkYXRhIHdpbGwgYmUgcHVsbGVkIGZyb20gdGhlIHVuZGVybHlpbmcgc291cmNlLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICByZWFkKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFJlYWRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ3JlYWQnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgocmVhZGVyTG9ja0V4Y2VwdGlvbigncmVhZCBmcm9tJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cdFx0ICAgICAgICAgICAgbGV0IHJlamVjdFByb21pc2U7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ld1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG5cdFx0ICAgICAgICAgICAgICAgIHJlamVjdFByb21pc2UgPSByZWplY3Q7XG5cdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmVhZFJlcXVlc3QgPSB7XG5cdFx0ICAgICAgICAgICAgICAgIF9jaHVua1N0ZXBzOiBjaHVuayA9PiByZXNvbHZlUHJvbWlzZSh7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSksXG5cdFx0ICAgICAgICAgICAgICAgIF9jbG9zZVN0ZXBzOiAoKSA9PiByZXNvbHZlUHJvbWlzZSh7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSksXG5cdFx0ICAgICAgICAgICAgICAgIF9lcnJvclN0ZXBzOiBlID0+IHJlamVjdFByb21pc2UoZSlcblx0XHQgICAgICAgICAgICB9O1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlYWQodGhpcywgcmVhZFJlcXVlc3QpO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBSZWxlYXNlcyB0aGUgcmVhZGVyJ3MgbG9jayBvbiB0aGUgY29ycmVzcG9uZGluZyBzdHJlYW0uIEFmdGVyIHRoZSBsb2NrIGlzIHJlbGVhc2VkLCB0aGUgcmVhZGVyIGlzIG5vIGxvbmdlciBhY3RpdmUuXG5cdFx0ICAgICAgICAgKiBJZiB0aGUgYXNzb2NpYXRlZCBzdHJlYW0gaXMgZXJyb3JlZCB3aGVuIHRoZSBsb2NrIGlzIHJlbGVhc2VkLCB0aGUgcmVhZGVyIHdpbGwgYXBwZWFyIGVycm9yZWQgaW4gdGhlIHNhbWUgd2F5XG5cdFx0ICAgICAgICAgKiBmcm9tIG5vdyBvbjsgb3RoZXJ3aXNlLCB0aGUgcmVhZGVyIHdpbGwgYXBwZWFyIGNsb3NlZC5cblx0XHQgICAgICAgICAqXG5cdFx0ICAgICAgICAgKiBBIHJlYWRlcidzIGxvY2sgY2Fubm90IGJlIHJlbGVhc2VkIHdoaWxlIGl0IHN0aWxsIGhhcyBhIHBlbmRpbmcgcmVhZCByZXF1ZXN0LCBpLmUuLCBpZiBhIHByb21pc2UgcmV0dXJuZWQgYnlcblx0XHQgICAgICAgICAqIHRoZSByZWFkZXIncyB7QGxpbmsgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnJlYWQgfCByZWFkKCl9IG1ldGhvZCBoYXMgbm90IHlldCBiZWVuIHNldHRsZWQuIEF0dGVtcHRpbmcgdG9cblx0XHQgICAgICAgICAqIGRvIHNvIHdpbGwgdGhyb3cgYSBgVHlwZUVycm9yYCBhbmQgbGVhdmUgdGhlIHJlYWRlciBsb2NrZWQgdG8gdGhlIHN0cmVhbS5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgcmVsZWFzZUxvY2soKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVsZWFzZUxvY2snKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9yZWFkUmVxdWVzdHMubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUcmllZCB0byByZWxlYXNlIGEgcmVhZGVyIGxvY2sgd2hlbiB0aGF0IHJlYWRlciBoYXMgcGVuZGluZyByZWFkKCkgY2FsbHMgdW4tc2V0dGxlZCcpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNSZWxlYXNlKHRoaXMpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5wcm90b3R5cGUsIHtcblx0XHQgICAgICAgIGNhbmNlbDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICByZWFkOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHJlbGVhc2VMb2NrOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGNsb3NlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcblx0XHQgICAgICAgICAgICB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcicsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBBYnN0cmFjdCBvcGVyYXRpb25zIGZvciB0aGUgcmVhZGVycy5cblx0XHQgICAgZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX3JlYWRSZXF1ZXN0cycpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXI7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZChyZWFkZXIsIHJlYWRSZXF1ZXN0KSB7XG5cdFx0ICAgICAgICBjb25zdCBzdHJlYW0gPSByZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW07XG5cdFx0ICAgICAgICBzdHJlYW0uX2Rpc3R1cmJlZCA9IHRydWU7XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcblx0XHQgICAgICAgICAgICByZWFkUmVxdWVzdC5fY2xvc2VTdGVwcygpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZWxzZSBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmVhZFJlcXVlc3QuX2Vycm9yU3RlcHMoc3RyZWFtLl9zdG9yZWRFcnJvcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICBzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltQdWxsU3RlcHNdKHJlYWRSZXF1ZXN0KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICAvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciB0aGUgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLlxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZS4ke25hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJgKTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8vLyA8cmVmZXJlbmNlIGxpYj1cImVzMjAxOC5hc3luY2l0ZXJhYmxlXCIgLz5cblx0XHQgICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG5cdFx0ICAgIGNvbnN0IEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKGFzeW5jIGZ1bmN0aW9uKiAoKSB7IH0pLnByb3RvdHlwZSk7XG5cblx0XHQgICAgLy8vIDxyZWZlcmVuY2UgbGliPVwiZXMyMDE4LmFzeW5jaXRlcmFibGVcIiAvPlxuXHRcdCAgICBjbGFzcyBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsIHtcblx0XHQgICAgICAgIGNvbnN0cnVjdG9yKHJlYWRlciwgcHJldmVudENhbmNlbCkge1xuXHRcdCAgICAgICAgICAgIHRoaXMuX29uZ29pbmdQcm9taXNlID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgICAgIHRoaXMuX2lzRmluaXNoZWQgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICB0aGlzLl9yZWFkZXIgPSByZWFkZXI7XG5cdFx0ICAgICAgICAgICAgdGhpcy5fcHJldmVudENhbmNlbCA9IHByZXZlbnRDYW5jZWw7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBuZXh0KCkge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IG5leHRTdGVwcyA9ICgpID0+IHRoaXMuX25leHRTdGVwcygpO1xuXHRcdCAgICAgICAgICAgIHRoaXMuX29uZ29pbmdQcm9taXNlID0gdGhpcy5fb25nb2luZ1Byb21pc2UgP1xuXHRcdCAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Qcm9taXNlV2l0aCh0aGlzLl9vbmdvaW5nUHJvbWlzZSwgbmV4dFN0ZXBzLCBuZXh0U3RlcHMpIDpcblx0XHQgICAgICAgICAgICAgICAgbmV4dFN0ZXBzKCk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uZ29pbmdQcm9taXNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuKHZhbHVlKSB7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmV0dXJuU3RlcHMgPSAoKSA9PiB0aGlzLl9yZXR1cm5TdGVwcyh2YWx1ZSk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uZ29pbmdQcm9taXNlID9cblx0XHQgICAgICAgICAgICAgICAgdHJhbnNmb3JtUHJvbWlzZVdpdGgodGhpcy5fb25nb2luZ1Byb21pc2UsIHJldHVyblN0ZXBzLCByZXR1cm5TdGVwcykgOlxuXHRcdCAgICAgICAgICAgICAgICByZXR1cm5TdGVwcygpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgX25leHRTdGVwcygpIHtcblx0XHQgICAgICAgICAgICBpZiAodGhpcy5faXNGaW5pc2hlZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gdGhpcy5fcmVhZGVyO1xuXHRcdCAgICAgICAgICAgIGlmIChyZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdpdGVyYXRlJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cdFx0ICAgICAgICAgICAgbGV0IHJlamVjdFByb21pc2U7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ld1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG5cdFx0ICAgICAgICAgICAgICAgIHJlamVjdFByb21pc2UgPSByZWplY3Q7XG5cdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmVhZFJlcXVlc3QgPSB7XG5cdFx0ICAgICAgICAgICAgICAgIF9jaHVua1N0ZXBzOiBjaHVuayA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbmdvaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgZGVsYXllZCBieSBvbmUgbWljcm90YXNrLCBvdGhlcndpc2Ugd2Ugc3RvcCBwdWxsaW5nIHRvbyBlYXJseSB3aGljaCBicmVha3MgYSB0ZXN0LlxuXHRcdCAgICAgICAgICAgICAgICAgICAgLy8gRklYTUUgSXMgdGhpcyBhIGJ1ZyBpbiB0aGUgc3BlY2lmaWNhdGlvbiwgb3IgaW4gdGhlIHRlc3Q/XG5cdFx0ICAgICAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiByZXNvbHZlUHJvbWlzZSh7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSkpO1xuXHRcdCAgICAgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgICAgICBfY2xvc2VTdGVwczogKCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25nb2luZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0ZpbmlzaGVkID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KTtcblx0XHQgICAgICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICAgICAgX2Vycm9yU3RlcHM6IHJlYXNvbiA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbmdvaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzRmluaXNoZWQgPSB0cnVlO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZShyZWFkZXIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmVqZWN0UHJvbWlzZShyZWFzb24pO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJSZWFkKHJlYWRlciwgcmVhZFJlcXVlc3QpO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgX3JldHVyblN0ZXBzKHZhbHVlKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKHRoaXMuX2lzRmluaXNoZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHZhbHVlLCBkb25lOiB0cnVlIH0pO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB0aGlzLl9pc0ZpbmlzaGVkID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICBjb25zdCByZWFkZXIgPSB0aGlzLl9yZWFkZXI7XG5cdFx0ICAgICAgICAgICAgaWYgKHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHJlYWRlckxvY2tFeGNlcHRpb24oJ2ZpbmlzaCBpdGVyYXRpbmcnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICghdGhpcy5fcHJldmVudENhbmNlbCkge1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNDYW5jZWwocmVhZGVyLCB2YWx1ZSk7XG5cdFx0ICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVByb21pc2VXaXRoKHJlc3VsdCwgKCkgPT4gKHsgdmFsdWUsIGRvbmU6IHRydWUgfSkpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNSZWxlYXNlKHJlYWRlcik7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgoeyB2YWx1ZSwgZG9uZTogdHJ1ZSB9KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBjb25zdCBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSB7XG5cdFx0ICAgICAgICBuZXh0KCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQXN5bmNJdGVyYXRvckJyYW5kQ2hlY2tFeGNlcHRpb24oJ25leHQnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9hc3luY0l0ZXJhdG9ySW1wbC5uZXh0KCk7XG5cdFx0ICAgICAgICB9LFxuXHRcdCAgICAgICAgcmV0dXJuKHZhbHVlKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1Bc3luY0l0ZXJhdG9yQnJhbmRDaGVja0V4Y2VwdGlvbigncmV0dXJuJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXN5bmNJdGVyYXRvckltcGwucmV0dXJuKHZhbHVlKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfTtcblx0XHQgICAgaWYgKEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgQXN5bmNJdGVyYXRvclByb3RvdHlwZSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gQWJzdHJhY3Qgb3BlcmF0aW9ucyBmb3IgdGhlIFJlYWRhYmxlU3RyZWFtLlxuXHRcdCAgICBmdW5jdGlvbiBBY3F1aXJlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHN0cmVhbSwgcHJldmVudENhbmNlbCkge1xuXHRcdCAgICAgICAgY29uc3QgcmVhZGVyID0gQWNxdWlyZVJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzdHJlYW0pO1xuXHRcdCAgICAgICAgY29uc3QgaW1wbCA9IG5ldyBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsKHJlYWRlciwgcHJldmVudENhbmNlbCk7XG5cdFx0ICAgICAgICBjb25zdCBpdGVyYXRvciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlKTtcblx0XHQgICAgICAgIGl0ZXJhdG9yLl9hc3luY0l0ZXJhdG9ySW1wbCA9IGltcGw7XG5cdFx0ICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IoeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2FzeW5jSXRlcmF0b3JJbXBsJykpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB0cnkge1xuXHRcdCAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBTdXNwaWNpb3VzVHlwZU9mR3VhcmRcblx0XHQgICAgICAgICAgICByZXR1cm4geC5fYXN5bmNJdGVyYXRvckltcGwgaW5zdGFuY2VvZlxuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY2F0Y2ggKF9hKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSBSZWFkYWJsZVN0cmVhbS5cblx0XHQgICAgZnVuY3Rpb24gc3RyZWFtQXN5bmNJdGVyYXRvckJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvci4ke25hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0ZWFtQXN5bmNJdGVyYXRvcmApO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLy8vIDxyZWZlcmVuY2UgbGliPVwiZXMyMDE1LmNvcmVcIiAvPlxuXHRcdCAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvaXNOYU4jUG9seWZpbGxcblx0XHQgICAgY29uc3QgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKHgpIHtcblx0XHQgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcblx0XHQgICAgICAgIHJldHVybiB4ICE9PSB4O1xuXHRcdCAgICB9O1xuXG5cdFx0ICAgIGZ1bmN0aW9uIENyZWF0ZUFycmF5RnJvbUxpc3QoZWxlbWVudHMpIHtcblx0XHQgICAgICAgIC8vIFdlIHVzZSBhcnJheXMgdG8gcmVwcmVzZW50IGxpc3RzLCBzbyB0aGlzIGlzIGJhc2ljYWxseSBhIG5vLW9wLlxuXHRcdCAgICAgICAgLy8gRG8gYSBzbGljZSB0aG91Z2gganVzdCBpbiBjYXNlIHdlIGhhcHBlbiB0byBkZXBlbmQgb24gdGhlIHVuaXF1ZS1uZXNzLlxuXHRcdCAgICAgICAgcmV0dXJuIGVsZW1lbnRzLnNsaWNlKCk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gQ29weURhdGFCbG9ja0J5dGVzKGRlc3QsIGRlc3RPZmZzZXQsIHNyYywgc3JjT2Zmc2V0LCBuKSB7XG5cdFx0ICAgICAgICBuZXcgVWludDhBcnJheShkZXN0KS5zZXQobmV3IFVpbnQ4QXJyYXkoc3JjLCBzcmNPZmZzZXQsIG4pLCBkZXN0T2Zmc2V0KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBOb3QgaW1wbGVtZW50ZWQgY29ycmVjdGx5XG5cdFx0ICAgIGZ1bmN0aW9uIFRyYW5zZmVyQXJyYXlCdWZmZXIoTykge1xuXHRcdCAgICAgICAgcmV0dXJuIE87XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gTm90IGltcGxlbWVudGVkIGNvcnJlY3RseVxuXHRcdCAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5cdFx0ICAgIGZ1bmN0aW9uIElzRGV0YWNoZWRCdWZmZXIoTykge1xuXHRcdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIEFycmF5QnVmZmVyU2xpY2UoYnVmZmVyLCBiZWdpbiwgZW5kKSB7XG5cdFx0ICAgICAgICAvLyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IGF2YWlsYWJsZSBvbiBJRTEwXG5cdFx0ICAgICAgICAvLyBodHRwczovL3d3dy5jYW5pdXNlLmNvbS9tZG4tamF2YXNjcmlwdF9idWlsdGluc19hcnJheWJ1ZmZlcl9zbGljZVxuXHRcdCAgICAgICAgaWYgKGJ1ZmZlci5zbGljZSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoYmVnaW4sIGVuZCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBsZW5ndGggPSBlbmQgLSBiZWdpbjtcblx0XHQgICAgICAgIGNvbnN0IHNsaWNlID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XG5cdFx0ICAgICAgICBDb3B5RGF0YUJsb2NrQnl0ZXMoc2xpY2UsIDAsIGJ1ZmZlciwgYmVnaW4sIGxlbmd0aCk7XG5cdFx0ICAgICAgICByZXR1cm4gc2xpY2U7XG5cdFx0ICAgIH1cblxuXHRcdCAgICBmdW5jdGlvbiBJc05vbk5lZ2F0aXZlTnVtYmVyKHYpIHtcblx0XHQgICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ251bWJlcicpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoTnVtYmVySXNOYU4odikpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAodiA8IDApIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBDbG9uZUFzVWludDhBcnJheShPKSB7XG5cdFx0ICAgICAgICBjb25zdCBidWZmZXIgPSBBcnJheUJ1ZmZlclNsaWNlKE8uYnVmZmVyLCBPLmJ5dGVPZmZzZXQsIE8uYnl0ZU9mZnNldCArIE8uYnl0ZUxlbmd0aCk7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIGZ1bmN0aW9uIERlcXVldWVWYWx1ZShjb250YWluZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHBhaXIgPSBjb250YWluZXIuX3F1ZXVlLnNoaWZ0KCk7XG5cdFx0ICAgICAgICBjb250YWluZXIuX3F1ZXVlVG90YWxTaXplIC09IHBhaXIuc2l6ZTtcblx0XHQgICAgICAgIGlmIChjb250YWluZXIuX3F1ZXVlVG90YWxTaXplIDwgMCkge1xuXHRcdCAgICAgICAgICAgIGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgPSAwO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHBhaXIudmFsdWU7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gRW5xdWV1ZVZhbHVlV2l0aFNpemUoY29udGFpbmVyLCB2YWx1ZSwgc2l6ZSkge1xuXHRcdCAgICAgICAgaWYgKCFJc05vbk5lZ2F0aXZlTnVtYmVyKHNpemUpIHx8IHNpemUgPT09IEluZmluaXR5KSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1NpemUgbXVzdCBiZSBhIGZpbml0ZSwgbm9uLU5hTiwgbm9uLW5lZ2F0aXZlIG51bWJlci4nKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnRhaW5lci5fcXVldWUucHVzaCh7IHZhbHVlLCBzaXplIH0pO1xuXHRcdCAgICAgICAgY29udGFpbmVyLl9xdWV1ZVRvdGFsU2l6ZSArPSBzaXplO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFBlZWtRdWV1ZVZhbHVlKGNvbnRhaW5lcikge1xuXHRcdCAgICAgICAgY29uc3QgcGFpciA9IGNvbnRhaW5lci5fcXVldWUucGVlaygpO1xuXHRcdCAgICAgICAgcmV0dXJuIHBhaXIudmFsdWU7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVzZXRRdWV1ZShjb250YWluZXIpIHtcblx0XHQgICAgICAgIGNvbnRhaW5lci5fcXVldWUgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgPSAwO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEEgcHVsbC1pbnRvIHJlcXVlc3QgaW4gYSB7QGxpbmsgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcn0uXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3Qge1xuXHRcdCAgICAgICAgY29uc3RydWN0b3IoKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBjb25zdHJ1Y3RvcicpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBSZXR1cm5zIHRoZSB2aWV3IGZvciB3cml0aW5nIGluIHRvLCBvciBgbnVsbGAgaWYgdGhlIEJZT0IgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuIHJlc3BvbmRlZCB0by5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0IHZpZXcoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgYnlvYlJlcXVlc3RCcmFuZENoZWNrRXhjZXB0aW9uKCd2aWV3Jyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiB0aGlzLl92aWV3O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmVzcG9uZChieXRlc1dyaXR0ZW4pIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24oJ3Jlc3BvbmQnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgYXNzZXJ0UmVxdWlyZWRBcmd1bWVudChieXRlc1dyaXR0ZW4sIDEsICdyZXNwb25kJyk7XG5cdFx0ICAgICAgICAgICAgYnl0ZXNXcml0dGVuID0gY29udmVydFVuc2lnbmVkTG9uZ0xvbmdXaXRoRW5mb3JjZVJhbmdlKGJ5dGVzV3JpdHRlbiwgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXMgQllPQiByZXF1ZXN0IGhhcyBiZWVuIGludmFsaWRhdGVkJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmIChJc0RldGFjaGVkQnVmZmVyKHRoaXMuX3ZpZXcuYnVmZmVyKSkgO1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kKHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLCBieXRlc1dyaXR0ZW4pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmVzcG9uZFdpdGhOZXdWaWV3KHZpZXcpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24oJ3Jlc3BvbmRXaXRoTmV3VmlldycpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBhc3NlcnRSZXF1aXJlZEFyZ3VtZW50KHZpZXcsIDEsICdyZXNwb25kV2l0aE5ld1ZpZXcnKTtcblx0XHQgICAgICAgICAgICBpZiAoIUFycmF5QnVmZmVyLmlzVmlldyh2aWV3KSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgY2FuIG9ubHkgcmVzcG9uZCB3aXRoIGFycmF5IGJ1ZmZlciB2aWV3cycpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAodGhpcy5fYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZCcpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAoSXNEZXRhY2hlZEJ1ZmZlcih2aWV3LmJ1ZmZlcikpIDtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZFdpdGhOZXdWaWV3KHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLCB2aWV3KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZSwge1xuXHRcdCAgICAgICAgcmVzcG9uZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICByZXNwb25kV2l0aE5ld1ZpZXc6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgdmlldzogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG5cdFx0ICAgICAgICAgICAgdmFsdWU6ICdSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0Jyxcblx0XHQgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBBbGxvd3MgY29udHJvbCBvZiBhIHtAbGluayBSZWFkYWJsZVN0cmVhbSB8IHJlYWRhYmxlIGJ5dGUgc3RyZWFtfSdzIHN0YXRlIGFuZCBpbnRlcm5hbCBxdWV1ZS5cblx0XHQgICAgICpcblx0XHQgICAgICogQHB1YmxpY1xuXHRcdCAgICAgKi9cblx0XHQgICAgY2xhc3MgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcigpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIGNvbnN0cnVjdG9yJyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgQllPQiBwdWxsIHJlcXVlc3QsIG9yIGBudWxsYCBpZiB0aGVyZSBpc24ndCBvbmUuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBieW9iUmVxdWVzdCgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBieXRlU3RyZWFtQ29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2J5b2JSZXF1ZXN0Jyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyR2V0QllPQlJlcXVlc3QodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIFJldHVybnMgdGhlIGRlc2lyZWQgc2l6ZSB0byBmaWxsIHRoZSBjb250cm9sbGVkIHN0cmVhbSdzIGludGVybmFsIHF1ZXVlLiBJdCBjYW4gYmUgbmVnYXRpdmUsIGlmIHRoZSBxdWV1ZSBpc1xuXHRcdCAgICAgICAgICogb3Zlci1mdWxsLiBBbiB1bmRlcmx5aW5nIGJ5dGUgc291cmNlIG91Z2h0IHRvIHVzZSB0aGlzIGluZm9ybWF0aW9uIHRvIGRldGVybWluZSB3aGVuIGFuZCBob3cgdG8gYXBwbHkgYmFja3ByZXNzdXJlLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBnZXQgZGVzaXJlZFNpemUoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplKHRoaXMpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBDbG9zZXMgdGhlIGNvbnRyb2xsZWQgcmVhZGFibGUgc3RyZWFtLiBDb25zdW1lcnMgd2lsbCBzdGlsbCBiZSBhYmxlIHRvIHJlYWQgYW55IHByZXZpb3VzbHktZW5xdWV1ZWQgY2h1bmtzIGZyb21cblx0XHQgICAgICAgICAqIHRoZSBzdHJlYW0sIGJ1dCBvbmNlIHRob3NlIGFyZSByZWFkLCB0aGUgc3RyZWFtIHdpbGwgYmVjb21lIGNsb3NlZC5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgY2xvc2UoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VSZXF1ZXN0ZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZDsgZG8gbm90IGNsb3NlIGl0IGFnYWluIScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3N0YXRlO1xuXHRcdCAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gJ3JlYWRhYmxlJykge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgc3RyZWFtIChpbiAke3N0YXRlfSBzdGF0ZSkgaXMgbm90IGluIHRoZSByZWFkYWJsZSBzdGF0ZSBhbmQgY2Fubm90IGJlIGNsb3NlZGApO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xvc2UodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbnF1ZXVlKGNodW5rKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdlbnF1ZXVlJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQoY2h1bmssIDEsICdlbnF1ZXVlJyk7XG5cdFx0ICAgICAgICAgICAgaWYgKCFBcnJheUJ1ZmZlci5pc1ZpZXcoY2h1bmspKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NodW5rIG11c3QgYmUgYW4gYXJyYXkgYnVmZmVyIHZpZXcnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggPT09IDApIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2h1bmsgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGgnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKGNodW5rLmJ1ZmZlci5ieXRlTGVuZ3RoID09PSAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGNodW5rJ3MgYnVmZmVyIG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoYCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9jbG9zZVJlcXVlc3RlZCkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdHJlYW0gaXMgY2xvc2VkIG9yIGRyYWluaW5nJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICAgICAgaWYgKHN0YXRlICE9PSAncmVhZGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBzdHJlYW0gKGluICR7c3RhdGV9IHN0YXRlKSBpcyBub3QgaW4gdGhlIHJlYWRhYmxlIHN0YXRlIGFuZCBjYW5ub3QgYmUgZW5xdWV1ZWQgdG9gKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWUodGhpcywgY2h1bmspO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBFcnJvcnMgdGhlIGNvbnRyb2xsZWQgcmVhZGFibGUgc3RyZWFtLCBtYWtpbmcgYWxsIGZ1dHVyZSBpbnRlcmFjdGlvbnMgd2l0aCBpdCBmYWlsIHdpdGggdGhlIGdpdmVuIGVycm9yIGBlYC5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZXJyb3IoZSA9IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGJ5dGVTdHJlYW1Db250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZXJyb3InKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKHRoaXMsIGUpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuXHRcdCAgICAgICAgW0NhbmNlbFN0ZXBzXShyZWFzb24pIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJQZW5kaW5nUHVsbEludG9zKHRoaXMpO1xuXHRcdCAgICAgICAgICAgIFJlc2V0UXVldWUodGhpcyk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fY2FuY2VsQWxnb3JpdGhtKHJlYXNvbik7XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTtcblx0XHQgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuXHRcdCAgICAgICAgW1B1bGxTdGVwc10ocmVhZFJlcXVlc3QpIHtcblx0XHQgICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO1xuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9xdWV1ZVRvdGFsU2l6ZSA+IDApIHtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZVRvdGFsU2l6ZSAtPSBlbnRyeS5ieXRlTGVuZ3RoO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbih0aGlzKTtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGVudHJ5LmJ1ZmZlciwgZW50cnkuYnl0ZU9mZnNldCwgZW50cnkuYnl0ZUxlbmd0aCk7XG5cdFx0ICAgICAgICAgICAgICAgIHJlYWRSZXF1ZXN0Ll9jaHVua1N0ZXBzKHZpZXcpO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNvbnN0IGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSA9IHRoaXMuX2F1dG9BbGxvY2F0ZUNodW5rU2l6ZTtcblx0XHQgICAgICAgICAgICBpZiAoYXV0b0FsbG9jYXRlQ2h1bmtTaXplICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgbGV0IGJ1ZmZlcjtcblx0XHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihhdXRvQWxsb2NhdGVDaHVua1NpemUpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGNhdGNoIChidWZmZXJFKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZWFkUmVxdWVzdC5fZXJyb3JTdGVwcyhidWZmZXJFKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBwdWxsSW50b0Rlc2NyaXB0b3IgPSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBidWZmZXIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICBidWZmZXJCeXRlTGVuZ3RoOiBhdXRvQWxsb2NhdGVDaHVua1NpemUsXG5cdFx0ICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0OiAwLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgYnl0ZUxlbmd0aDogYXV0b0FsbG9jYXRlQ2h1bmtTaXplLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgYnl0ZXNGaWxsZWQ6IDAsXG5cdFx0ICAgICAgICAgICAgICAgICAgICBlbGVtZW50U2l6ZTogMSxcblx0XHQgICAgICAgICAgICAgICAgICAgIHZpZXdDb25zdHJ1Y3RvcjogVWludDhBcnJheSxcblx0XHQgICAgICAgICAgICAgICAgICAgIHJlYWRlclR5cGU6ICdkZWZhdWx0J1xuXHRcdCAgICAgICAgICAgICAgICB9O1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nUHVsbEludG9zLnB1c2gocHVsbEludG9EZXNjcmlwdG9yKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1BZGRSZWFkUmVxdWVzdChzdHJlYW0sIHJlYWRSZXF1ZXN0KTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCh0aGlzKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZSwge1xuXHRcdCAgICAgICAgY2xvc2U6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgZW5xdWV1ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBlcnJvcjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBieW9iUmVxdWVzdDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBkZXNpcmVkU2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG5cdFx0ICAgICAgICAgICAgdmFsdWU6ICdSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyJyxcblx0XHQgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEFic3RyYWN0IG9wZXJhdGlvbnMgZm9yIHRoZSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLlxuXHRcdCAgICBmdW5jdGlvbiBJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0nKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcjtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QoeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyJykpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3Q7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgY29uc3Qgc2hvdWxkUHVsbCA9IFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJTaG91bGRDYWxsUHVsbChjb250cm9sbGVyKTtcblx0XHQgICAgICAgIGlmICghc2hvdWxkUHVsbCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9wdWxsaW5nKSB7XG5cdFx0ICAgICAgICAgICAgY29udHJvbGxlci5fcHVsbEFnYWluID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9wdWxsaW5nID0gdHJ1ZTtcblx0XHQgICAgICAgIC8vIFRPRE86IFRlc3QgY29udHJvbGxlciBhcmd1bWVudFxuXHRcdCAgICAgICAgY29uc3QgcHVsbFByb21pc2UgPSBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtKCk7XG5cdFx0ICAgICAgICB1cG9uUHJvbWlzZShwdWxsUHJvbWlzZSwgKCkgPT4ge1xuXHRcdCAgICAgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICBpZiAoY29udHJvbGxlci5fcHVsbEFnYWluKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9LCBlID0+IHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJQZW5kaW5nUHVsbEludG9zKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJJbnZhbGlkYXRlQllPQlJlcXVlc3QoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zID0gbmV3IFNpbXBsZVF1ZXVlKCk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcihzdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcikge1xuXHRcdCAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykge1xuXHRcdCAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY29uc3QgZmlsbGVkVmlldyA9IFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb252ZXJ0UHVsbEludG9EZXNjcmlwdG9yKHB1bGxJbnRvRGVzY3JpcHRvcik7XG5cdFx0ICAgICAgICBpZiAocHVsbEludG9EZXNjcmlwdG9yLnJlYWRlclR5cGUgPT09ICdkZWZhdWx0Jykge1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtRnVsZmlsbFJlYWRSZXF1ZXN0KHN0cmVhbSwgZmlsbGVkVmlldywgZG9uZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbUZ1bGZpbGxSZWFkSW50b1JlcXVlc3Qoc3RyZWFtLCBmaWxsZWRWaWV3LCBkb25lKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvcihwdWxsSW50b0Rlc2NyaXB0b3IpIHtcblx0XHQgICAgICAgIGNvbnN0IGJ5dGVzRmlsbGVkID0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkO1xuXHRcdCAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSBwdWxsSW50b0Rlc2NyaXB0b3IuZWxlbWVudFNpemU7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IHB1bGxJbnRvRGVzY3JpcHRvci52aWV3Q29uc3RydWN0b3IocHVsbEludG9EZXNjcmlwdG9yLmJ1ZmZlciwgcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVPZmZzZXQsIGJ5dGVzRmlsbGVkIC8gZWxlbWVudFNpemUpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlQ2h1bmtUb1F1ZXVlKGNvbnRyb2xsZXIsIGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fcXVldWUucHVzaCh7IGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCB9KTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplICs9IGJ5dGVMZW5ndGg7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxQdWxsSW50b0Rlc2NyaXB0b3JGcm9tUXVldWUoY29udHJvbGxlciwgcHVsbEludG9EZXNjcmlwdG9yKSB7XG5cdFx0ICAgICAgICBjb25zdCBlbGVtZW50U2l6ZSA9IHB1bGxJbnRvRGVzY3JpcHRvci5lbGVtZW50U2l6ZTtcblx0XHQgICAgICAgIGNvbnN0IGN1cnJlbnRBbGlnbmVkQnl0ZXMgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgLSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgJSBlbGVtZW50U2l6ZTtcblx0XHQgICAgICAgIGNvbnN0IG1heEJ5dGVzVG9Db3B5ID0gTWF0aC5taW4oY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUsIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlTGVuZ3RoIC0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkKTtcblx0XHQgICAgICAgIGNvbnN0IG1heEJ5dGVzRmlsbGVkID0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkICsgbWF4Qnl0ZXNUb0NvcHk7XG5cdFx0ICAgICAgICBjb25zdCBtYXhBbGlnbmVkQnl0ZXMgPSBtYXhCeXRlc0ZpbGxlZCAtIG1heEJ5dGVzRmlsbGVkICUgZWxlbWVudFNpemU7XG5cdFx0ICAgICAgICBsZXQgdG90YWxCeXRlc1RvQ29weVJlbWFpbmluZyA9IG1heEJ5dGVzVG9Db3B5O1xuXHRcdCAgICAgICAgbGV0IHJlYWR5ID0gZmFsc2U7XG5cdFx0ICAgICAgICBpZiAobWF4QWxpZ25lZEJ5dGVzID4gY3VycmVudEFsaWduZWRCeXRlcykge1xuXHRcdCAgICAgICAgICAgIHRvdGFsQnl0ZXNUb0NvcHlSZW1haW5pbmcgPSBtYXhBbGlnbmVkQnl0ZXMgLSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQ7XG5cdFx0ICAgICAgICAgICAgcmVhZHkgPSB0cnVlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY29uc3QgcXVldWUgPSBjb250cm9sbGVyLl9xdWV1ZTtcblx0XHQgICAgICAgIHdoaWxlICh0b3RhbEJ5dGVzVG9Db3B5UmVtYWluaW5nID4gMCkge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGhlYWRPZlF1ZXVlID0gcXVldWUucGVlaygpO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGJ5dGVzVG9Db3B5ID0gTWF0aC5taW4odG90YWxCeXRlc1RvQ29weVJlbWFpbmluZywgaGVhZE9mUXVldWUuYnl0ZUxlbmd0aCk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgZGVzdFN0YXJ0ID0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVPZmZzZXQgKyBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQ7XG5cdFx0ICAgICAgICAgICAgQ29weURhdGFCbG9ja0J5dGVzKHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIsIGRlc3RTdGFydCwgaGVhZE9mUXVldWUuYnVmZmVyLCBoZWFkT2ZRdWV1ZS5ieXRlT2Zmc2V0LCBieXRlc1RvQ29weSk7XG5cdFx0ICAgICAgICAgICAgaWYgKGhlYWRPZlF1ZXVlLmJ5dGVMZW5ndGggPT09IGJ5dGVzVG9Db3B5KSB7XG5cdFx0ICAgICAgICAgICAgICAgIHF1ZXVlLnNoaWZ0KCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBoZWFkT2ZRdWV1ZS5ieXRlT2Zmc2V0ICs9IGJ5dGVzVG9Db3B5O1xuXHRcdCAgICAgICAgICAgICAgICBoZWFkT2ZRdWV1ZS5ieXRlTGVuZ3RoIC09IGJ5dGVzVG9Db3B5O1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSAtPSBieXRlc1RvQ29weTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbEhlYWRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlciwgYnl0ZXNUb0NvcHksIHB1bGxJbnRvRGVzY3JpcHRvcik7XG5cdFx0ICAgICAgICAgICAgdG90YWxCeXRlc1RvQ29weVJlbWFpbmluZyAtPSBieXRlc1RvQ29weTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiByZWFkeTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbEhlYWRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlciwgc2l6ZSwgcHVsbEludG9EZXNjcmlwdG9yKSB7XG5cdFx0ICAgICAgICBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgKz0gc2l6ZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbihjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPT09IDAgJiYgY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQpIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtQ2xvc2UoY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySW52YWxpZGF0ZUJZT0JSZXF1ZXN0KGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9ieW9iUmVxdWVzdCA9PT0gbnVsbCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0Ll9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0Ll92aWV3ID0gbnVsbDtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0ID0gbnVsbDtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHJvY2Vzc1B1bGxJbnRvRGVzY3JpcHRvcnNVc2luZ1F1ZXVlKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIHdoaWxlIChjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aCA+IDApIHtcblx0XHQgICAgICAgICAgICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPT09IDApIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBwdWxsSW50b0Rlc2NyaXB0b3IgPSBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtcblx0XHQgICAgICAgICAgICBpZiAoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxQdWxsSW50b0Rlc2NyaXB0b3JGcm9tUXVldWUoY29udHJvbGxlciwgcHVsbEludG9EZXNjcmlwdG9yKSkge1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcik7XG5cdFx0ICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb21taXRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSwgcHVsbEludG9EZXNjcmlwdG9yKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclB1bGxJbnRvKGNvbnRyb2xsZXIsIHZpZXcsIHJlYWRJbnRvUmVxdWVzdCkge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtcblx0XHQgICAgICAgIGxldCBlbGVtZW50U2l6ZSA9IDE7XG5cdFx0ICAgICAgICBpZiAodmlldy5jb25zdHJ1Y3RvciAhPT0gRGF0YVZpZXcpIHtcblx0XHQgICAgICAgICAgICBlbGVtZW50U2l6ZSA9IHZpZXcuY29uc3RydWN0b3IuQllURVNfUEVSX0VMRU1FTlQ7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBjdG9yID0gdmlldy5jb25zdHJ1Y3Rvcjtcblx0XHQgICAgICAgIC8vIHRyeSB7XG5cdFx0ICAgICAgICBjb25zdCBidWZmZXIgPSBUcmFuc2ZlckFycmF5QnVmZmVyKHZpZXcuYnVmZmVyKTtcblx0XHQgICAgICAgIC8vIH0gY2F0Y2ggKGUpIHtcblx0XHQgICAgICAgIC8vICAgcmVhZEludG9SZXF1ZXN0Ll9lcnJvclN0ZXBzKGUpO1xuXHRcdCAgICAgICAgLy8gICByZXR1cm47XG5cdFx0ICAgICAgICAvLyB9XG5cdFx0ICAgICAgICBjb25zdCBwdWxsSW50b0Rlc2NyaXB0b3IgPSB7XG5cdFx0ICAgICAgICAgICAgYnVmZmVyLFxuXHRcdCAgICAgICAgICAgIGJ1ZmZlckJ5dGVMZW5ndGg6IGJ1ZmZlci5ieXRlTGVuZ3RoLFxuXHRcdCAgICAgICAgICAgIGJ5dGVPZmZzZXQ6IHZpZXcuYnl0ZU9mZnNldCxcblx0XHQgICAgICAgICAgICBieXRlTGVuZ3RoOiB2aWV3LmJ5dGVMZW5ndGgsXG5cdFx0ICAgICAgICAgICAgYnl0ZXNGaWxsZWQ6IDAsXG5cdFx0ICAgICAgICAgICAgZWxlbWVudFNpemUsXG5cdFx0ICAgICAgICAgICAgdmlld0NvbnN0cnVjdG9yOiBjdG9yLFxuXHRcdCAgICAgICAgICAgIHJlYWRlclR5cGU6ICdieW9iJ1xuXHRcdCAgICAgICAgfTtcblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aCA+IDApIHtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLnB1c2gocHVsbEludG9EZXNjcmlwdG9yKTtcblx0XHQgICAgICAgICAgICAvLyBObyBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCgpIGNhbGwgc2luY2U6XG5cdFx0ICAgICAgICAgICAgLy8gLSBObyBjaGFuZ2UgaGFwcGVucyBvbiBkZXNpcmVkU2l6ZVxuXHRcdCAgICAgICAgICAgIC8vIC0gVGhlIHNvdXJjZSBoYXMgYWxyZWFkeSBiZWVuIG5vdGlmaWVkIG9mIHRoYXQgdGhlcmUncyBhdCBsZWFzdCAxIHBlbmRpbmcgcmVhZCh2aWV3KVxuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtQWRkUmVhZEludG9SZXF1ZXN0KHN0cmVhbSwgcmVhZEludG9SZXF1ZXN0KTtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcblx0XHQgICAgICAgICAgICBjb25zdCBlbXB0eVZpZXcgPSBuZXcgY3RvcihwdWxsSW50b0Rlc2NyaXB0b3IuYnVmZmVyLCBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZU9mZnNldCwgMCk7XG5cdFx0ICAgICAgICAgICAgcmVhZEludG9SZXF1ZXN0Ll9jbG9zZVN0ZXBzKGVtcHR5Vmlldyk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplID4gMCkge1xuXHRcdCAgICAgICAgICAgIGlmIChSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbFB1bGxJbnRvRGVzY3JpcHRvckZyb21RdWV1ZShjb250cm9sbGVyLCBwdWxsSW50b0Rlc2NyaXB0b3IpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxlZFZpZXcgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvcihwdWxsSW50b0Rlc2NyaXB0b3IpO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbihjb250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICAgICAgcmVhZEludG9SZXF1ZXN0Ll9jaHVua1N0ZXBzKGZpbGxlZFZpZXcpO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmIChjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCkge1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IFR5cGVFcnJvcignSW5zdWZmaWNpZW50IGJ5dGVzIHRvIGZpbGwgZWxlbWVudHMgaW4gdGhlIGdpdmVuIGJ1ZmZlcicpO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG5cdFx0ICAgICAgICAgICAgICAgIHJlYWRJbnRvUmVxdWVzdC5fZXJyb3JTdGVwcyhlKTtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MucHVzaChwdWxsSW50b0Rlc2NyaXB0b3IpO1xuXHRcdCAgICAgICAgUmVhZGFibGVTdHJlYW1BZGRSZWFkSW50b1JlcXVlc3Qoc3RyZWFtLCByZWFkSW50b1JlcXVlc3QpO1xuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbkNsb3NlZFN0YXRlKGNvbnRyb2xsZXIsIGZpcnN0RGVzY3JpcHRvcikge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtcblx0XHQgICAgICAgIGlmIChSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSkge1xuXHRcdCAgICAgICAgICAgIHdoaWxlIChSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRJbnRvUmVxdWVzdHMoc3RyZWFtKSA+IDApIHtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgcHVsbEludG9EZXNjcmlwdG9yID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNoaWZ0UGVuZGluZ1B1bGxJbnRvKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29tbWl0UHVsbEludG9EZXNjcmlwdG9yKHN0cmVhbSwgcHVsbEludG9EZXNjcmlwdG9yKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJblJlYWRhYmxlU3RhdGUoY29udHJvbGxlciwgYnl0ZXNXcml0dGVuLCBwdWxsSW50b0Rlc2NyaXB0b3IpIHtcblx0XHQgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGaWxsSGVhZFB1bGxJbnRvRGVzY3JpcHRvcihjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4sIHB1bGxJbnRvRGVzY3JpcHRvcik7XG5cdFx0ICAgICAgICBpZiAocHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkIDwgcHVsbEludG9EZXNjcmlwdG9yLmVsZW1lbnRTaXplKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNoaWZ0UGVuZGluZ1B1bGxJbnRvKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgY29uc3QgcmVtYWluZGVyU2l6ZSA9IHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCAlIHB1bGxJbnRvRGVzY3JpcHRvci5lbGVtZW50U2l6ZTtcblx0XHQgICAgICAgIGlmIChyZW1haW5kZXJTaXplID4gMCkge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGVuZCA9IHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlT2Zmc2V0ICsgcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHJlbWFpbmRlciA9IEFycmF5QnVmZmVyU2xpY2UocHVsbEludG9EZXNjcmlwdG9yLmJ1ZmZlciwgZW5kIC0gcmVtYWluZGVyU2l6ZSwgZW5kKTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZUNodW5rVG9RdWV1ZShjb250cm9sbGVyLCByZW1haW5kZXIsIDAsIHJlbWFpbmRlci5ieXRlTGVuZ3RoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCAtPSByZW1haW5kZXJTaXplO1xuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcihjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLCBwdWxsSW50b0Rlc2NyaXB0b3IpO1xuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclByb2Nlc3NQdWxsSW50b0Rlc2NyaXB0b3JzVXNpbmdRdWV1ZShjb250cm9sbGVyKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEludGVybmFsKGNvbnRyb2xsZXIsIGJ5dGVzV3JpdHRlbikge1xuXHRcdCAgICAgICAgY29uc3QgZmlyc3REZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7XG5cdFx0ICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySW52YWxpZGF0ZUJZT0JSZXF1ZXN0KGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgY29uc3Qgc3RhdGUgPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEluQ2xvc2VkU3RhdGUoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEluUmVhZGFibGVTdGF0ZShjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4sIGZpcnN0RGVzY3JpcHRvcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3Muc2hpZnQoKTtcblx0XHQgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJTaG91bGRDYWxsUHVsbChjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBjb25zdCBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO1xuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5fc3RhdGUgIT09ICdyZWFkYWJsZScpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIWNvbnRyb2xsZXIuX3N0YXJ0ZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoUmVhZGFibGVTdHJlYW1IYXNEZWZhdWx0UmVhZGVyKHN0cmVhbSkgJiYgUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkUmVxdWVzdHMoc3RyZWFtKSA+IDApIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSAmJiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRJbnRvUmVxdWVzdHMoc3RyZWFtKSA+IDApIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IGRlc2lyZWRTaXplID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgaWYgKGRlc2lyZWRTaXplID4gMCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fcHVsbEFsZ29yaXRobSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2NhbmNlbEFsZ29yaXRobSA9IHVuZGVmaW5lZDtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBBIGNsaWVudCBvZiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyIG1heSB1c2UgdGhlc2UgZnVuY3Rpb25zIGRpcmVjdGx5IHRvIGJ5cGFzcyBzdGF0ZSBjaGVjay5cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsb3NlKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07XG5cdFx0ICAgICAgICBpZiAoY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQgfHwgc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA+IDApIHtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGZpcnN0UGVuZGluZ1B1bGxJbnRvID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7XG5cdFx0ICAgICAgICAgICAgaWYgKGZpcnN0UGVuZGluZ1B1bGxJbnRvLmJ5dGVzRmlsbGVkID4gMCkge1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IFR5cGVFcnJvcignSW5zdWZmaWNpZW50IGJ5dGVzIHRvIGZpbGwgZWxlbWVudHMgaW4gdGhlIGdpdmVuIGJ1ZmZlcicpO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGU7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTtcblx0XHQgICAgICAgIFJlYWRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuaykge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtcblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCB8fCBzdHJlYW0uX3N0YXRlICE9PSAncmVhZGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY29uc3QgYnVmZmVyID0gY2h1bmsuYnVmZmVyO1xuXHRcdCAgICAgICAgY29uc3QgYnl0ZU9mZnNldCA9IGNodW5rLmJ5dGVPZmZzZXQ7XG5cdFx0ICAgICAgICBjb25zdCBieXRlTGVuZ3RoID0gY2h1bmsuYnl0ZUxlbmd0aDtcblx0XHQgICAgICAgIGNvbnN0IHRyYW5zZmVycmVkQnVmZmVyID0gVHJhbnNmZXJBcnJheUJ1ZmZlcihidWZmZXIpO1xuXHRcdCAgICAgICAgaWYgKGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGZpcnN0UGVuZGluZ1B1bGxJbnRvID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7XG5cdFx0ICAgICAgICAgICAgaWYgKElzRGV0YWNoZWRCdWZmZXIoZmlyc3RQZW5kaW5nUHVsbEludG8uYnVmZmVyKSkgO1xuXHRcdCAgICAgICAgICAgIGZpcnN0UGVuZGluZ1B1bGxJbnRvLmJ1ZmZlciA9IFRyYW5zZmVyQXJyYXlCdWZmZXIoZmlyc3RQZW5kaW5nUHVsbEludG8uYnVmZmVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJJbnZhbGlkYXRlQllPQlJlcXVlc3QoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBpZiAoUmVhZGFibGVTdHJlYW1IYXNEZWZhdWx0UmVhZGVyKHN0cmVhbSkpIHtcblx0XHQgICAgICAgICAgICBpZiAoUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkUmVxdWVzdHMoc3RyZWFtKSA9PT0gMCkge1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZUNodW5rVG9RdWV1ZShjb250cm9sbGVyLCB0cmFuc2ZlcnJlZEJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcik7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmZXJyZWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodHJhbnNmZXJyZWRCdWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbUZ1bGZpbGxSZWFkUmVxdWVzdChzdHJlYW0sIHRyYW5zZmVycmVkVmlldywgZmFsc2UpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2UgaWYgKFJlYWRhYmxlU3RyZWFtSGFzQllPQlJlYWRlcihzdHJlYW0pKSB7XG5cdFx0ICAgICAgICAgICAgLy8gVE9ETzogSWRlYWxseSBpbiB0aGlzIGJyYW5jaCBkZXRhY2hpbmcgc2hvdWxkIGhhcHBlbiBvbmx5IGlmIHRoZSBidWZmZXIgaXMgbm90IGNvbnN1bWVkIGZ1bGx5LlxuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlQ2h1bmtUb1F1ZXVlKGNvbnRyb2xsZXIsIHRyYW5zZmVycmVkQnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHJvY2Vzc1B1bGxJbnRvRGVzY3JpcHRvcnNVc2luZ1F1ZXVlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUoY29udHJvbGxlciwgdHJhbnNmZXJyZWRCdWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhclBlbmRpbmdQdWxsSW50b3MoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTtcblx0XHQgICAgICAgIFJlYWRhYmxlU3RyZWFtRXJyb3Ioc3RyZWFtLCBlKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyR2V0QllPQlJlcXVlc3QoY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgaWYgKGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0ID09PSBudWxsICYmIGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGZpcnN0RGVzY3JpcHRvciA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShmaXJzdERlc2NyaXB0b3IuYnVmZmVyLCBmaXJzdERlc2NyaXB0b3IuYnl0ZU9mZnNldCArIGZpcnN0RGVzY3JpcHRvci5ieXRlc0ZpbGxlZCwgZmlyc3REZXNjcmlwdG9yLmJ5dGVMZW5ndGggLSBmaXJzdERlc2NyaXB0b3IuYnl0ZXNGaWxsZWQpO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGJ5b2JSZXF1ZXN0ID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZSk7XG5cdFx0ICAgICAgICAgICAgU2V0VXBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0KGJ5b2JSZXF1ZXN0LCBjb250cm9sbGVyLCB2aWV3KTtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9ieW9iUmVxdWVzdCA9IGJ5b2JSZXF1ZXN0O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0O1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3N0YXRlO1xuXHRcdCAgICAgICAgaWYgKHN0YXRlID09PSAnZXJyb3JlZCcpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gMDtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBjb250cm9sbGVyLl9zdHJhdGVneUhXTSAtIGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kKGNvbnRyb2xsZXIsIGJ5dGVzV3JpdHRlbikge1xuXHRcdCAgICAgICAgY29uc3QgZmlyc3REZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3N0YXRlO1xuXHRcdCAgICAgICAgaWYgKHN0YXRlID09PSAnY2xvc2VkJykge1xuXHRcdCAgICAgICAgICAgIGlmIChieXRlc1dyaXR0ZW4gIT09IDApIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYnl0ZXNXcml0dGVuIG11c3QgYmUgMCB3aGVuIGNhbGxpbmcgcmVzcG9uZCgpIG9uIGEgY2xvc2VkIHN0cmVhbScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgIGlmIChieXRlc1dyaXR0ZW4gPT09IDApIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYnl0ZXNXcml0dGVuIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmQoKSBvbiBhIHJlYWRhYmxlIHN0cmVhbScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAoZmlyc3REZXNjcmlwdG9yLmJ5dGVzRmlsbGVkICsgYnl0ZXNXcml0dGVuID4gZmlyc3REZXNjcmlwdG9yLmJ5dGVMZW5ndGgpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2J5dGVzV3JpdHRlbiBvdXQgb2YgcmFuZ2UnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmaXJzdERlc2NyaXB0b3IuYnVmZmVyID0gVHJhbnNmZXJBcnJheUJ1ZmZlcihmaXJzdERlc2NyaXB0b3IuYnVmZmVyKTtcblx0XHQgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kSW50ZXJuYWwoY29udHJvbGxlciwgYnl0ZXNXcml0dGVuKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZFdpdGhOZXdWaWV3KGNvbnRyb2xsZXIsIHZpZXcpIHtcblx0XHQgICAgICAgIGNvbnN0IGZpcnN0RGVzY3JpcHRvciA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO1xuXHRcdCAgICAgICAgY29uc3Qgc3RhdGUgPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcblx0XHQgICAgICAgICAgICBpZiAodmlldy5ieXRlTGVuZ3RoICE9PSAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2aWV3XFwncyBsZW5ndGggbXVzdCBiZSAwIHdoZW4gY2FsbGluZyByZXNwb25kV2l0aE5ld1ZpZXcoKSBvbiBhIGNsb3NlZCBzdHJlYW0nKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICBpZiAodmlldy5ieXRlTGVuZ3RoID09PSAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2aWV3XFwncyBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCB3aGVuIGNhbGxpbmcgcmVzcG9uZFdpdGhOZXdWaWV3KCkgb24gYSByZWFkYWJsZSBzdHJlYW0nKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoZmlyc3REZXNjcmlwdG9yLmJ5dGVPZmZzZXQgKyBmaXJzdERlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgIT09IHZpZXcuYnl0ZU9mZnNldCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgcmVnaW9uIHNwZWNpZmllZCBieSB2aWV3IGRvZXMgbm90IG1hdGNoIGJ5b2JSZXF1ZXN0Jyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoZmlyc3REZXNjcmlwdG9yLmJ1ZmZlckJ5dGVMZW5ndGggIT09IHZpZXcuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIGJ1ZmZlciBvZiB2aWV3IGhhcyBkaWZmZXJlbnQgY2FwYWNpdHkgdGhhbiBieW9iUmVxdWVzdCcpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKGZpcnN0RGVzY3JpcHRvci5ieXRlc0ZpbGxlZCArIHZpZXcuYnl0ZUxlbmd0aCA+IGZpcnN0RGVzY3JpcHRvci5ieXRlTGVuZ3RoKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSByZWdpb24gc3BlY2lmaWVkIGJ5IHZpZXcgaXMgbGFyZ2VyIHRoYW4gYnlvYlJlcXVlc3QnKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHZpZXdCeXRlTGVuZ3RoID0gdmlldy5ieXRlTGVuZ3RoO1xuXHRcdCAgICAgICAgZmlyc3REZXNjcmlwdG9yLmJ1ZmZlciA9IFRyYW5zZmVyQXJyYXlCdWZmZXIodmlldy5idWZmZXIpO1xuXHRcdCAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbnRlcm5hbChjb250cm9sbGVyLCB2aWV3Qnl0ZUxlbmd0aCk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gU2V0VXBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgYXV0b0FsbG9jYXRlQ2h1bmtTaXplKSB7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtID0gc3RyZWFtO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fcHVsbEFnYWluID0gZmFsc2U7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9wdWxsaW5nID0gZmFsc2U7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9ieW9iUmVxdWVzdCA9IG51bGw7XG5cdFx0ICAgICAgICAvLyBOZWVkIHRvIHNldCB0aGUgc2xvdHMgc28gdGhhdCB0aGUgYXNzZXJ0IGRvZXNuJ3QgZmlyZS4gSW4gdGhlIHNwZWMgdGhlIHNsb3RzIGFscmVhZHkgZXhpc3QgaW1wbGljaXRseS5cblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3F1ZXVlID0gY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQgPSBmYWxzZTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSBmYWxzZTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNID0gaGlnaFdhdGVyTWFyaztcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxBbGdvcml0aG0gPSBwdWxsQWxnb3JpdGhtO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fY2FuY2VsQWxnb3JpdGhtID0gY2FuY2VsQWxnb3JpdGhtO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gYXV0b0FsbG9jYXRlQ2h1bmtTaXplO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcyA9IG5ldyBTaW1wbGVRdWV1ZSgpO1xuXHRcdCAgICAgICAgc3RyZWFtLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuXHRcdCAgICAgICAgY29uc3Qgc3RhcnRSZXN1bHQgPSBzdGFydEFsZ29yaXRobSgpO1xuXHRcdCAgICAgICAgdXBvblByb21pc2UocHJvbWlzZVJlc29sdmVkV2l0aChzdGFydFJlc3VsdCksICgpID0+IHtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9zdGFydGVkID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgICAgIH0sIHIgPT4ge1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCByKTtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFNldFVwUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZyb21VbmRlcmx5aW5nU291cmNlKHN0cmVhbSwgdW5kZXJseWluZ0J5dGVTb3VyY2UsIGhpZ2hXYXRlck1hcmspIHtcblx0XHQgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlKTtcblx0XHQgICAgICAgIGxldCBzdGFydEFsZ29yaXRobSA9ICgpID0+IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGxldCBwdWxsQWxnb3JpdGhtID0gKCkgPT4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgbGV0IGNhbmNlbEFsZ29yaXRobSA9ICgpID0+IHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcblx0XHQgICAgICAgIGlmICh1bmRlcmx5aW5nQnl0ZVNvdXJjZS5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgc3RhcnRBbGdvcml0aG0gPSAoKSA9PiB1bmRlcmx5aW5nQnl0ZVNvdXJjZS5zdGFydChjb250cm9sbGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICh1bmRlcmx5aW5nQnl0ZVNvdXJjZS5wdWxsICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBwdWxsQWxnb3JpdGhtID0gKCkgPT4gdW5kZXJseWluZ0J5dGVTb3VyY2UucHVsbChjb250cm9sbGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICh1bmRlcmx5aW5nQnl0ZVNvdXJjZS5jYW5jZWwgIT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIGNhbmNlbEFsZ29yaXRobSA9IHJlYXNvbiA9PiB1bmRlcmx5aW5nQnl0ZVNvdXJjZS5jYW5jZWwocmVhc29uKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSA9IHVuZGVybHlpbmdCeXRlU291cmNlLmF1dG9BbGxvY2F0ZUNodW5rU2l6ZTtcblx0XHQgICAgICAgIGlmIChhdXRvQWxsb2NhdGVDaHVua1NpemUgPT09IDApIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdXRvQWxsb2NhdGVDaHVua1NpemUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgU2V0VXBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgYXV0b0FsbG9jYXRlQ2h1bmtTaXplKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QocmVxdWVzdCwgY29udHJvbGxlciwgdmlldykge1xuXHRcdCAgICAgICAgcmVxdWVzdC5fYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuXHRcdCAgICAgICAgcmVxdWVzdC5fdmlldyA9IHZpZXc7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgdGhlIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QuXG5cdFx0ICAgIGZ1bmN0aW9uIGJ5b2JSZXF1ZXN0QnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUuJHtuYW1lfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdGApO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLlxuXHRcdCAgICBmdW5jdGlvbiBieXRlU3RyZWFtQ29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLiR7bmFtZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJgKTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8vIEFic3RyYWN0IG9wZXJhdGlvbnMgZm9yIHRoZSBSZWFkYWJsZVN0cmVhbS5cblx0XHQgICAgZnVuY3Rpb24gQWNxdWlyZVJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihzdHJlYW0pIHtcblx0XHQgICAgICAgIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHN0cmVhbSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gUmVhZGFibGVTdHJlYW0gQVBJIGV4cG9zZWQgZm9yIGNvbnRyb2xsZXJzLlxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUFkZFJlYWRJbnRvUmVxdWVzdChzdHJlYW0sIHJlYWRJbnRvUmVxdWVzdCkge1xuXHRcdCAgICAgICAgc3RyZWFtLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMucHVzaChyZWFkSW50b1JlcXVlc3QpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRnVsZmlsbFJlYWRJbnRvUmVxdWVzdChzdHJlYW0sIGNodW5rLCBkb25lKSB7XG5cdFx0ICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uX3JlYWRlcjtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRJbnRvUmVxdWVzdCA9IHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5zaGlmdCgpO1xuXHRcdCAgICAgICAgaWYgKGRvbmUpIHtcblx0XHQgICAgICAgICAgICByZWFkSW50b1JlcXVlc3QuX2Nsb3NlU3RlcHMoY2h1bmspO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgcmVhZEludG9SZXF1ZXN0Ll9jaHVua1N0ZXBzKGNodW5rKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRJbnRvUmVxdWVzdHMoc3RyZWFtKSB7XG5cdFx0ICAgICAgICByZXR1cm4gc3RyZWFtLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMubGVuZ3RoO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtSGFzQllPQlJlYWRlcihzdHJlYW0pIHtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyO1xuXHRcdCAgICAgICAgaWYgKHJlYWRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihyZWFkZXIpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgIH1cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEEgQllPQiByZWFkZXIgdmVuZGVkIGJ5IGEge0BsaW5rIFJlYWRhYmxlU3RyZWFtfS5cblx0XHQgICAgICpcblx0XHQgICAgICogQHB1YmxpY1xuXHRcdCAgICAgKi9cblx0XHQgICAgY2xhc3MgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyIHtcblx0XHQgICAgICAgIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuXHRcdCAgICAgICAgICAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQoc3RyZWFtLCAxLCAnUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyJyk7XG5cdFx0ICAgICAgICAgICAgYXNzZXJ0UmVhZGFibGVTdHJlYW0oc3RyZWFtLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgaWYgKElzUmVhZGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGxvY2tlZCBmb3IgZXhjbHVzaXZlIHJlYWRpbmcgYnkgYW5vdGhlciByZWFkZXInKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgYSBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIgZm9yIGEgc3RyZWFtIG5vdCBjb25zdHJ1Y3RlZCB3aXRoIGEgYnl0ZSAnICtcblx0XHQgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljSW5pdGlhbGl6ZSh0aGlzLCBzdHJlYW0pO1xuXHRcdCAgICAgICAgICAgIHRoaXMuX3JlYWRJbnRvUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlIGZ1bGZpbGxlZCB3aGVuIHRoZSBzdHJlYW0gYmVjb21lcyBjbG9zZWQsIG9yIHJlamVjdGVkIGlmIHRoZSBzdHJlYW0gZXZlciBlcnJvcnMgb3Jcblx0XHQgICAgICAgICAqIHRoZSByZWFkZXIncyBsb2NrIGlzIHJlbGVhc2VkIGJlZm9yZSB0aGUgc3RyZWFtIGZpbmlzaGVzIGNsb3NpbmcuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBjbG9zZWQoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2xvc2VkJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkUHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogSWYgdGhlIHJlYWRlciBpcyBhY3RpdmUsIGJlaGF2ZXMgdGhlIHNhbWUgYXMge0BsaW5rIFJlYWRhYmxlU3RyZWFtLmNhbmNlbCB8IHN0cmVhbS5jYW5jZWwocmVhc29uKX0uXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGNhbmNlbChyZWFzb24gPSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGJ5b2JSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjYW5jZWwnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgocmVhZGVyTG9ja0V4Y2VwdGlvbignY2FuY2VsJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljQ2FuY2VsKHRoaXMsIHJlYXNvbik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIEF0dGVtcHRzIHRvIHJlYWRzIGJ5dGVzIGludG8gdmlldywgYW5kIHJldHVybnMgYSBwcm9taXNlIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdC5cblx0XHQgICAgICAgICAqXG5cdFx0ICAgICAgICAgKiBJZiByZWFkaW5nIGEgY2h1bmsgY2F1c2VzIHRoZSBxdWV1ZSB0byBiZWNvbWUgZW1wdHksIG1vcmUgZGF0YSB3aWxsIGJlIHB1bGxlZCBmcm9tIHRoZSB1bmRlcmx5aW5nIHNvdXJjZS5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgcmVhZCh2aWV3KSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZCcpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKCFBcnJheUJ1ZmZlci5pc1ZpZXcodmlldykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcigndmlldyBtdXN0IGJlIGFuIGFycmF5IGJ1ZmZlciB2aWV3JykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAodmlldy5ieXRlTGVuZ3RoID09PSAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ3ZpZXcgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGgnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh2aWV3LmJ1ZmZlci5ieXRlTGVuZ3RoID09PSAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoYHZpZXcncyBidWZmZXIgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGhgKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmIChJc0RldGFjaGVkQnVmZmVyKHZpZXcuYnVmZmVyKSkgO1xuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgocmVhZGVyTG9ja0V4Y2VwdGlvbigncmVhZCBmcm9tJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cdFx0ICAgICAgICAgICAgbGV0IHJlamVjdFByb21pc2U7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ld1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG5cdFx0ICAgICAgICAgICAgICAgIHJlamVjdFByb21pc2UgPSByZWplY3Q7XG5cdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmVhZEludG9SZXF1ZXN0ID0ge1xuXHRcdCAgICAgICAgICAgICAgICBfY2h1bmtTdGVwczogY2h1bmsgPT4gcmVzb2x2ZVByb21pc2UoeyB2YWx1ZTogY2h1bmssIGRvbmU6IGZhbHNlIH0pLFxuXHRcdCAgICAgICAgICAgICAgICBfY2xvc2VTdGVwczogY2h1bmsgPT4gcmVzb2x2ZVByb21pc2UoeyB2YWx1ZTogY2h1bmssIGRvbmU6IHRydWUgfSksXG5cdFx0ICAgICAgICAgICAgICAgIF9lcnJvclN0ZXBzOiBlID0+IHJlamVjdFByb21pc2UoZSlcblx0XHQgICAgICAgICAgICB9O1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclJlYWQodGhpcywgdmlldywgcmVhZEludG9SZXF1ZXN0KTtcblx0XHQgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogUmVsZWFzZXMgdGhlIHJlYWRlcidzIGxvY2sgb24gdGhlIGNvcnJlc3BvbmRpbmcgc3RyZWFtLiBBZnRlciB0aGUgbG9jayBpcyByZWxlYXNlZCwgdGhlIHJlYWRlciBpcyBubyBsb25nZXIgYWN0aXZlLlxuXHRcdCAgICAgICAgICogSWYgdGhlIGFzc29jaWF0ZWQgc3RyZWFtIGlzIGVycm9yZWQgd2hlbiB0aGUgbG9jayBpcyByZWxlYXNlZCwgdGhlIHJlYWRlciB3aWxsIGFwcGVhciBlcnJvcmVkIGluIHRoZSBzYW1lIHdheVxuXHRcdCAgICAgICAgICogZnJvbSBub3cgb247IG90aGVyd2lzZSwgdGhlIHJlYWRlciB3aWxsIGFwcGVhciBjbG9zZWQuXG5cdFx0ICAgICAgICAgKlxuXHRcdCAgICAgICAgICogQSByZWFkZXIncyBsb2NrIGNhbm5vdCBiZSByZWxlYXNlZCB3aGlsZSBpdCBzdGlsbCBoYXMgYSBwZW5kaW5nIHJlYWQgcmVxdWVzdCwgaS5lLiwgaWYgYSBwcm9taXNlIHJldHVybmVkIGJ5XG5cdFx0ICAgICAgICAgKiB0aGUgcmVhZGVyJ3Mge0BsaW5rIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlci5yZWFkIHwgcmVhZCgpfSBtZXRob2QgaGFzIG5vdCB5ZXQgYmVlbiBzZXR0bGVkLiBBdHRlbXB0aW5nIHRvXG5cdFx0ICAgICAgICAgKiBkbyBzbyB3aWxsIHRocm93IGEgYFR5cGVFcnJvcmAgYW5kIGxlYXZlIHRoZSByZWFkZXIgbG9ja2VkIHRvIHRoZSBzdHJlYW0uXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIHJlbGVhc2VMb2NrKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgYnlvYlJlYWRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ3JlbGVhc2VMb2NrJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAodGhpcy5fcmVhZEludG9SZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RyaWVkIHRvIHJlbGVhc2UgYSByZWFkZXIgbG9jayB3aGVuIHRoYXQgcmVhZGVyIGhhcyBwZW5kaW5nIHJlYWQoKSBjYWxscyB1bi1zZXR0bGVkJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZSwge1xuXHRcdCAgICAgICAgY2FuY2VsOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHJlYWQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgcmVsZWFzZUxvY2s6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgY2xvc2VkOiB7IGVudW1lcmFibGU6IHRydWUgfVxuXHRcdCAgICB9KTtcblx0XHQgICAgaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCcpIHtcblx0XHQgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyJyxcblx0XHQgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEFic3RyYWN0IG9wZXJhdGlvbnMgZm9yIHRoZSByZWFkZXJzLlxuXHRcdCAgICBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih4KSB7XG5cdFx0ICAgICAgICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfcmVhZEludG9SZXF1ZXN0cycpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXI7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyUmVhZChyZWFkZXIsIHZpZXcsIHJlYWRJbnRvUmVxdWVzdCkge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtO1xuXHRcdCAgICAgICAgc3RyZWFtLl9kaXN0dXJiZWQgPSB0cnVlO1xuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdlcnJvcmVkJykge1xuXHRcdCAgICAgICAgICAgIHJlYWRJbnRvUmVxdWVzdC5fZXJyb3JTdGVwcyhzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJQdWxsSW50byhzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgdmlldywgcmVhZEludG9SZXF1ZXN0KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICAvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciB0aGUgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLlxuXHRcdCAgICBmdW5jdGlvbiBieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS4ke25hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXJgKTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIGZ1bmN0aW9uIEV4dHJhY3RIaWdoV2F0ZXJNYXJrKHN0cmF0ZWd5LCBkZWZhdWx0SFdNKSB7XG5cdFx0ICAgICAgICBjb25zdCB7IGhpZ2hXYXRlck1hcmsgfSA9IHN0cmF0ZWd5O1xuXHRcdCAgICAgICAgaWYgKGhpZ2hXYXRlck1hcmsgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBkZWZhdWx0SFdNO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKE51bWJlcklzTmFOKGhpZ2hXYXRlck1hcmspIHx8IGhpZ2hXYXRlck1hcmsgPCAwKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgaGlnaFdhdGVyTWFyaycpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIGhpZ2hXYXRlck1hcms7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gRXh0cmFjdFNpemVBbGdvcml0aG0oc3RyYXRlZ3kpIHtcblx0XHQgICAgICAgIGNvbnN0IHsgc2l6ZSB9ID0gc3RyYXRlZ3k7XG5cdFx0ICAgICAgICBpZiAoIXNpemUpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gKCkgPT4gMTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBzaXplO1xuXHRcdCAgICB9XG5cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFF1ZXVpbmdTdHJhdGVneShpbml0LCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnREaWN0aW9uYXJ5KGluaXQsIGNvbnRleHQpO1xuXHRcdCAgICAgICAgY29uc3QgaGlnaFdhdGVyTWFyayA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oaWdoV2F0ZXJNYXJrO1xuXHRcdCAgICAgICAgY29uc3Qgc2l6ZSA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5zaXplO1xuXHRcdCAgICAgICAgcmV0dXJuIHtcblx0XHQgICAgICAgICAgICBoaWdoV2F0ZXJNYXJrOiBoaWdoV2F0ZXJNYXJrID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBjb252ZXJ0VW5yZXN0cmljdGVkRG91YmxlKGhpZ2hXYXRlck1hcmspLFxuXHRcdCAgICAgICAgICAgIHNpemU6IHNpemUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lTaXplKHNpemUsIGAke2NvbnRleHR9IGhhcyBtZW1iZXIgJ3NpemUnIHRoYXRgKVxuXHRcdCAgICAgICAgfTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0UXVldWluZ1N0cmF0ZWd5U2l6ZShmbiwgY29udGV4dCkge1xuXHRcdCAgICAgICAgYXNzZXJ0RnVuY3Rpb24oZm4sIGNvbnRleHQpO1xuXHRcdCAgICAgICAgcmV0dXJuIGNodW5rID0+IGNvbnZlcnRVbnJlc3RyaWN0ZWREb3VibGUoZm4oY2h1bmspKTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIGZ1bmN0aW9uIGNvbnZlcnRVbmRlcmx5aW5nU2luayhvcmlnaW5hbCwgY29udGV4dCkge1xuXHRcdCAgICAgICAgYXNzZXJ0RGljdGlvbmFyeShvcmlnaW5hbCwgY29udGV4dCk7XG5cdFx0ICAgICAgICBjb25zdCBhYm9ydCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5hYm9ydDtcblx0XHQgICAgICAgIGNvbnN0IGNsb3NlID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLmNsb3NlO1xuXHRcdCAgICAgICAgY29uc3Qgc3RhcnQgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwuc3RhcnQ7XG5cdFx0ICAgICAgICBjb25zdCB0eXBlID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLnR5cGU7XG5cdFx0ICAgICAgICBjb25zdCB3cml0ZSA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC53cml0ZTtcblx0XHQgICAgICAgIHJldHVybiB7XG5cdFx0ICAgICAgICAgICAgYWJvcnQ6IGFib3J0ID09PSB1bmRlZmluZWQgP1xuXHRcdCAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuXHRcdCAgICAgICAgICAgICAgICBjb252ZXJ0VW5kZXJseWluZ1NpbmtBYm9ydENhbGxiYWNrKGFib3J0LCBvcmlnaW5hbCwgYCR7Y29udGV4dH0gaGFzIG1lbWJlciAnYWJvcnQnIHRoYXRgKSxcblx0XHQgICAgICAgICAgICBjbG9zZTogY2xvc2UgPT09IHVuZGVmaW5lZCA/XG5cdFx0ICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnZlcnRVbmRlcmx5aW5nU2lua0Nsb3NlQ2FsbGJhY2soY2xvc2UsIG9yaWdpbmFsLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICdjbG9zZScgdGhhdGApLFxuXHRcdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCA9PT0gdW5kZWZpbmVkID9cblx0XHQgICAgICAgICAgICAgICAgdW5kZWZpbmVkIDpcblx0XHQgICAgICAgICAgICAgICAgY29udmVydFVuZGVybHlpbmdTaW5rU3RhcnRDYWxsYmFjayhzdGFydCwgb3JpZ2luYWwsIGAke2NvbnRleHR9IGhhcyBtZW1iZXIgJ3N0YXJ0JyB0aGF0YCksXG5cdFx0ICAgICAgICAgICAgd3JpdGU6IHdyaXRlID09PSB1bmRlZmluZWQgP1xuXHRcdCAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuXHRcdCAgICAgICAgICAgICAgICBjb252ZXJ0VW5kZXJseWluZ1NpbmtXcml0ZUNhbGxiYWNrKHdyaXRlLCBvcmlnaW5hbCwgYCR7Y29udGV4dH0gaGFzIG1lbWJlciAnd3JpdGUnIHRoYXRgKSxcblx0XHQgICAgICAgICAgICB0eXBlXG5cdFx0ICAgICAgICB9O1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGNvbnZlcnRVbmRlcmx5aW5nU2lua0Fib3J0Q2FsbGJhY2soZm4sIG9yaWdpbmFsLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG5cdFx0ICAgICAgICByZXR1cm4gKHJlYXNvbikgPT4gcHJvbWlzZUNhbGwoZm4sIG9yaWdpbmFsLCBbcmVhc29uXSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTaW5rQ2xvc2VDYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGFzc2VydEZ1bmN0aW9uKGZuLCBjb250ZXh0KTtcblx0XHQgICAgICAgIHJldHVybiAoKSA9PiBwcm9taXNlQ2FsbChmbiwgb3JpZ2luYWwsIFtdKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0VW5kZXJseWluZ1NpbmtTdGFydENhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuXHRcdCAgICAgICAgYXNzZXJ0RnVuY3Rpb24oZm4sIGNvbnRleHQpO1xuXHRcdCAgICAgICAgcmV0dXJuIChjb250cm9sbGVyKSA9PiByZWZsZWN0Q2FsbChmbiwgb3JpZ2luYWwsIFtjb250cm9sbGVyXSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTaW5rV3JpdGVDYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGFzc2VydEZ1bmN0aW9uKGZuLCBjb250ZXh0KTtcblx0XHQgICAgICAgIHJldHVybiAoY2h1bmssIGNvbnRyb2xsZXIpID0+IHByb21pc2VDYWxsKGZuLCBvcmlnaW5hbCwgW2NodW5rLCBjb250cm9sbGVyXSk7XG5cdFx0ICAgIH1cblxuXHRcdCAgICBmdW5jdGlvbiBhc3NlcnRXcml0YWJsZVN0cmVhbSh4LCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW0oeCkpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NvbnRleHR9IGlzIG5vdCBhIFdyaXRhYmxlU3RyZWFtLmApO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cblx0XHQgICAgZnVuY3Rpb24gaXNBYm9ydFNpZ25hbCh2YWx1ZSkge1xuXHRcdCAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB0cnkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUuYWJvcnRlZCA9PT0gJ2Jvb2xlYW4nO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY2F0Y2ggKF9hKSB7XG5cdFx0ICAgICAgICAgICAgLy8gQWJvcnRTaWduYWwucHJvdG90eXBlLmFib3J0ZWQgdGhyb3dzIGlmIGl0cyBicmFuZCBjaGVjayBmYWlsc1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBjb25zdCBzdXBwb3J0c0Fib3J0Q29udHJvbGxlciA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICdmdW5jdGlvbic7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgQWJvcnRDb250cm9sbGVyLCBpZiBzdXBwb3J0ZWQgYnkgdGhlIHBsYXRmb3JtLlxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAaW50ZXJuYWxcblx0XHQgICAgICovXG5cdFx0ICAgIGZ1bmN0aW9uIGNyZWF0ZUFib3J0Q29udHJvbGxlcigpIHtcblx0XHQgICAgICAgIGlmIChzdXBwb3J0c0Fib3J0Q29udHJvbGxlcikge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEEgd3JpdGFibGUgc3RyZWFtIHJlcHJlc2VudHMgYSBkZXN0aW5hdGlvbiBmb3IgZGF0YSwgaW50byB3aGljaCB5b3UgY2FuIHdyaXRlLlxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcHVibGljXG5cdFx0ICAgICAqL1xuXHRcdCAgICBjbGFzcyBXcml0YWJsZVN0cmVhbSB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcihyYXdVbmRlcmx5aW5nU2luayA9IHt9LCByYXdTdHJhdGVneSA9IHt9KSB7XG5cdFx0ICAgICAgICAgICAgaWYgKHJhd1VuZGVybHlpbmdTaW5rID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmF3VW5kZXJseWluZ1NpbmsgPSBudWxsO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgYXNzZXJ0T2JqZWN0KHJhd1VuZGVybHlpbmdTaW5rLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gY29udmVydFF1ZXVpbmdTdHJhdGVneShyYXdTdHJhdGVneSwgJ1NlY29uZCBwYXJhbWV0ZXInKTtcblx0XHQgICAgICAgICAgICBjb25zdCB1bmRlcmx5aW5nU2luayA9IGNvbnZlcnRVbmRlcmx5aW5nU2luayhyYXdVbmRlcmx5aW5nU2luaywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIEluaXRpYWxpemVXcml0YWJsZVN0cmVhbSh0aGlzKTtcblx0XHQgICAgICAgICAgICBjb25zdCB0eXBlID0gdW5kZXJseWluZ1NpbmsudHlwZTtcblx0XHQgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGUgaXMgc3BlY2lmaWVkJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNvbnN0IHNpemVBbGdvcml0aG0gPSBFeHRyYWN0U2l6ZUFsZ29yaXRobShzdHJhdGVneSk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgaGlnaFdhdGVyTWFyayA9IEV4dHJhY3RIaWdoV2F0ZXJNYXJrKHN0cmF0ZWd5LCAxKTtcblx0XHQgICAgICAgICAgICBTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NpbmsodGhpcywgdW5kZXJseWluZ1NpbmssIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB3cml0YWJsZSBzdHJlYW0gaXMgbG9ja2VkIHRvIGEgd3JpdGVyLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBnZXQgbG9ja2VkKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNXcml0YWJsZVN0cmVhbSh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDIoJ2xvY2tlZCcpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gSXNXcml0YWJsZVN0cmVhbUxvY2tlZCh0aGlzKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogQWJvcnRzIHRoZSBzdHJlYW0sIHNpZ25hbGluZyB0aGF0IHRoZSBwcm9kdWNlciBjYW4gbm8gbG9uZ2VyIHN1Y2Nlc3NmdWxseSB3cml0ZSB0byB0aGUgc3RyZWFtIGFuZCBpdCBpcyB0byBiZVxuXHRcdCAgICAgICAgICogaW1tZWRpYXRlbHkgbW92ZWQgdG8gYW4gZXJyb3JlZCBzdGF0ZSwgd2l0aCBhbnkgcXVldWVkLXVwIHdyaXRlcyBkaXNjYXJkZWQuIFRoaXMgd2lsbCBhbHNvIGV4ZWN1dGUgYW55IGFib3J0XG5cdFx0ICAgICAgICAgKiBtZWNoYW5pc20gb2YgdGhlIHVuZGVybHlpbmcgc2luay5cblx0XHQgICAgICAgICAqXG5cdFx0ICAgICAgICAgKiBUaGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGZ1bGZpbGwgaWYgdGhlIHN0cmVhbSBzaHV0cyBkb3duIHN1Y2Nlc3NmdWxseSwgb3IgcmVqZWN0IGlmIHRoZSB1bmRlcmx5aW5nIHNpbmsgc2lnbmFsZWRcblx0XHQgICAgICAgICAqIHRoYXQgdGhlcmUgd2FzIGFuIGVycm9yIGRvaW5nIHNvLiBBZGRpdGlvbmFsbHksIGl0IHdpbGwgcmVqZWN0IHdpdGggYSBgVHlwZUVycm9yYCAod2l0aG91dCBhdHRlbXB0aW5nIHRvIGNhbmNlbFxuXHRcdCAgICAgICAgICogdGhlIHN0cmVhbSkgaWYgdGhlIHN0cmVhbSBpcyBjdXJyZW50bHkgbG9ja2VkLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBhYm9ydChyZWFzb24gPSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQyKCdhYm9ydCcpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGFib3J0IGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSB3cml0ZXInKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KHRoaXMsIHJlYXNvbik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIENsb3NlcyB0aGUgc3RyZWFtLiBUaGUgdW5kZXJseWluZyBzaW5rIHdpbGwgZmluaXNoIHByb2Nlc3NpbmcgYW55IHByZXZpb3VzbHktd3JpdHRlbiBjaHVua3MsIGJlZm9yZSBpbnZva2luZyBpdHNcblx0XHQgICAgICAgICAqIGNsb3NlIGJlaGF2aW9yLiBEdXJpbmcgdGhpcyB0aW1lIGFueSBmdXJ0aGVyIGF0dGVtcHRzIHRvIHdyaXRlIHdpbGwgZmFpbCAod2l0aG91dCBlcnJvcmluZyB0aGUgc3RyZWFtKS5cblx0XHQgICAgICAgICAqXG5cdFx0ICAgICAgICAgKiBUaGUgbWV0aG9kIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBmdWxmaWxsIGlmIGFsbCByZW1haW5pbmcgY2h1bmtzIGFyZSBzdWNjZXNzZnVsbHkgd3JpdHRlbiBhbmQgdGhlIHN0cmVhbVxuXHRcdCAgICAgICAgICogc3VjY2Vzc2Z1bGx5IGNsb3Nlcywgb3IgcmVqZWN0cyBpZiBhbiBlcnJvciBpcyBlbmNvdW50ZXJlZCBkdXJpbmcgdGhpcyBwcm9jZXNzLiBBZGRpdGlvbmFsbHksIGl0IHdpbGwgcmVqZWN0IHdpdGhcblx0XHQgICAgICAgICAqIGEgYFR5cGVFcnJvcmAgKHdpdGhvdXQgYXR0ZW1wdGluZyB0byBjYW5jZWwgdGhlIHN0cmVhbSkgaWYgdGhlIHN0cmVhbSBpcyBjdXJyZW50bHkgbG9ja2VkLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBjbG9zZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQyKCdjbG9zZScpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGNsb3NlIGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSB3cml0ZXInKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodCh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2xvc2UgYW4gYWxyZWFkeS1jbG9zaW5nIHN0cmVhbScpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtQ2xvc2UodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIENyZWF0ZXMgYSB7QGxpbmsgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyIHwgd3JpdGVyfSBhbmQgbG9ja3MgdGhlIHN0cmVhbSB0byB0aGUgbmV3IHdyaXRlci4gV2hpbGUgdGhlIHN0cmVhbVxuXHRcdCAgICAgICAgICogaXMgbG9ja2VkLCBubyBvdGhlciB3cml0ZXIgY2FuIGJlIGFjcXVpcmVkIHVudGlsIHRoaXMgb25lIGlzIHJlbGVhc2VkLlxuXHRcdCAgICAgICAgICpcblx0XHQgICAgICAgICAqIFRoaXMgZnVuY3Rpb25hbGl0eSBpcyBlc3BlY2lhbGx5IHVzZWZ1bCBmb3IgY3JlYXRpbmcgYWJzdHJhY3Rpb25zIHRoYXQgZGVzaXJlIHRoZSBhYmlsaXR5IHRvIHdyaXRlIHRvIGEgc3RyZWFtXG5cdFx0ICAgICAgICAgKiB3aXRob3V0IGludGVycnVwdGlvbiBvciBpbnRlcmxlYXZpbmcuIEJ5IGdldHRpbmcgYSB3cml0ZXIgZm9yIHRoZSBzdHJlYW0sIHlvdSBjYW4gZW5zdXJlIG5vYm9keSBlbHNlIGNhbiB3cml0ZSBhdFxuXHRcdCAgICAgICAgICogdGhlIHNhbWUgdGltZSwgd2hpY2ggd291bGQgY2F1c2UgdGhlIHJlc3VsdGluZyB3cml0dGVuIGRhdGEgdG8gYmUgdW5wcmVkaWN0YWJsZSBhbmQgcHJvYmFibHkgdXNlbGVzcy5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0V3JpdGVyKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNXcml0YWJsZVN0cmVhbSh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDIoJ2dldFdyaXRlcicpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gQWNxdWlyZVdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUsIHtcblx0XHQgICAgICAgIGFib3J0OiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGNsb3NlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGdldFdyaXRlcjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBsb2NrZWQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG5cdFx0ICAgIH0pO1xuXHRcdCAgICBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuXHRcdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcblx0XHQgICAgICAgICAgICB2YWx1ZTogJ1dyaXRhYmxlU3RyZWFtJyxcblx0XHQgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEFic3RyYWN0IG9wZXJhdGlvbnMgZm9yIHRoZSBXcml0YWJsZVN0cmVhbS5cblx0XHQgICAgZnVuY3Rpb24gQWNxdWlyZVdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcihzdHJlYW0pIHtcblx0XHQgICAgICAgIHJldHVybiBuZXcgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHN0cmVhbSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gVGhyb3dzIGlmIGFuZCBvbmx5IGlmIHN0YXJ0QWxnb3JpdGhtIHRocm93cy5cblx0XHQgICAgZnVuY3Rpb24gQ3JlYXRlV3JpdGFibGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHdyaXRlQWxnb3JpdGhtLCBjbG9zZUFsZ29yaXRobSwgYWJvcnRBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmsgPSAxLCBzaXplQWxnb3JpdGhtID0gKCkgPT4gMSkge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gT2JqZWN0LmNyZWF0ZShXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUpO1xuXHRcdCAgICAgICAgSW5pdGlhbGl6ZVdyaXRhYmxlU3RyZWFtKHN0cmVhbSk7XG5cdFx0ICAgICAgICBjb25zdCBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7XG5cdFx0ICAgICAgICBTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgd3JpdGVBbGdvcml0aG0sIGNsb3NlQWxnb3JpdGhtLCBhYm9ydEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7XG5cdFx0ICAgICAgICByZXR1cm4gc3RyZWFtO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIEluaXRpYWxpemVXcml0YWJsZVN0cmVhbShzdHJlYW0pIHtcblx0XHQgICAgICAgIHN0cmVhbS5fc3RhdGUgPSAnd3JpdGFibGUnO1xuXHRcdCAgICAgICAgLy8gVGhlIGVycm9yIHRoYXQgd2lsbCBiZSByZXBvcnRlZCBieSBuZXcgbWV0aG9kIGNhbGxzIG9uY2UgdGhlIHN0YXRlIGJlY29tZXMgZXJyb3JlZC4gT25seSBzZXQgd2hlbiBbW3N0YXRlXV0gaXNcblx0XHQgICAgICAgIC8vICdlcnJvcmluZycgb3IgJ2Vycm9yZWQnLiBNYXkgYmUgc2V0IHRvIGFuIHVuZGVmaW5lZCB2YWx1ZS5cblx0XHQgICAgICAgIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBzdHJlYW0uX3dyaXRlciA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIC8vIEluaXRpYWxpemUgdG8gdW5kZWZpbmVkIGZpcnN0IGJlY2F1c2UgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBjb250cm9sbGVyIGNoZWNrcyB0aGlzXG5cdFx0ICAgICAgICAvLyB2YXJpYWJsZSB0byB2YWxpZGF0ZSB0aGUgY2FsbGVyLlxuXHRcdCAgICAgICAgc3RyZWFtLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICAvLyBUaGlzIHF1ZXVlIGlzIHBsYWNlZCBoZXJlIGluc3RlYWQgb2YgdGhlIHdyaXRlciBjbGFzcyBpbiBvcmRlciB0byBhbGxvdyBmb3IgcGFzc2luZyBhIHdyaXRlciB0byB0aGUgbmV4dCBkYXRhXG5cdFx0ICAgICAgICAvLyBwcm9kdWNlciB3aXRob3V0IHdhaXRpbmcgZm9yIHRoZSBxdWV1ZWQgd3JpdGVzIHRvIGZpbmlzaC5cblx0XHQgICAgICAgIHN0cmVhbS5fd3JpdGVSZXF1ZXN0cyA9IG5ldyBTaW1wbGVRdWV1ZSgpO1xuXHRcdCAgICAgICAgLy8gV3JpdGUgcmVxdWVzdHMgYXJlIHJlbW92ZWQgZnJvbSBfd3JpdGVSZXF1ZXN0cyB3aGVuIHdyaXRlKCkgaXMgY2FsbGVkIG9uIHRoZSB1bmRlcmx5aW5nIHNpbmsuIFRoaXMgcHJldmVudHNcblx0XHQgICAgICAgIC8vIHRoZW0gZnJvbSBiZWluZyBlcnJvbmVvdXNseSByZWplY3RlZCBvbiBlcnJvci4gSWYgYSB3cml0ZSgpIGNhbGwgaXMgaW4tZmxpZ2h0LCB0aGUgcmVxdWVzdCBpcyBzdG9yZWQgaGVyZS5cblx0XHQgICAgICAgIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICAvLyBUaGUgcHJvbWlzZSB0aGF0IHdhcyByZXR1cm5lZCBmcm9tIHdyaXRlci5jbG9zZSgpLiBTdG9yZWQgaGVyZSBiZWNhdXNlIGl0IG1heSBiZSBmdWxmaWxsZWQgYWZ0ZXIgdGhlIHdyaXRlclxuXHRcdCAgICAgICAgLy8gaGFzIGJlZW4gZGV0YWNoZWQuXG5cdFx0ICAgICAgICBzdHJlYW0uX2Nsb3NlUmVxdWVzdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIC8vIENsb3NlIHJlcXVlc3QgaXMgcmVtb3ZlZCBmcm9tIF9jbG9zZVJlcXVlc3Qgd2hlbiBjbG9zZSgpIGlzIGNhbGxlZCBvbiB0aGUgdW5kZXJseWluZyBzaW5rLiBUaGlzIHByZXZlbnRzIGl0XG5cdFx0ICAgICAgICAvLyBmcm9tIGJlaW5nIGVycm9uZW91c2x5IHJlamVjdGVkIG9uIGVycm9yLiBJZiBhIGNsb3NlKCkgY2FsbCBpcyBpbi1mbGlnaHQsIHRoZSByZXF1ZXN0IGlzIHN0b3JlZCBoZXJlLlxuXHRcdCAgICAgICAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIC8vIFRoZSBwcm9taXNlIHRoYXQgd2FzIHJldHVybmVkIGZyb20gd3JpdGVyLmFib3J0KCkuIFRoaXMgbWF5IGFsc28gYmUgZnVsZmlsbGVkIGFmdGVyIHRoZSB3cml0ZXIgaGFzIGRldGFjaGVkLlxuXHRcdCAgICAgICAgc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgLy8gVGhlIGJhY2twcmVzc3VyZSBzaWduYWwgc2V0IGJ5IHRoZSBjb250cm9sbGVyLlxuXHRcdCAgICAgICAgc3RyZWFtLl9iYWNrcHJlc3N1cmUgPSBmYWxzZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBJc1dyaXRhYmxlU3RyZWFtKHgpIHtcblx0XHQgICAgICAgIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ193cml0YWJsZVN0cmVhbUNvbnRyb2xsZXInKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV3JpdGFibGVTdHJlYW07XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gSXNXcml0YWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pIHtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3dyaXRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1BYm9ydChzdHJlYW0sIHJlYXNvbikge1xuXHRcdCAgICAgICAgdmFyIF9hO1xuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnIHx8IHN0cmVhbS5fc3RhdGUgPT09ICdlcnJvcmVkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlci5fYWJvcnRSZWFzb24gPSByZWFzb247XG5cdFx0ICAgICAgICAoX2EgPSBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlci5fYWJvcnRDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWJvcnQoKTtcblx0XHQgICAgICAgIC8vIFR5cGVTY3JpcHQgbmFycm93cyB0aGUgdHlwZSBvZiBgc3RyZWFtLl9zdGF0ZWAgZG93biB0byAnd3JpdGFibGUnIHwgJ2Vycm9yaW5nJyxcblx0XHQgICAgICAgIC8vIGJ1dCBpdCBkb2Vzbid0IGtub3cgdGhhdCBzaWduYWxpbmcgYWJvcnQgcnVucyBhdXRob3IgY29kZSB0aGF0IG1pZ2h0IGhhdmUgY2hhbmdlZCB0aGUgc3RhdGUuXG5cdFx0ICAgICAgICAvLyBXaWRlbiB0aGUgdHlwZSBhZ2FpbiBieSBjYXN0aW5nIHRvIFdyaXRhYmxlU3RyZWFtU3RhdGUuXG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnIHx8IHN0YXRlID09PSAnZXJyb3JlZCcpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGxldCB3YXNBbHJlYWR5RXJyb3JpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykge1xuXHRcdCAgICAgICAgICAgIHdhc0FscmVhZHlFcnJvcmluZyA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgLy8gcmVhc29uIHdpbGwgbm90IGJlIHVzZWQsIHNvIGRvbid0IGtlZXAgYSByZWZlcmVuY2UgdG8gaXQuXG5cdFx0ICAgICAgICAgICAgcmVhc29uID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ld1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdCAgICAgICAgICAgIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCA9IHtcblx0XHQgICAgICAgICAgICAgICAgX3Byb21pc2U6IHVuZGVmaW5lZCxcblx0XHQgICAgICAgICAgICAgICAgX3Jlc29sdmU6IHJlc29sdmUsXG5cdFx0ICAgICAgICAgICAgICAgIF9yZWplY3Q6IHJlamVjdCxcblx0XHQgICAgICAgICAgICAgICAgX3JlYXNvbjogcmVhc29uLFxuXHRcdCAgICAgICAgICAgICAgICBfd2FzQWxyZWFkeUVycm9yaW5nOiB3YXNBbHJlYWR5RXJyb3Jpbmdcblx0XHQgICAgICAgICAgICB9O1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3Byb21pc2UgPSBwcm9taXNlO1xuXHRcdCAgICAgICAgaWYgKCF3YXNBbHJlYWR5RXJyb3JpbmcpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbVN0YXJ0RXJyb3Jpbmcoc3RyZWFtLCByZWFzb24pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1DbG9zZShzdHJlYW0pIHtcblx0XHQgICAgICAgIGNvbnN0IHN0YXRlID0gc3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcgfHwgc3RhdGUgPT09ICdlcnJvcmVkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoYFRoZSBzdHJlYW0gKGluICR7c3RhdGV9IHN0YXRlKSBpcyBub3QgaW4gdGhlIHdyaXRhYmxlIHN0YXRlIGFuZCBjYW5ub3QgYmUgY2xvc2VkYCkpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ld1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGNsb3NlUmVxdWVzdCA9IHtcblx0XHQgICAgICAgICAgICAgICAgX3Jlc29sdmU6IHJlc29sdmUsXG5cdFx0ICAgICAgICAgICAgICAgIF9yZWplY3Q6IHJlamVjdFxuXHRcdCAgICAgICAgICAgIH07XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl9jbG9zZVJlcXVlc3QgPSBjbG9zZVJlcXVlc3Q7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgICAgIGNvbnN0IHdyaXRlciA9IHN0cmVhbS5fd3JpdGVyO1xuXHRcdCAgICAgICAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkICYmIHN0cmVhbS5fYmFja3ByZXNzdXJlICYmIHN0YXRlID09PSAnd3JpdGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmUod3JpdGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcik7XG5cdFx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBXcml0YWJsZVN0cmVhbSBBUEkgZXhwb3NlZCBmb3IgY29udHJvbGxlcnMuXG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtQWRkV3JpdGVSZXF1ZXN0KHN0cmVhbSkge1xuXHRcdCAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ld1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHdyaXRlUmVxdWVzdCA9IHtcblx0XHQgICAgICAgICAgICAgICAgX3Jlc29sdmU6IHJlc29sdmUsXG5cdFx0ICAgICAgICAgICAgICAgIF9yZWplY3Q6IHJlamVjdFxuXHRcdCAgICAgICAgICAgIH07XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl93cml0ZVJlcXVlc3RzLnB1c2god3JpdGVSZXF1ZXN0KTtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvbihzdHJlYW0sIGVycm9yKSB7XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICd3cml0YWJsZScpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbVN0YXJ0RXJyb3Jpbmcoc3RyZWFtLCBlcnJvcik7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgV3JpdGFibGVTdHJlYW1GaW5pc2hFcnJvcmluZyhzdHJlYW0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIHJlYXNvbikge1xuXHRcdCAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyO1xuXHRcdCAgICAgICAgc3RyZWFtLl9zdGF0ZSA9ICdlcnJvcmluZyc7XG5cdFx0ICAgICAgICBzdHJlYW0uX3N0b3JlZEVycm9yID0gcmVhc29uO1xuXHRcdCAgICAgICAgY29uc3Qgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7XG5cdFx0ICAgICAgICBpZiAod3JpdGVyICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJFbnN1cmVSZWFkeVByb21pc2VSZWplY3RlZCh3cml0ZXIsIHJlYXNvbik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIVdyaXRhYmxlU3RyZWFtSGFzT3BlcmF0aW9uTWFya2VkSW5GbGlnaHQoc3RyZWFtKSAmJiBjb250cm9sbGVyLl9zdGFydGVkKSB7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1GaW5pc2hFcnJvcmluZyhzdHJlYW0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoRXJyb3Jpbmcoc3RyZWFtKSB7XG5cdFx0ICAgICAgICBzdHJlYW0uX3N0YXRlID0gJ2Vycm9yZWQnO1xuXHRcdCAgICAgICAgc3RyZWFtLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXJbRXJyb3JTdGVwc10oKTtcblx0XHQgICAgICAgIGNvbnN0IHN0b3JlZEVycm9yID0gc3RyZWFtLl9zdG9yZWRFcnJvcjtcblx0XHQgICAgICAgIHN0cmVhbS5fd3JpdGVSZXF1ZXN0cy5mb3JFYWNoKHdyaXRlUmVxdWVzdCA9PiB7XG5cdFx0ICAgICAgICAgICAgd3JpdGVSZXF1ZXN0Ll9yZWplY3Qoc3RvcmVkRXJyb3IpO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICBzdHJlYW0uX3dyaXRlUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtUmVqZWN0Q2xvc2VBbmRDbG9zZWRQcm9taXNlSWZOZWVkZWQoc3RyZWFtKTtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBhYm9ydFJlcXVlc3QgPSBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3Q7XG5cdFx0ICAgICAgICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBpZiAoYWJvcnRSZXF1ZXN0Ll93YXNBbHJlYWR5RXJyb3JpbmcpIHtcblx0XHQgICAgICAgICAgICBhYm9ydFJlcXVlc3QuX3JlamVjdChzdG9yZWRFcnJvcik7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pO1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHByb21pc2UgPSBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcltBYm9ydFN0ZXBzXShhYm9ydFJlcXVlc3QuX3JlYXNvbik7XG5cdFx0ICAgICAgICB1cG9uUHJvbWlzZShwcm9taXNlLCAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgYWJvcnRSZXF1ZXN0Ll9yZXNvbHZlKCk7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pO1xuXHRcdCAgICAgICAgfSwgKHJlYXNvbikgPT4ge1xuXHRcdCAgICAgICAgICAgIGFib3J0UmVxdWVzdC5fcmVqZWN0KHJlYXNvbik7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlKHN0cmVhbSkge1xuXHRcdCAgICAgICAgc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdC5fcmVzb2x2ZSh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0V3JpdGVXaXRoRXJyb3Ioc3RyZWFtLCBlcnJvcikge1xuXHRcdCAgICAgICAgc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdC5fcmVqZWN0KGVycm9yKTtcblx0XHQgICAgICAgIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBXcml0YWJsZVN0cmVhbURlYWxXaXRoUmVqZWN0aW9uKHN0cmVhbSwgZXJyb3IpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRDbG9zZShzdHJlYW0pIHtcblx0XHQgICAgICAgIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QuX3Jlc29sdmUodW5kZWZpbmVkKTtcblx0XHQgICAgICAgIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmluZycpIHtcblx0XHQgICAgICAgICAgICAvLyBUaGUgZXJyb3Igd2FzIHRvbyBsYXRlIHRvIGRvIGFueXRoaW5nLCBzbyBpdCBpcyBpZ25vcmVkLlxuXHRcdCAgICAgICAgICAgIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICAgICAgaWYgKHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcmVzb2x2ZSgpO1xuXHRcdCAgICAgICAgICAgICAgICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgc3RyZWFtLl9zdGF0ZSA9ICdjbG9zZWQnO1xuXHRcdCAgICAgICAgY29uc3Qgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7XG5cdFx0ICAgICAgICBpZiAod3JpdGVyICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUod3JpdGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0Q2xvc2VXaXRoRXJyb3Ioc3RyZWFtLCBlcnJvcikge1xuXHRcdCAgICAgICAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVqZWN0KGVycm9yKTtcblx0XHQgICAgICAgIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICAvLyBOZXZlciBleGVjdXRlIHNpbmsgYWJvcnQoKSBhZnRlciBzaW5rIGNsb3NlKCkuXG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3JlamVjdChlcnJvcik7XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvbihzdHJlYW0sIGVycm9yKTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBUT0RPKHJpY2VhKTogRml4IGFscGhhYmV0aWNhbCBvcmRlci5cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoc3RyZWFtKSB7XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9jbG9zZVJlcXVlc3QgPT09IHVuZGVmaW5lZCAmJiBzdHJlYW0uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUhhc09wZXJhdGlvbk1hcmtlZEluRmxpZ2h0KHN0cmVhbSkge1xuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPT09IHVuZGVmaW5lZCAmJiBzdHJlYW0uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbU1hcmtDbG9zZVJlcXVlc3RJbkZsaWdodChzdHJlYW0pIHtcblx0XHQgICAgICAgIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPSBzdHJlYW0uX2Nsb3NlUmVxdWVzdDtcblx0XHQgICAgICAgIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtTWFya0ZpcnN0V3JpdGVSZXF1ZXN0SW5GbGlnaHQoc3RyZWFtKSB7XG5cdFx0ICAgICAgICBzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0ID0gc3RyZWFtLl93cml0ZVJlcXVlc3RzLnNoaWZ0KCk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pIHtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX2Nsb3NlUmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl9jbG9zZVJlcXVlc3QuX3JlamVjdChzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgICAgICBzdHJlYW0uX2Nsb3NlUmVxdWVzdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHdyaXRlciA9IHN0cmVhbS5fd3JpdGVyO1xuXHRcdCAgICAgICAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZWplY3Qod3JpdGVyLCBzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbVVwZGF0ZUJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSkge1xuXHRcdCAgICAgICAgY29uc3Qgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7XG5cdFx0ICAgICAgICBpZiAod3JpdGVyICE9PSB1bmRlZmluZWQgJiYgYmFja3ByZXNzdXJlICE9PSBzdHJlYW0uX2JhY2twcmVzc3VyZSkge1xuXHRcdCAgICAgICAgICAgIGlmIChiYWNrcHJlc3N1cmUpIHtcblx0XHQgICAgICAgICAgICAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc2V0KHdyaXRlcik7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzb2x2ZSh3cml0ZXIpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHN0cmVhbS5fYmFja3ByZXNzdXJlID0gYmFja3ByZXNzdXJlO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBBIGRlZmF1bHQgd3JpdGVyIHZlbmRlZCBieSBhIHtAbGluayBXcml0YWJsZVN0cmVhbX0uXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlciB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcblx0XHQgICAgICAgICAgICBhc3NlcnRSZXF1aXJlZEFyZ3VtZW50KHN0cmVhbSwgMSwgJ1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcicpO1xuXHRcdCAgICAgICAgICAgIGFzc2VydFdyaXRhYmxlU3RyZWFtKHN0cmVhbSwgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIGlmIChJc1dyaXRhYmxlU3RyZWFtTG9ja2VkKHN0cmVhbSkpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSB3cml0aW5nIGJ5IGFub3RoZXIgd3JpdGVyJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0gPSBzdHJlYW07XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl93cml0ZXIgPSB0aGlzO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gc3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgICAgICBpZiAoc3RhdGUgPT09ICd3cml0YWJsZScpIHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKCFXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pICYmIHN0cmVhbS5fYmFja3ByZXNzdXJlKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZSh0aGlzKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZXNvbHZlZCh0aGlzKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUodGhpcyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnZXJyb3JpbmcnKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZCh0aGlzLCBzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgICAgICAgICAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHRoaXMpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcblx0XHQgICAgICAgICAgICAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHRoaXMpO1xuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHRoaXMpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVkRXJyb3IgPSBzdHJlYW0uX3N0b3JlZEVycm9yO1xuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQodGhpcywgc3RvcmVkRXJyb3IpO1xuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHRoaXMsIHN0b3JlZEVycm9yKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSBmdWxmaWxsZWQgd2hlbiB0aGUgc3RyZWFtIGJlY29tZXMgY2xvc2VkLCBvciByZWplY3RlZCBpZiB0aGUgc3RyZWFtIGV2ZXIgZXJyb3JzIG9yXG5cdFx0ICAgICAgICAgKiB0aGUgd3JpdGVy4oCZcyBsb2NrIGlzIHJlbGVhc2VkIGJlZm9yZSB0aGUgc3RyZWFtIGZpbmlzaGVzIGNsb3NpbmcuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBjbG9zZWQoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2xvc2VkJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkUHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogUmV0dXJucyB0aGUgZGVzaXJlZCBzaXplIHRvIGZpbGwgdGhlIHN0cmVhbeKAmXMgaW50ZXJuYWwgcXVldWUuIEl0IGNhbiBiZSBuZWdhdGl2ZSwgaWYgdGhlIHF1ZXVlIGlzIG92ZXItZnVsbC5cblx0XHQgICAgICAgICAqIEEgcHJvZHVjZXIgY2FuIHVzZSB0aGlzIGluZm9ybWF0aW9uIHRvIGRldGVybWluZSB0aGUgcmlnaHQgYW1vdW50IG9mIGRhdGEgdG8gd3JpdGUuXG5cdFx0ICAgICAgICAgKlxuXHRcdCAgICAgICAgICogSXQgd2lsbCBiZSBgbnVsbGAgaWYgdGhlIHN0cmVhbSBjYW5ub3QgYmUgc3VjY2Vzc2Z1bGx5IHdyaXR0ZW4gdG8gKGR1ZSB0byBlaXRoZXIgYmVpbmcgZXJyb3JlZCwgb3IgaGF2aW5nIGFuIGFib3J0XG5cdFx0ICAgICAgICAgKiBxdWV1ZWQgdXApLiBJdCB3aWxsIHJldHVybiB6ZXJvIGlmIHRoZSBzdHJlYW0gaXMgY2xvc2VkLiBBbmQgdGhlIGdldHRlciB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBpbnZva2VkIHdoZW5cblx0XHQgICAgICAgICAqIHRoZSB3cml0ZXLigJlzIGxvY2sgaXMgcmVsZWFzZWQuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBkZXNpcmVkU2l6ZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAodGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGRlZmF1bHRXcml0ZXJMb2NrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyR2V0RGVzaXJlZFNpemUodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSBmdWxmaWxsZWQgd2hlbiB0aGUgZGVzaXJlZCBzaXplIHRvIGZpbGwgdGhlIHN0cmVhbeKAmXMgaW50ZXJuYWwgcXVldWUgdHJhbnNpdGlvbnNcblx0XHQgICAgICAgICAqIGZyb20gbm9uLXBvc2l0aXZlIHRvIHBvc2l0aXZlLCBzaWduYWxpbmcgdGhhdCBpdCBpcyBubyBsb25nZXIgYXBwbHlpbmcgYmFja3ByZXNzdXJlLiBPbmNlIHRoZSBkZXNpcmVkIHNpemUgZGlwc1xuXHRcdCAgICAgICAgICogYmFjayB0byB6ZXJvIG9yIGJlbG93LCB0aGUgZ2V0dGVyIHdpbGwgcmV0dXJuIGEgbmV3IHByb21pc2UgdGhhdCBzdGF5cyBwZW5kaW5nIHVudGlsIHRoZSBuZXh0IHRyYW5zaXRpb24uXG5cdFx0ICAgICAgICAgKlxuXHRcdCAgICAgICAgICogSWYgdGhlIHN0cmVhbSBiZWNvbWVzIGVycm9yZWQgb3IgYWJvcnRlZCwgb3IgdGhlIHdyaXRlcuKAmXMgbG9jayBpcyByZWxlYXNlZCwgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZWNvbWVcblx0XHQgICAgICAgICAqIHJlamVjdGVkLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBnZXQgcmVhZHkoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZHknKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkeVByb21pc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIElmIHRoZSByZWFkZXIgaXMgYWN0aXZlLCBiZWhhdmVzIHRoZSBzYW1lIGFzIHtAbGluayBXcml0YWJsZVN0cmVhbS5hYm9ydCB8IHN0cmVhbS5hYm9ydChyZWFzb24pfS5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgYWJvcnQocmVhc29uID0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignYWJvcnQnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lcldyaXRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24oJ2Fib3J0JykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQWJvcnQodGhpcywgcmVhc29uKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogSWYgdGhlIHJlYWRlciBpcyBhY3RpdmUsIGJlaGF2ZXMgdGhlIHNhbWUgYXMge0BsaW5rIFdyaXRhYmxlU3RyZWFtLmNsb3NlIHwgc3RyZWFtLmNsb3NlKCl9LlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBjbG9zZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZScpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgICAgICBpZiAoc3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24oJ2Nsb3NlJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAoV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoc3RyZWFtKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2xvc2UgYW4gYWxyZWFkeS1jbG9zaW5nIHN0cmVhbScpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHRoaXMpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBSZWxlYXNlcyB0aGUgd3JpdGVy4oCZcyBsb2NrIG9uIHRoZSBjb3JyZXNwb25kaW5nIHN0cmVhbS4gQWZ0ZXIgdGhlIGxvY2sgaXMgcmVsZWFzZWQsIHRoZSB3cml0ZXIgaXMgbm8gbG9uZ2VyIGFjdGl2ZS5cblx0XHQgICAgICAgICAqIElmIHRoZSBhc3NvY2lhdGVkIHN0cmVhbSBpcyBlcnJvcmVkIHdoZW4gdGhlIGxvY2sgaXMgcmVsZWFzZWQsIHRoZSB3cml0ZXIgd2lsbCBhcHBlYXIgZXJyb3JlZCBpbiB0aGUgc2FtZSB3YXkgZnJvbVxuXHRcdCAgICAgICAgICogbm93IG9uOyBvdGhlcndpc2UsIHRoZSB3cml0ZXIgd2lsbCBhcHBlYXIgY2xvc2VkLlxuXHRcdCAgICAgICAgICpcblx0XHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgbG9jayBjYW4gc3RpbGwgYmUgcmVsZWFzZWQgZXZlbiBpZiBzb21lIG9uZ29pbmcgd3JpdGVzIGhhdmUgbm90IHlldCBmaW5pc2hlZCAoaS5lLiBldmVuIGlmIHRoZVxuXHRcdCAgICAgICAgICogcHJvbWlzZXMgcmV0dXJuZWQgZnJvbSBwcmV2aW91cyBjYWxscyB0byB7QGxpbmsgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLndyaXRlIHwgd3JpdGUoKX0gaGF2ZSBub3QgeWV0IHNldHRsZWQpLlxuXHRcdCAgICAgICAgICogSXTigJlzIG5vdCBuZWNlc3NhcnkgdG8gaG9sZCB0aGUgbG9jayBvbiB0aGUgd3JpdGVyIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHdyaXRlOyB0aGUgbG9jayBpbnN0ZWFkIHNpbXBseSBwcmV2ZW50c1xuXHRcdCAgICAgICAgICogb3RoZXIgcHJvZHVjZXJzIGZyb20gd3JpdGluZyBpbiBhbiBpbnRlcmxlYXZlZCBtYW5uZXIuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIHJlbGVhc2VMb2NrKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZGVmYXVsdFdyaXRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ3JlbGVhc2VMb2NrJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW07XG5cdFx0ICAgICAgICAgICAgaWYgKHN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyUmVsZWFzZSh0aGlzKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHdyaXRlKGNodW5rID0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignd3JpdGUnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9vd25lcldyaXRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24oJ3dyaXRlIHRvJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUodGhpcywgY2h1bmspO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlci5wcm90b3R5cGUsIHtcblx0XHQgICAgICAgIGFib3J0OiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGNsb3NlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHJlbGVhc2VMb2NrOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHdyaXRlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGNsb3NlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBkZXNpcmVkU2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICByZWFkeTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcblx0XHQgICAgICAgICAgICB2YWx1ZTogJ1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcicsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBBYnN0cmFjdCBvcGVyYXRpb25zIGZvciB0aGUgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLlxuXHRcdCAgICBmdW5jdGlvbiBJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih4KSB7XG5cdFx0ICAgICAgICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfb3duZXJXcml0YWJsZVN0cmVhbScpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gQSBjbGllbnQgb2YgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyIG1heSB1c2UgdGhlc2UgZnVuY3Rpb25zIGRpcmVjdGx5IHRvIGJ5cGFzcyBzdGF0ZSBjaGVjay5cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQWJvcnQod3JpdGVyLCByZWFzb24pIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KHN0cmVhbSwgcmVhc29uKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJDbG9zZSh3cml0ZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQ2xvc2VXaXRoRXJyb3JQcm9wYWdhdGlvbih3cml0ZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIGNvbnN0IHN0YXRlID0gc3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pIHx8IHN0YXRlID09PSAnY2xvc2VkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbS5fc3RvcmVkRXJyb3IpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHdyaXRlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyRW5zdXJlQ2xvc2VkUHJvbWlzZVJlamVjdGVkKHdyaXRlciwgZXJyb3IpIHtcblx0XHQgICAgICAgIGlmICh3cml0ZXIuX2Nsb3NlZFByb21pc2VTdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG5cdFx0ICAgICAgICAgICAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZWplY3Qod3JpdGVyLCBlcnJvcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlc2V0VG9SZWplY3RlZCh3cml0ZXIsIGVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJFbnN1cmVSZWFkeVByb21pc2VSZWplY3RlZCh3cml0ZXIsIGVycm9yKSB7XG5cdFx0ICAgICAgICBpZiAod3JpdGVyLl9yZWFkeVByb21pc2VTdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG5cdFx0ICAgICAgICAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIGVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFRvUmVqZWN0ZWQod3JpdGVyLCBlcnJvcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyR2V0RGVzaXJlZFNpemUod3JpdGVyKSB7XG5cdFx0ICAgICAgICBjb25zdCBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJyB8fCBzdGF0ZSA9PT0gJ2Vycm9yaW5nJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHN0YXRlID09PSAnY2xvc2VkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiAwO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyUmVsZWFzZSh3cml0ZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIGNvbnN0IHJlbGVhc2VkRXJyb3IgPSBuZXcgVHlwZUVycm9yKGBXcml0ZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtJ3MgY2xvc2VkbmVzc2ApO1xuXHRcdCAgICAgICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyRW5zdXJlUmVhZHlQcm9taXNlUmVqZWN0ZWQod3JpdGVyLCByZWxlYXNlZEVycm9yKTtcblx0XHQgICAgICAgIC8vIFRoZSBzdGF0ZSB0cmFuc2l0aW9ucyB0byBcImVycm9yZWRcIiBiZWZvcmUgdGhlIHNpbmsgYWJvcnQoKSBtZXRob2QgcnVucywgYnV0IHRoZSB3cml0ZXIuY2xvc2VkIHByb21pc2UgaXMgbm90XG5cdFx0ICAgICAgICAvLyByZWplY3RlZCB1bnRpbCBhZnRlcndhcmRzLiBUaGlzIG1lYW5zIHRoYXQgc2ltcGx5IHRlc3Rpbmcgc3RhdGUgd2lsbCBub3Qgd29yay5cblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZUNsb3NlZFByb21pc2VSZWplY3RlZCh3cml0ZXIsIHJlbGVhc2VkRXJyb3IpO1xuXHRcdCAgICAgICAgc3RyZWFtLl93cml0ZXIgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW0gPSB1bmRlZmluZWQ7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUod3JpdGVyLCBjaHVuaykge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gd3JpdGVyLl9vd25lcldyaXRhYmxlU3RyZWFtO1xuXHRcdCAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyO1xuXHRcdCAgICAgICAgY29uc3QgY2h1bmtTaXplID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldENodW5rU2l6ZShjb250cm9sbGVyLCBjaHVuayk7XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtICE9PSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW0pIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbignd3JpdGUgdG8nKSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJykge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbS5fc3RvcmVkRXJyb3IpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgfHwgc3RhdGUgPT09ICdjbG9zZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBpcyBjbG9zaW5nIG9yIGNsb3NlZCBhbmQgY2Fubm90IGJlIHdyaXR0ZW4gdG8nKSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmluZycpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHByb21pc2UgPSBXcml0YWJsZVN0cmVhbUFkZFdyaXRlUmVxdWVzdChzdHJlYW0pO1xuXHRcdCAgICAgICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcldyaXRlKGNvbnRyb2xsZXIsIGNodW5rLCBjaHVua1NpemUpO1xuXHRcdCAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cdFx0ICAgIH1cblx0XHQgICAgY29uc3QgY2xvc2VTZW50aW5lbCA9IHt9O1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQWxsb3dzIGNvbnRyb2wgb2YgYSB7QGxpbmsgV3JpdGFibGVTdHJlYW0gfCB3cml0YWJsZSBzdHJlYW19J3Mgc3RhdGUgYW5kIGludGVybmFsIHF1ZXVlLlxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcHVibGljXG5cdFx0ICAgICAqL1xuXHRcdCAgICBjbGFzcyBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIHtcblx0XHQgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgY29uc3RydWN0b3InKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogVGhlIHJlYXNvbiB3aGljaCB3YXMgcGFzc2VkIHRvIGBXcml0YWJsZVN0cmVhbS5hYm9ydChyZWFzb24pYCB3aGVuIHRoZSBzdHJlYW0gd2FzIGFib3J0ZWQuXG5cdFx0ICAgICAgICAgKlxuXHRcdCAgICAgICAgICogQGRlcHJlY2F0ZWRcblx0XHQgICAgICAgICAqICBUaGlzIHByb3BlcnR5IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgc3BlY2lmaWNhdGlvbiwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvc3RyZWFtcy9wdWxsLzExNzcuXG5cdFx0ICAgICAgICAgKiAgVXNlIHtAbGluayBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnNpZ25hbH0ncyBgcmVhc29uYCBpbnN0ZWFkLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBnZXQgYWJvcnRSZWFzb24oKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDIoJ2Fib3J0UmVhc29uJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9hYm9ydFJlYXNvbjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogQW4gYEFib3J0U2lnbmFsYCB0aGF0IGNhbiBiZSB1c2VkIHRvIGFib3J0IHRoZSBwZW5kaW5nIHdyaXRlIG9yIGNsb3NlIG9wZXJhdGlvbiB3aGVuIHRoZSBzdHJlYW0gaXMgYWJvcnRlZC5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0IHNpZ25hbCgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMignc2lnbmFsJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICh0aGlzLl9hYm9ydENvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICAvLyBPbGRlciBicm93c2VycyBvciBvbGRlciBOb2RlIHZlcnNpb25zIG1heSBub3Qgc3VwcG9ydCBgQWJvcnRDb250cm9sbGVyYCBvciBgQWJvcnRTaWduYWxgLlxuXHRcdCAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGJ1bmRsZSBhbmQgc2hpcCBhbiBgQWJvcnRDb250cm9sbGVyYCBwb2x5ZmlsbCB0b2dldGhlciB3aXRoIG91ciBwb2x5ZmlsbCxcblx0XHQgICAgICAgICAgICAgICAgLy8gc28gaW5zdGVhZCB3ZSBvbmx5IGltcGxlbWVudCBzdXBwb3J0IGZvciBgc2lnbmFsYCBpZiB3ZSBmaW5kIGEgZ2xvYmFsIGBBYm9ydENvbnRyb2xsZXJgIGNvbnN0cnVjdG9yLlxuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS5zaWduYWwgaXMgbm90IHN1cHBvcnRlZCcpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogQ2xvc2VzIHRoZSBjb250cm9sbGVkIHdyaXRhYmxlIHN0cmVhbSwgbWFraW5nIGFsbCBmdXR1cmUgaW50ZXJhY3Rpb25zIHdpdGggaXQgZmFpbCB3aXRoIHRoZSBnaXZlbiBlcnJvciBgZWAuXG5cdFx0ICAgICAgICAgKlxuXHRcdCAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcmFyZWx5IHVzZWQsIHNpbmNlIHVzdWFsbHkgaXQgc3VmZmljZXMgdG8gcmV0dXJuIGEgcmVqZWN0ZWQgcHJvbWlzZSBmcm9tIG9uZSBvZiB0aGUgdW5kZXJseWluZ1xuXHRcdCAgICAgICAgICogc2luaydzIG1ldGhvZHMuIEhvd2V2ZXIsIGl0IGNhbiBiZSB1c2VmdWwgZm9yIHN1ZGRlbmx5IHNodXR0aW5nIGRvd24gYSBzdHJlYW0gaW4gcmVzcG9uc2UgdG8gYW4gZXZlbnQgb3V0c2lkZSB0aGVcblx0XHQgICAgICAgICAqIG5vcm1hbCBsaWZlY3ljbGUgb2YgaW50ZXJhY3Rpb25zIHdpdGggdGhlIHVuZGVybHlpbmcgc2luay5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZXJyb3IoZSA9IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQyKCdlcnJvcicpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICAgICAgaWYgKHN0YXRlICE9PSAnd3JpdGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgICAgIC8vIFRoZSBzdHJlYW0gaXMgY2xvc2VkLCBlcnJvcmVkIG9yIHdpbGwgYmUgc29vbi4gVGhlIHNpbmsgY2FuJ3QgZG8gYW55dGhpbmcgdXNlZnVsIGlmIGl0IGdldHMgYW4gZXJyb3IgaGVyZSwgc29cblx0XHQgICAgICAgICAgICAgICAgLy8ganVzdCB0cmVhdCBpdCBhcyBhIG5vLW9wLlxuXHRcdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcih0aGlzLCBlKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cblx0XHQgICAgICAgIFtBYm9ydFN0ZXBzXShyZWFzb24pIHtcblx0XHQgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9hYm9ydEFsZ29yaXRobShyZWFzb24pO1xuXHRcdCAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXModGhpcyk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cblx0XHQgICAgICAgIFtFcnJvclN0ZXBzXSgpIHtcblx0XHQgICAgICAgICAgICBSZXNldFF1ZXVlKHRoaXMpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCB7XG5cdFx0ICAgICAgICBhYm9ydFJlYXNvbjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBzaWduYWw6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgZXJyb3I6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG5cdFx0ICAgIH0pO1xuXHRcdCAgICBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuXHRcdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcicsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBBYnN0cmFjdCBvcGVyYXRpb25zIGltcGxlbWVudGluZyBpbnRlcmZhY2UgcmVxdWlyZWQgYnkgdGhlIFdyaXRhYmxlU3RyZWFtLlxuXHRcdCAgICBmdW5jdGlvbiBJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbScpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW0gPSBzdHJlYW07XG5cdFx0ICAgICAgICBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG5cdFx0ICAgICAgICAvLyBOZWVkIHRvIHNldCB0aGUgc2xvdHMgc28gdGhhdCB0aGUgYXNzZXJ0IGRvZXNuJ3QgZmlyZS4gSW4gdGhlIHNwZWMgdGhlIHNsb3RzIGFscmVhZHkgZXhpc3QgaW1wbGljaXRseS5cblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3F1ZXVlID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fYWJvcnRSZWFzb24gPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9hYm9ydENvbnRyb2xsZXIgPSBjcmVhdGVBYm9ydENvbnRyb2xsZXIoKTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSBmYWxzZTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHNpemVBbGdvcml0aG07XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9zdHJhdGVneUhXTSA9IGhpZ2hXYXRlck1hcms7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl93cml0ZUFsZ29yaXRobSA9IHdyaXRlQWxnb3JpdGhtO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fY2xvc2VBbGdvcml0aG0gPSBjbG9zZUFsZ29yaXRobTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2Fib3J0QWxnb3JpdGhtID0gYWJvcnRBbGdvcml0aG07XG5cdFx0ICAgICAgICBjb25zdCBiYWNrcHJlc3N1cmUgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0QmFja3ByZXNzdXJlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgV3JpdGFibGVTdHJlYW1VcGRhdGVCYWNrcHJlc3N1cmUoc3RyZWFtLCBiYWNrcHJlc3N1cmUpO1xuXHRcdCAgICAgICAgY29uc3Qgc3RhcnRSZXN1bHQgPSBzdGFydEFsZ29yaXRobSgpO1xuXHRcdCAgICAgICAgY29uc3Qgc3RhcnRQcm9taXNlID0gcHJvbWlzZVJlc29sdmVkV2l0aChzdGFydFJlc3VsdCk7XG5cdFx0ICAgICAgICB1cG9uUHJvbWlzZShzdGFydFByb21pc2UsICgpID0+IHtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9zdGFydGVkID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQWR2YW5jZVF1ZXVlSWZOZWVkZWQoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICB9LCByID0+IHtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9zdGFydGVkID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlYWxXaXRoUmVqZWN0aW9uKHN0cmVhbSwgcik7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1Npbmsoc3RyZWFtLCB1bmRlcmx5aW5nU2luaywgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkge1xuXHRcdCAgICAgICAgY29uc3QgY29udHJvbGxlciA9IE9iamVjdC5jcmVhdGUoV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO1xuXHRcdCAgICAgICAgbGV0IHN0YXJ0QWxnb3JpdGhtID0gKCkgPT4gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgbGV0IHdyaXRlQWxnb3JpdGhtID0gKCkgPT4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgbGV0IGNsb3NlQWxnb3JpdGhtID0gKCkgPT4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgbGV0IGFib3J0QWxnb3JpdGhtID0gKCkgPT4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgaWYgKHVuZGVybHlpbmdTaW5rLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBzdGFydEFsZ29yaXRobSA9ICgpID0+IHVuZGVybHlpbmdTaW5rLnN0YXJ0KGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHVuZGVybHlpbmdTaW5rLndyaXRlICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICB3cml0ZUFsZ29yaXRobSA9IGNodW5rID0+IHVuZGVybHlpbmdTaW5rLndyaXRlKGNodW5rLCBjb250cm9sbGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICh1bmRlcmx5aW5nU2luay5jbG9zZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgY2xvc2VBbGdvcml0aG0gPSAoKSA9PiB1bmRlcmx5aW5nU2luay5jbG9zZSgpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHVuZGVybHlpbmdTaW5rLmFib3J0ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBhYm9ydEFsZ29yaXRobSA9IHJlYXNvbiA9PiB1bmRlcmx5aW5nU2luay5hYm9ydChyZWFzb24pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgU2V0VXBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHdyaXRlQWxnb3JpdGhtLCBjbG9zZUFsZ29yaXRobSwgYWJvcnRBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIENsZWFyQWxnb3JpdGhtcyBtYXkgYmUgY2FsbGVkIHR3aWNlLiBFcnJvcmluZyB0aGUgc2FtZSBzdHJlYW0gaW4gbXVsdGlwbGUgd2F5cyB3aWxsIG9mdGVuIHJlc3VsdCBpbiByZWR1bmRhbnQgY2FsbHMuXG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fd3JpdGVBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9jbG9zZUFsZ29yaXRobSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2Fib3J0QWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgY29udHJvbGxlci5fc3RyYXRlZ3lTaXplQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBFbnF1ZXVlVmFsdWVXaXRoU2l6ZShjb250cm9sbGVyLCBjbG9zZVNlbnRpbmVsLCAwKTtcblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJBZHZhbmNlUXVldWVJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0Q2h1bmtTaXplKGNvbnRyb2xsZXIsIGNodW5rKSB7XG5cdFx0ICAgICAgICB0cnkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0oY2h1bmspO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY2F0Y2ggKGNodW5rU2l6ZUUpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3JJZk5lZWRlZChjb250cm9sbGVyLCBjaHVua1NpemVFKTtcblx0XHQgICAgICAgICAgICByZXR1cm4gMTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUoY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNIC0gY29udHJvbGxlci5fcXVldWVUb3RhbFNpemU7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcldyaXRlKGNvbnRyb2xsZXIsIGNodW5rLCBjaHVua1NpemUpIHtcblx0XHQgICAgICAgIHRyeSB7XG5cdFx0ICAgICAgICAgICAgRW5xdWV1ZVZhbHVlV2l0aFNpemUoY29udHJvbGxlciwgY2h1bmssIGNodW5rU2l6ZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjYXRjaCAoZW5xdWV1ZUUpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3JJZk5lZWRlZChjb250cm9sbGVyLCBlbnF1ZXVlRSk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtO1xuXHRcdCAgICAgICAgaWYgKCFXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pICYmIHN0cmVhbS5fc3RhdGUgPT09ICd3cml0YWJsZScpIHtcblx0XHQgICAgICAgICAgICBjb25zdCBiYWNrcHJlc3N1cmUgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0QmFja3ByZXNzdXJlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtVXBkYXRlQmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJBZHZhbmNlUXVldWVJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBBYnN0cmFjdCBvcGVyYXRpb25zIGZvciB0aGUgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIGlmICghY29udHJvbGxlci5fc3RhcnRlZCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmluZycpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nKHN0cmVhbSk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKGNvbnRyb2xsZXIuX3F1ZXVlLmxlbmd0aCA9PT0gMCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHZhbHVlID0gUGVla1F1ZXVlVmFsdWUoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBpZiAodmFsdWUgPT09IGNsb3NlU2VudGluZWwpIHtcblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc0Nsb3NlKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclByb2Nlc3NXcml0ZShjb250cm9sbGVyLCB2YWx1ZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9ySWZOZWVkZWQoY29udHJvbGxlciwgZXJyb3IpIHtcblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW0uX3N0YXRlID09PSAnd3JpdGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc0Nsb3NlKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtTWFya0Nsb3NlUmVxdWVzdEluRmxpZ2h0KHN0cmVhbSk7XG5cdFx0ICAgICAgICBEZXF1ZXVlVmFsdWUoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBjb25zdCBzaW5rQ2xvc2VQcm9taXNlID0gY29udHJvbGxlci5fY2xvc2VBbGdvcml0aG0oKTtcblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICB1cG9uUHJvbWlzZShzaW5rQ2xvc2VQcm9taXNlLCAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlKHN0cmVhbSk7XG5cdFx0ICAgICAgICB9LCByZWFzb24gPT4ge1xuXHRcdCAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRDbG9zZVdpdGhFcnJvcihzdHJlYW0sIHJlYXNvbik7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc1dyaXRlKGNvbnRyb2xsZXIsIGNodW5rKSB7XG5cdFx0ICAgICAgICBjb25zdCBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07XG5cdFx0ICAgICAgICBXcml0YWJsZVN0cmVhbU1hcmtGaXJzdFdyaXRlUmVxdWVzdEluRmxpZ2h0KHN0cmVhbSk7XG5cdFx0ICAgICAgICBjb25zdCBzaW5rV3JpdGVQcm9taXNlID0gY29udHJvbGxlci5fd3JpdGVBbGdvcml0aG0oY2h1bmspO1xuXHRcdCAgICAgICAgdXBvblByb21pc2Uoc2lua1dyaXRlUHJvbWlzZSwgKCkgPT4ge1xuXHRcdCAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRXcml0ZShzdHJlYW0pO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gc3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgICAgICBEZXF1ZXVlVmFsdWUoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICAgICAgaWYgKCFXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pICYmIHN0YXRlID09PSAnd3JpdGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IGJhY2twcmVzc3VyZSA9IFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXRCYWNrcHJlc3N1cmUoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICAgICAgICAgIFdyaXRhYmxlU3RyZWFtVXBkYXRlQmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfSwgcmVhc29uID0+IHtcblx0XHQgICAgICAgICAgICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ3dyaXRhYmxlJykge1xuXHRcdCAgICAgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0V3JpdGVXaXRoRXJyb3Ioc3RyZWFtLCByZWFzb24pO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZShjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBjb25zdCBkZXNpcmVkU2l6ZSA9IFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKTtcblx0XHQgICAgICAgIHJldHVybiBkZXNpcmVkU2l6ZSA8PSAwO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEEgY2xpZW50IG9mIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgbWF5IHVzZSB0aGVzZSBmdW5jdGlvbnMgZGlyZWN0bHkgdG8gYnlwYXNzIHN0YXRlIGNoZWNrLlxuXHRcdCAgICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZXJyb3IpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtcblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBXcml0YWJsZVN0cmVhbVN0YXJ0RXJyb3Jpbmcoc3RyZWFtLCBlcnJvcik7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgdGhlIFdyaXRhYmxlU3RyZWFtLlxuXHRcdCAgICBmdW5jdGlvbiBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDIobmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS4ke25hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBXcml0YWJsZVN0cmVhbWApO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLlxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMihuYW1lKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuJHtuYW1lfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcmApO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIuXG5cdFx0ICAgIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpIHtcblx0XHQgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLiR7bmFtZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcmApO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJMb2NrRXhjZXB0aW9uKG5hbWUpIHtcblx0XHQgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdDYW5ub3QgJyArIG5hbWUgKyAnIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgd3JpdGVyJyk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHdyaXRlcikge1xuXHRcdCAgICAgICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlID0gbmV3UHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ICAgICAgICAgICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdCAgICAgICAgICAgIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSByZWplY3Q7XG5cdFx0ICAgICAgICAgICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlU3RhdGUgPSAncGVuZGluZyc7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKSB7XG5cdFx0ICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTtcblx0XHQgICAgICAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVqZWN0KHdyaXRlciwgcmVhc29uKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHdyaXRlcikge1xuXHRcdCAgICAgICAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHdyaXRlcik7XG5cdFx0ICAgICAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUod3JpdGVyKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbikge1xuXHRcdCAgICAgICAgaWYgKHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHNldFByb21pc2VJc0hhbmRsZWRUb1RydWUod3JpdGVyLl9jbG9zZWRQcm9taXNlKTtcblx0XHQgICAgICAgIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QocmVhc29uKTtcblx0XHQgICAgICAgIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIHdyaXRlci5fY2xvc2VkUHJvbWlzZVN0YXRlID0gJ3JlamVjdGVkJztcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlc2V0VG9SZWplY3RlZCh3cml0ZXIsIHJlYXNvbikge1xuXHRcdCAgICAgICAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZCh3cml0ZXIsIHJlYXNvbik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNvbHZlKHdyaXRlcikge1xuXHRcdCAgICAgICAgaWYgKHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlU3RhdGUgPSAncmVzb2x2ZWQnO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplKHdyaXRlcikge1xuXHRcdCAgICAgICAgd3JpdGVyLl9yZWFkeVByb21pc2UgPSBuZXdQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHQgICAgICAgICAgICB3cml0ZXIuX3JlYWR5UHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHQgICAgICAgICAgICB3cml0ZXIuX3JlYWR5UHJvbWlzZV9yZWplY3QgPSByZWplY3Q7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgICAgIHdyaXRlci5fcmVhZHlQcm9taXNlU3RhdGUgPSAncGVuZGluZyc7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKSB7XG5cdFx0ICAgICAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpO1xuXHRcdCAgICAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHdyaXRlcikge1xuXHRcdCAgICAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTtcblx0XHQgICAgICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNvbHZlKHdyaXRlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbikge1xuXHRcdCAgICAgICAgaWYgKHdyaXRlci5fcmVhZHlQcm9taXNlX3JlamVjdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZSh3cml0ZXIuX3JlYWR5UHJvbWlzZSk7XG5cdFx0ICAgICAgICB3cml0ZXIuX3JlYWR5UHJvbWlzZV9yZWplY3QocmVhc29uKTtcblx0XHQgICAgICAgIHdyaXRlci5fcmVhZHlQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICB3cml0ZXIuX3JlYWR5UHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICB3cml0ZXIuX3JlYWR5UHJvbWlzZVN0YXRlID0gJ3JlamVjdGVkJztcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzZXQod3JpdGVyKSB7XG5cdFx0ICAgICAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFRvUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pIHtcblx0XHQgICAgICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZCh3cml0ZXIsIHJlYXNvbik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmUod3JpdGVyKSB7XG5cdFx0ICAgICAgICBpZiAod3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIHdyaXRlci5fcmVhZHlQcm9taXNlX3JlamVjdCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIHdyaXRlci5fcmVhZHlQcm9taXNlU3RhdGUgPSAnZnVsZmlsbGVkJztcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5cdFx0ICAgIGNvbnN0IE5hdGl2ZURPTUV4Y2VwdGlvbiA9IHR5cGVvZiBET01FeGNlcHRpb24gIT09ICd1bmRlZmluZWQnID8gRE9NRXhjZXB0aW9uIDogdW5kZWZpbmVkO1xuXG5cdFx0ICAgIC8vLyA8cmVmZXJlbmNlIHR5cGVzPVwibm9kZVwiIC8+XG5cdFx0ICAgIGZ1bmN0aW9uIGlzRE9NRXhjZXB0aW9uQ29uc3RydWN0b3IoY3Rvcikge1xuXHRcdCAgICAgICAgaWYgKCEodHlwZW9mIGN0b3IgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGN0b3IgPT09ICdvYmplY3QnKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHRyeSB7XG5cdFx0ICAgICAgICAgICAgbmV3IGN0b3IoKTtcblx0XHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNhdGNoIChfYSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjcmVhdGVET01FeGNlcHRpb25Qb2x5ZmlsbCgpIHtcblx0XHQgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcblx0XHQgICAgICAgIGNvbnN0IGN0b3IgPSBmdW5jdGlvbiBET01FeGNlcHRpb24obWVzc2FnZSwgbmFtZSkge1xuXHRcdCAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgJyc7XG5cdFx0ICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZSB8fCAnRXJyb3InO1xuXHRcdCAgICAgICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuXHRcdCAgICAgICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9O1xuXHRcdCAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIHsgdmFsdWU6IGN0b3IsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5cdFx0ICAgICAgICByZXR1cm4gY3Rvcjtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5cdFx0ICAgIGNvbnN0IERPTUV4Y2VwdGlvbiQxID0gaXNET01FeGNlcHRpb25Db25zdHJ1Y3RvcihOYXRpdmVET01FeGNlcHRpb24pID8gTmF0aXZlRE9NRXhjZXB0aW9uIDogY3JlYXRlRE9NRXhjZXB0aW9uUG9seWZpbGwoKTtcblxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVBpcGVUbyhzb3VyY2UsIGRlc3QsIHByZXZlbnRDbG9zZSwgcHJldmVudEFib3J0LCBwcmV2ZW50Q2FuY2VsLCBzaWduYWwpIHtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRlciA9IEFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc291cmNlKTtcblx0XHQgICAgICAgIGNvbnN0IHdyaXRlciA9IEFjcXVpcmVXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoZGVzdCk7XG5cdFx0ICAgICAgICBzb3VyY2UuX2Rpc3R1cmJlZCA9IHRydWU7XG5cdFx0ICAgICAgICBsZXQgc2h1dHRpbmdEb3duID0gZmFsc2U7XG5cdFx0ICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgc3BlYydzIHJlcXVpcmVtZW50IHRoYXQgd2Ugd2FpdCBmb3Igb25nb2luZyB3cml0ZXMgZHVyaW5nIHNodXRkb3duLlxuXHRcdCAgICAgICAgbGV0IGN1cnJlbnRXcml0ZSA9IHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcblx0XHQgICAgICAgIHJldHVybiBuZXdQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHQgICAgICAgICAgICBsZXQgYWJvcnRBbGdvcml0aG07XG5cdFx0ICAgICAgICAgICAgaWYgKHNpZ25hbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGFib3J0QWxnb3JpdGhtID0gKCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRE9NRXhjZXB0aW9uJDEoJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2ZW50QWJvcnQpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goKCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdC5fc3RhdGUgPT09ICd3cml0YWJsZScpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KGRlc3QsIGVycm9yKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2ZW50Q2FuY2VsKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKCgpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5fc3RhdGUgPT09ICdyZWFkYWJsZScpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUNhbmNlbChzb3VyY2UsIGVycm9yKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgc2h1dGRvd25XaXRoQWN0aW9uKCgpID0+IFByb21pc2UuYWxsKGFjdGlvbnMubWFwKGFjdGlvbiA9PiBhY3Rpb24oKSkpLCB0cnVlLCBlcnJvcik7XG5cdFx0ICAgICAgICAgICAgICAgIH07XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYWJvcnRBbGdvcml0aG0oKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFsZ29yaXRobSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIC8vIFVzaW5nIHJlYWRlciBhbmQgd3JpdGVyLCByZWFkIGFsbCBjaHVua3MgZnJvbSB0aGlzIGFuZCB3cml0ZSB0aGVtIHRvIGRlc3Rcblx0XHQgICAgICAgICAgICAvLyAtIEJhY2twcmVzc3VyZSBtdXN0IGJlIGVuZm9yY2VkXG5cdFx0ICAgICAgICAgICAgLy8gLSBTaHV0ZG93biBtdXN0IHN0b3AgYWxsIGFjdGl2aXR5XG5cdFx0ICAgICAgICAgICAgZnVuY3Rpb24gcGlwZUxvb3AoKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXdQcm9taXNlKChyZXNvbHZlTG9vcCwgcmVqZWN0TG9vcCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbmV4dChkb25lKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUxvb3AoKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBgUGVyZm9ybVByb21pc2VUaGVuYCBpbnN0ZWFkIG9mIGB1cG9uUHJvbWlzZWAgdG8gYXZvaWRcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkaW5nIHVubmVjZXNzYXJ5IGAuY2F0Y2gocmV0aHJvd0Fzc2VydGlvbkVycm9yUmVqZWN0aW9uKWAgaGFuZGxlcnNcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGVyZm9ybVByb21pc2VUaGVuKHBpcGVTdGVwKCksIG5leHQsIHJlamVjdExvb3ApO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIG5leHQoZmFsc2UpO1xuXHRcdCAgICAgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgZnVuY3Rpb24gcGlwZVN0ZXAoKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChzaHV0dGluZ0Rvd24pIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHRydWUpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBQZXJmb3JtUHJvbWlzZVRoZW4od3JpdGVyLl9yZWFkeVByb21pc2UsICgpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdQcm9taXNlKChyZXNvbHZlUmVhZCwgcmVqZWN0UmVhZCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlYWQocmVhZGVyLCB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaHVua1N0ZXBzOiBjaHVuayA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50V3JpdGUgPSBQZXJmb3JtUHJvbWlzZVRoZW4oV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUod3JpdGVyLCBjaHVuayksIHVuZGVmaW5lZCwgbm9vcCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlUmVhZChmYWxzZSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZVN0ZXBzOiAoKSA9PiByZXNvbHZlUmVhZCh0cnVlKSxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Vycm9yU3RlcHM6IHJlamVjdFJlYWRcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgLy8gRXJyb3JzIG11c3QgYmUgcHJvcGFnYXRlZCBmb3J3YXJkXG5cdFx0ICAgICAgICAgICAgaXNPckJlY29tZXNFcnJvcmVkKHNvdXJjZSwgcmVhZGVyLl9jbG9zZWRQcm9taXNlLCBzdG9yZWRFcnJvciA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgIGlmICghcHJldmVudEFib3J0KSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBzaHV0ZG93bldpdGhBY3Rpb24oKCkgPT4gV3JpdGFibGVTdHJlYW1BYm9ydChkZXN0LCBzdG9yZWRFcnJvciksIHRydWUsIHN0b3JlZEVycm9yKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHNodXRkb3duKHRydWUsIHN0b3JlZEVycm9yKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgIC8vIEVycm9ycyBtdXN0IGJlIHByb3BhZ2F0ZWQgYmFja3dhcmRcblx0XHQgICAgICAgICAgICBpc09yQmVjb21lc0Vycm9yZWQoZGVzdCwgd3JpdGVyLl9jbG9zZWRQcm9taXNlLCBzdG9yZWRFcnJvciA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgIGlmICghcHJldmVudENhbmNlbCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgc2h1dGRvd25XaXRoQWN0aW9uKCgpID0+IFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHNvdXJjZSwgc3RvcmVkRXJyb3IpLCB0cnVlLCBzdG9yZWRFcnJvcik7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBzaHV0ZG93bih0cnVlLCBzdG9yZWRFcnJvcik7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICAvLyBDbG9zaW5nIG11c3QgYmUgcHJvcGFnYXRlZCBmb3J3YXJkXG5cdFx0ICAgICAgICAgICAgaXNPckJlY29tZXNDbG9zZWQoc291cmNlLCByZWFkZXIuX2Nsb3NlZFByb21pc2UsICgpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKCFwcmV2ZW50Q2xvc2UpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHNodXRkb3duV2l0aEFjdGlvbigoKSA9PiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJDbG9zZVdpdGhFcnJvclByb3BhZ2F0aW9uKHdyaXRlcikpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgc2h1dGRvd24oKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgIC8vIENsb3NpbmcgbXVzdCBiZSBwcm9wYWdhdGVkIGJhY2t3YXJkXG5cdFx0ICAgICAgICAgICAgaWYgKFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KGRlc3QpIHx8IGRlc3QuX3N0YXRlID09PSAnY2xvc2VkJykge1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBkZXN0Q2xvc2VkID0gbmV3IFR5cGVFcnJvcigndGhlIGRlc3RpbmF0aW9uIHdyaXRhYmxlIHN0cmVhbSBjbG9zZWQgYmVmb3JlIGFsbCBkYXRhIGNvdWxkIGJlIHBpcGVkIHRvIGl0Jyk7XG5cdFx0ICAgICAgICAgICAgICAgIGlmICghcHJldmVudENhbmNlbCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgc2h1dGRvd25XaXRoQWN0aW9uKCgpID0+IFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHNvdXJjZSwgZGVzdENsb3NlZCksIHRydWUsIGRlc3RDbG9zZWQpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgc2h1dGRvd24odHJ1ZSwgZGVzdENsb3NlZCk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwaXBlTG9vcCgpKTtcblx0XHQgICAgICAgICAgICBmdW5jdGlvbiB3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSB7XG5cdFx0ICAgICAgICAgICAgICAgIC8vIEFub3RoZXIgd3JpdGUgbWF5IGhhdmUgc3RhcnRlZCB3aGlsZSB3ZSB3ZXJlIHdhaXRpbmcgb24gdGhpcyBjdXJyZW50V3JpdGUsIHNvIHdlIGhhdmUgdG8gYmUgc3VyZSB0byB3YWl0XG5cdFx0ICAgICAgICAgICAgICAgIC8vIGZvciB0aGF0IHRvby5cblx0XHQgICAgICAgICAgICAgICAgY29uc3Qgb2xkQ3VycmVudFdyaXRlID0gY3VycmVudFdyaXRlO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gUGVyZm9ybVByb21pc2VUaGVuKGN1cnJlbnRXcml0ZSwgKCkgPT4gb2xkQ3VycmVudFdyaXRlICE9PSBjdXJyZW50V3JpdGUgPyB3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSA6IHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGZ1bmN0aW9uIGlzT3JCZWNvbWVzRXJyb3JlZChzdHJlYW0sIHByb21pc2UsIGFjdGlvbikge1xuXHRcdCAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24oc3RyZWFtLl9zdG9yZWRFcnJvcik7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB1cG9uUmVqZWN0aW9uKHByb21pc2UsIGFjdGlvbik7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgZnVuY3Rpb24gaXNPckJlY29tZXNDbG9zZWQoc3RyZWFtLCBwcm9taXNlLCBhY3Rpb24pIHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24oKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHVwb25GdWxmaWxsbWVudChwcm9taXNlLCBhY3Rpb24pO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGZ1bmN0aW9uIHNodXRkb3duV2l0aEFjdGlvbihhY3Rpb24sIG9yaWdpbmFsSXNFcnJvciwgb3JpZ2luYWxFcnJvcikge1xuXHRcdCAgICAgICAgICAgICAgICBpZiAoc2h1dHRpbmdEb3duKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgc2h1dHRpbmdEb3duID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICAgICAgaWYgKGRlc3QuX3N0YXRlID09PSAnd3JpdGFibGUnICYmICFXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChkZXN0KSkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdXBvbkZ1bGZpbGxtZW50KHdhaXRGb3JXcml0ZXNUb0ZpbmlzaCgpLCBkb1RoZVJlc3QpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgZG9UaGVSZXN0KCk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9UaGVSZXN0KCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdXBvblByb21pc2UoYWN0aW9uKCksICgpID0+IGZpbmFsaXplKG9yaWdpbmFsSXNFcnJvciwgb3JpZ2luYWxFcnJvciksIG5ld0Vycm9yID0+IGZpbmFsaXplKHRydWUsIG5ld0Vycm9yKSk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgZnVuY3Rpb24gc2h1dGRvd24oaXNFcnJvciwgZXJyb3IpIHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHNodXR0aW5nRG93bikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIHNodXR0aW5nRG93biA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChkZXN0Ll9zdGF0ZSA9PT0gJ3dyaXRhYmxlJyAmJiAhV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoZGVzdCkpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHVwb25GdWxmaWxsbWVudCh3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSwgKCkgPT4gZmluYWxpemUoaXNFcnJvciwgZXJyb3IpKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIGZpbmFsaXplKGlzRXJyb3IsIGVycm9yKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBmdW5jdGlvbiBmaW5hbGl6ZShpc0Vycm9yLCBlcnJvcikge1xuXHRcdCAgICAgICAgICAgICAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJSZWxlYXNlKHdyaXRlcik7XG5cdFx0ICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHNpZ25hbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFsZ29yaXRobSk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBBbGxvd3MgY29udHJvbCBvZiBhIHtAbGluayBSZWFkYWJsZVN0cmVhbSB8IHJlYWRhYmxlIHN0cmVhbX0ncyBzdGF0ZSBhbmQgaW50ZXJuYWwgcXVldWUuXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIge1xuXHRcdCAgICAgICAgY29uc3RydWN0b3IoKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBjb25zdHJ1Y3RvcicpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXNpcmVkIHNpemUgdG8gZmlsbCB0aGUgY29udHJvbGxlZCBzdHJlYW0ncyBpbnRlcm5hbCBxdWV1ZS4gSXQgY2FuIGJlIG5lZ2F0aXZlLCBpZiB0aGUgcXVldWUgaXNcblx0XHQgICAgICAgICAqIG92ZXItZnVsbC4gQW4gdW5kZXJseWluZyBzb3VyY2Ugb3VnaHQgdG8gdXNlIHRoaXMgaW5mb3JtYXRpb24gdG8gZGV0ZXJtaW5lIHdoZW4gYW5kIGhvdyB0byBhcHBseSBiYWNrcHJlc3N1cmUuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBkZXNpcmVkU2l6ZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMSgnZGVzaXJlZFNpemUnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZSh0aGlzKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogQ2xvc2VzIHRoZSBjb250cm9sbGVkIHJlYWRhYmxlIHN0cmVhbS4gQ29uc3VtZXJzIHdpbGwgc3RpbGwgYmUgYWJsZSB0byByZWFkIGFueSBwcmV2aW91c2x5LWVucXVldWVkIGNodW5rcyBmcm9tXG5cdFx0ICAgICAgICAgKiB0aGUgc3RyZWFtLCBidXQgb25jZSB0aG9zZSBhcmUgcmVhZCwgdGhlIHN0cmVhbSB3aWxsIGJlY29tZSBjbG9zZWQuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGNsb3NlKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdjbG9zZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAoIVJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYW5DbG9zZU9yRW5xdWV1ZSh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgc3RyZWFtIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBjbG9zZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBlbnF1ZXVlKGNodW5rID0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2VucXVldWUnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKCFSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBpcyBub3QgaW4gYSBzdGF0ZSB0aGF0IHBlcm1pdHMgZW5xdWV1ZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUodGhpcywgY2h1bmspO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBFcnJvcnMgdGhlIGNvbnRyb2xsZWQgcmVhZGFibGUgc3RyZWFtLCBtYWtpbmcgYWxsIGZ1dHVyZSBpbnRlcmFjdGlvbnMgd2l0aCBpdCBmYWlsIHdpdGggdGhlIGdpdmVuIGVycm9yIGBlYC5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZXJyb3IoZSA9IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdlcnJvcicpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IodGhpcywgZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKiogQGludGVybmFsICovXG5cdFx0ICAgICAgICBbQ2FuY2VsU3RlcHNdKHJlYXNvbikge1xuXHRcdCAgICAgICAgICAgIFJlc2V0UXVldWUodGhpcyk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fY2FuY2VsQWxnb3JpdGhtKHJlYXNvbik7XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTtcblx0XHQgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuXHRcdCAgICAgICAgW1B1bGxTdGVwc10ocmVhZFJlcXVlc3QpIHtcblx0XHQgICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07XG5cdFx0ICAgICAgICAgICAgaWYgKHRoaXMuX3F1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBEZXF1ZXVlVmFsdWUodGhpcyk7XG5cdFx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jbG9zZVJlcXVlc3RlZCAmJiB0aGlzLl9xdWV1ZS5sZW5ndGggPT09IDApIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXModGhpcyk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCh0aGlzKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICByZWFkUmVxdWVzdC5fY2h1bmtTdGVwcyhjaHVuayk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0KHN0cmVhbSwgcmVhZFJlcXVlc3QpO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCh0aGlzKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsIHtcblx0XHQgICAgICAgIGNsb3NlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGVucXVldWU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgZXJyb3I6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgZGVzaXJlZFNpemU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG5cdFx0ICAgIH0pO1xuXHRcdCAgICBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuXHRcdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcicsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBBYnN0cmFjdCBvcGVyYXRpb25zIGZvciB0aGUgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5cblx0XHQgICAgZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHgpIHtcblx0XHQgICAgICAgIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19jb250cm9sbGVkUmVhZGFibGVTdHJlYW0nKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBjb25zdCBzaG91bGRQdWxsID0gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclNob3VsZENhbGxQdWxsKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgaWYgKCFzaG91bGRQdWxsKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKGNvbnRyb2xsZXIuX3B1bGxpbmcpIHtcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyLl9wdWxsQWdhaW4gPSB0cnVlO1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSB0cnVlO1xuXHRcdCAgICAgICAgY29uc3QgcHVsbFByb21pc2UgPSBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtKCk7XG5cdFx0ICAgICAgICB1cG9uUHJvbWlzZShwdWxsUHJvbWlzZSwgKCkgPT4ge1xuXHRcdCAgICAgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICBpZiAoY29udHJvbGxlci5fcHVsbEFnYWluKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9LCBlID0+IHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyU2hvdWxkQ2FsbFB1bGwoY29udHJvbGxlcikge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO1xuXHRcdCAgICAgICAgaWYgKCFSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIWNvbnRyb2xsZXIuX3N0YXJ0ZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pICYmIFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZFJlcXVlc3RzKHN0cmVhbSkgPiAwKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBkZXNpcmVkU2l6ZSA9IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKTtcblx0XHQgICAgICAgIGlmIChkZXNpcmVkU2l6ZSA+IDApIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9jYW5jZWxBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gQSBjbGllbnQgb2YgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciBtYXkgdXNlIHRoZXNlIGZ1bmN0aW9ucyBkaXJlY3RseSB0byBieXBhc3Mgc3RhdGUgY2hlY2suXG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBpZiAoIVJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYW5DbG9zZU9yRW5xdWV1ZShjb250cm9sbGVyKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2Nsb3NlUmVxdWVzdGVkID0gdHJ1ZTtcblx0XHQgICAgICAgIGlmIChjb250cm9sbGVyLl9xdWV1ZS5sZW5ndGggPT09IDApIHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuaykge1xuXHRcdCAgICAgICAgaWYgKCFSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikpIHtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBjb25zdCBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07XG5cdFx0ICAgICAgICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pICYmIFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZFJlcXVlc3RzKHN0cmVhbSkgPiAwKSB7XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3Qoc3RyZWFtLCBjaHVuaywgZmFsc2UpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgbGV0IGNodW5rU2l6ZTtcblx0XHQgICAgICAgICAgICB0cnkge1xuXHRcdCAgICAgICAgICAgICAgICBjaHVua1NpemUgPSBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0oY2h1bmspO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjYXRjaCAoY2h1bmtTaXplRSkge1xuXHRcdCAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgY2h1bmtTaXplRSk7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGNodW5rU2l6ZUU7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHRyeSB7XG5cdFx0ICAgICAgICAgICAgICAgIEVucXVldWVWYWx1ZVdpdGhTaXplKGNvbnRyb2xsZXIsIGNodW5rLCBjaHVua1NpemUpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjYXRjaCAoZW5xdWV1ZUUpIHtcblx0XHQgICAgICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVucXVldWVFKTtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZW5xdWV1ZUU7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3N0YXRlICE9PSAncmVhZGFibGUnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgUmVzZXRRdWV1ZShjb250cm9sbGVyKTtcblx0XHQgICAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICBSZWFkYWJsZVN0cmVhbUVycm9yKHN0cmVhbSwgZSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0YXRlID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIDA7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gY29udHJvbGxlci5fc3RyYXRlZ3lIV00gLSBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBUaGlzIGlzIHVzZWQgaW4gdGhlIGltcGxlbWVudGF0aW9uIG9mIFRyYW5zZm9ybVN0cmVhbS5cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckhhc0JhY2twcmVzc3VyZShjb250cm9sbGVyKSB7XG5cdFx0ICAgICAgICBpZiAoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclNob3VsZENhbGxQdWxsKGNvbnRyb2xsZXIpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0YXRlID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtLl9zdGF0ZTtcblx0XHQgICAgICAgIGlmICghY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQgJiYgc3RhdGUgPT09ICdyZWFkYWJsZScpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW0gPSBzdHJlYW07XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9xdWV1ZSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgUmVzZXRRdWV1ZShjb250cm9sbGVyKTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSBmYWxzZTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2Nsb3NlUmVxdWVzdGVkID0gZmFsc2U7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9wdWxsQWdhaW4gPSBmYWxzZTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHNpemVBbGdvcml0aG07XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9zdHJhdGVneUhXTSA9IGhpZ2hXYXRlck1hcms7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtID0gcHVsbEFsZ29yaXRobTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2NhbmNlbEFsZ29yaXRobSA9IGNhbmNlbEFsZ29yaXRobTtcblx0XHQgICAgICAgIHN0cmVhbS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyID0gY29udHJvbGxlcjtcblx0XHQgICAgICAgIGNvbnN0IHN0YXJ0UmVzdWx0ID0gc3RhcnRBbGdvcml0aG0oKTtcblx0XHQgICAgICAgIHVwb25Qcm9taXNlKHByb21pc2VSZXNvbHZlZFdpdGgoc3RhcnRSZXN1bHQpLCAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgY29udHJvbGxlci5fc3RhcnRlZCA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICB9LCByID0+IHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgcik7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NvdXJjZShzdHJlYW0sIHVuZGVybHlpbmdTb3VyY2UsIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pIHtcblx0XHQgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlKTtcblx0XHQgICAgICAgIGxldCBzdGFydEFsZ29yaXRobSA9ICgpID0+IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGxldCBwdWxsQWxnb3JpdGhtID0gKCkgPT4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgbGV0IGNhbmNlbEFsZ29yaXRobSA9ICgpID0+IHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcblx0XHQgICAgICAgIGlmICh1bmRlcmx5aW5nU291cmNlLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBzdGFydEFsZ29yaXRobSA9ICgpID0+IHVuZGVybHlpbmdTb3VyY2Uuc3RhcnQoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAodW5kZXJseWluZ1NvdXJjZS5wdWxsICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBwdWxsQWxnb3JpdGhtID0gKCkgPT4gdW5kZXJseWluZ1NvdXJjZS5wdWxsKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHVuZGVybHlpbmdTb3VyY2UuY2FuY2VsICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBjYW5jZWxBbGdvcml0aG0gPSByZWFzb24gPT4gdW5kZXJseWluZ1NvdXJjZS5jYW5jZWwocmVhc29uKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIFNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWxBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLlxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMShuYW1lKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuJHtuYW1lfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcmApO1xuXHRcdCAgICB9XG5cblx0XHQgICAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1UZWUoc3RyZWFtLCBjbG9uZUZvckJyYW5jaDIpIHtcblx0XHQgICAgICAgIGlmIChJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIFJlYWRhYmxlQnl0ZVN0cmVhbVRlZShzdHJlYW0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFRlZShzdHJlYW0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFRlZShzdHJlYW0sIGNsb25lRm9yQnJhbmNoMikge1xuXHRcdCAgICAgICAgY29uc3QgcmVhZGVyID0gQWNxdWlyZVJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzdHJlYW0pO1xuXHRcdCAgICAgICAgbGV0IHJlYWRpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgIGxldCByZWFkQWdhaW4gPSBmYWxzZTtcblx0XHQgICAgICAgIGxldCBjYW5jZWxlZDEgPSBmYWxzZTtcblx0XHQgICAgICAgIGxldCBjYW5jZWxlZDIgPSBmYWxzZTtcblx0XHQgICAgICAgIGxldCByZWFzb24xO1xuXHRcdCAgICAgICAgbGV0IHJlYXNvbjI7XG5cdFx0ICAgICAgICBsZXQgYnJhbmNoMTtcblx0XHQgICAgICAgIGxldCBicmFuY2gyO1xuXHRcdCAgICAgICAgbGV0IHJlc29sdmVDYW5jZWxQcm9taXNlO1xuXHRcdCAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ld1Byb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0ICAgICAgICAgICAgcmVzb2x2ZUNhbmNlbFByb21pc2UgPSByZXNvbHZlO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICBmdW5jdGlvbiBwdWxsQWxnb3JpdGhtKCkge1xuXHRcdCAgICAgICAgICAgIGlmIChyZWFkaW5nKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJlYWRBZ2FpbiA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJlYWRpbmcgPSB0cnVlO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHJlYWRSZXF1ZXN0ID0ge1xuXHRcdCAgICAgICAgICAgICAgICBfY2h1bmtTdGVwczogY2h1bmsgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBkZWxheWVkIGEgbWljcm90YXNrIGJlY2F1c2UgaXQgdGFrZXMgYXQgbGVhc3QgYSBtaWNyb3Rhc2sgdG8gZGV0ZWN0IGVycm9ycyAodXNpbmdcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIHJlYWRlci5fY2xvc2VkUHJvbWlzZSBiZWxvdyksIGFuZCB3ZSB3YW50IGVycm9ycyBpbiBzdHJlYW0gdG8gZXJyb3IgYm90aCBicmFuY2hlcyBpbW1lZGlhdGVseS4gV2UgY2Fubm90IGxldFxuXHRcdCAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2Vzc2Z1bCBzeW5jaHJvbm91c2x5LWF2YWlsYWJsZSByZWFkcyBnZXQgYWhlYWQgb2YgYXN5bmNocm9ub3VzbHktYXZhaWxhYmxlIGVycm9ycy5cblx0XHQgICAgICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICByZWFkQWdhaW4gPSBmYWxzZTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuazEgPSBjaHVuaztcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuazIgPSBjaHVuaztcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyB3YXkgdG8gYWNjZXNzIHRoZSBjbG9uaW5nIGNvZGUgcmlnaHQgbm93IGluIHRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24uXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYWRkIG9uZSB0aGVuIHdlJ2xsIG5lZWQgYW4gaW1wbGVtZW50YXRpb24gZm9yIHNlcmlhbGl6YWJsZSBvYmplY3RzLlxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmICghY2FuY2VsZWQyICYmIGNsb25lRm9yQnJhbmNoMikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY2h1bmsyID0gU3RydWN0dXJlZERlc2VyaWFsaXplKFN0cnVjdHVyZWRTZXJpYWxpemUoY2h1bmsyKSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWQxKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgY2h1bmsxKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxlZDIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCBjaHVuazIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgICAgICByZWFkaW5nID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWRBZ2Fpbikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWxsQWxnb3JpdGhtKCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgICAgIF9jbG9zZVN0ZXBzOiAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZWFkaW5nID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkMSkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShicmFuY2gxLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxlZDIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWQxIHx8ICFjYW5jZWxlZDIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FuY2VsUHJvbWlzZSh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgICAgICBfZXJyb3JTdGVwczogKCkgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmVhZGluZyA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJSZWFkKHJlYWRlciwgcmVhZFJlcXVlc3QpO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmdW5jdGlvbiBjYW5jZWwxQWxnb3JpdGhtKHJlYXNvbikge1xuXHRcdCAgICAgICAgICAgIGNhbmNlbGVkMSA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgcmVhc29uMSA9IHJlYXNvbjtcblx0XHQgICAgICAgICAgICBpZiAoY2FuY2VsZWQyKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvc2l0ZVJlYXNvbiA9IENyZWF0ZUFycmF5RnJvbUxpc3QoW3JlYXNvbjEsIHJlYXNvbjJdKTtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgY2FuY2VsUmVzdWx0ID0gUmVhZGFibGVTdHJlYW1DYW5jZWwoc3RyZWFtLCBjb21wb3NpdGVSZWFzb24pO1xuXHRcdCAgICAgICAgICAgICAgICByZXNvbHZlQ2FuY2VsUHJvbWlzZShjYW5jZWxSZXN1bHQpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gY2FuY2VsUHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGZ1bmN0aW9uIGNhbmNlbDJBbGdvcml0aG0ocmVhc29uKSB7XG5cdFx0ICAgICAgICAgICAgY2FuY2VsZWQyID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICByZWFzb24yID0gcmVhc29uO1xuXHRcdCAgICAgICAgICAgIGlmIChjYW5jZWxlZDEpIHtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgY29tcG9zaXRlUmVhc29uID0gQ3JlYXRlQXJyYXlGcm9tTGlzdChbcmVhc29uMSwgcmVhc29uMl0pO1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxSZXN1bHQgPSBSZWFkYWJsZVN0cmVhbUNhbmNlbChzdHJlYW0sIGNvbXBvc2l0ZVJlYXNvbik7XG5cdFx0ICAgICAgICAgICAgICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKGNhbmNlbFJlc3VsdCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBjYW5jZWxQcm9taXNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZnVuY3Rpb24gc3RhcnRBbGdvcml0aG0oKSB7XG5cdFx0ICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgYnJhbmNoMSA9IENyZWF0ZVJlYWRhYmxlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWwxQWxnb3JpdGhtKTtcblx0XHQgICAgICAgIGJyYW5jaDIgPSBDcmVhdGVSZWFkYWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsMkFsZ29yaXRobSk7XG5cdFx0ICAgICAgICB1cG9uUmVqZWN0aW9uKHJlYWRlci5fY2xvc2VkUHJvbWlzZSwgKHIpID0+IHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoYnJhbmNoMS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCByKTtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCByKTtcblx0XHQgICAgICAgICAgICBpZiAoIWNhbmNlbGVkMSB8fCAhY2FuY2VsZWQyKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICByZXR1cm4gW2JyYW5jaDEsIGJyYW5jaDJdO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbVRlZShzdHJlYW0pIHtcblx0XHQgICAgICAgIGxldCByZWFkZXIgPSBBY3F1aXJlUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHN0cmVhbSk7XG5cdFx0ICAgICAgICBsZXQgcmVhZGluZyA9IGZhbHNlO1xuXHRcdCAgICAgICAgbGV0IHJlYWRBZ2FpbkZvckJyYW5jaDEgPSBmYWxzZTtcblx0XHQgICAgICAgIGxldCByZWFkQWdhaW5Gb3JCcmFuY2gyID0gZmFsc2U7XG5cdFx0ICAgICAgICBsZXQgY2FuY2VsZWQxID0gZmFsc2U7XG5cdFx0ICAgICAgICBsZXQgY2FuY2VsZWQyID0gZmFsc2U7XG5cdFx0ICAgICAgICBsZXQgcmVhc29uMTtcblx0XHQgICAgICAgIGxldCByZWFzb24yO1xuXHRcdCAgICAgICAgbGV0IGJyYW5jaDE7XG5cdFx0ICAgICAgICBsZXQgYnJhbmNoMjtcblx0XHQgICAgICAgIGxldCByZXNvbHZlQ2FuY2VsUHJvbWlzZTtcblx0XHQgICAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXdQcm9taXNlKHJlc29sdmUgPT4ge1xuXHRcdCAgICAgICAgICAgIHJlc29sdmVDYW5jZWxQcm9taXNlID0gcmVzb2x2ZTtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICAgICAgZnVuY3Rpb24gZm9yd2FyZFJlYWRlckVycm9yKHRoaXNSZWFkZXIpIHtcblx0XHQgICAgICAgICAgICB1cG9uUmVqZWN0aW9uKHRoaXNSZWFkZXIuX2Nsb3NlZFByb21pc2UsIHIgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICBpZiAodGhpc1JlYWRlciAhPT0gcmVhZGVyKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgcik7XG5cdFx0ICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFcnJvcihicmFuY2gyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIHIpO1xuXHRcdCAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkMSB8fCAhY2FuY2VsZWQyKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FuY2VsUHJvbWlzZSh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmdW5jdGlvbiBwdWxsV2l0aERlZmF1bHRSZWFkZXIoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKElzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHJlYWRlcikpIHtcblx0XHQgICAgICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZShyZWFkZXIpO1xuXHRcdCAgICAgICAgICAgICAgICByZWFkZXIgPSBBY3F1aXJlUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHN0cmVhbSk7XG5cdFx0ICAgICAgICAgICAgICAgIGZvcndhcmRSZWFkZXJFcnJvcihyZWFkZXIpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCByZWFkUmVxdWVzdCA9IHtcblx0XHQgICAgICAgICAgICAgICAgX2NodW5rU3RlcHM6IGNodW5rID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgZGVsYXllZCBhIG1pY3JvdGFzayBiZWNhdXNlIGl0IHRha2VzIGF0IGxlYXN0IGEgbWljcm90YXNrIHRvIGRldGVjdCBlcnJvcnMgKHVzaW5nXG5cdFx0ICAgICAgICAgICAgICAgICAgICAvLyByZWFkZXIuX2Nsb3NlZFByb21pc2UgYmVsb3cpLCBhbmQgd2Ugd2FudCBlcnJvcnMgaW4gc3RyZWFtIHRvIGVycm9yIGJvdGggYnJhbmNoZXMgaW1tZWRpYXRlbHkuIFdlIGNhbm5vdCBsZXRcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NmdWwgc3luY2hyb25vdXNseS1hdmFpbGFibGUgcmVhZHMgZ2V0IGFoZWFkIG9mIGFzeW5jaHJvbm91c2x5LWF2YWlsYWJsZSBlcnJvcnMuXG5cdFx0ICAgICAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVhZEFnYWluRm9yQnJhbmNoMSA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRBZ2FpbkZvckJyYW5jaDIgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuazEgPSBjaHVuaztcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2h1bmsyID0gY2h1bms7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxlZDEgJiYgIWNhbmNlbGVkMikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsyID0gQ2xvbmVBc1VpbnQ4QXJyYXkoY2h1bmspO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChjbG9uZUUpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFcnJvcihicmFuY2gxLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIGNsb25lRSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCBjbG9uZUUpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbmNlbFByb21pc2UoUmVhZGFibGVTdHJlYW1DYW5jZWwoc3RyZWFtLCBjbG9uZUUpKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkMSkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZShicmFuY2gxLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIGNodW5rMSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWQyKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlKGJyYW5jaDIuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgY2h1bmsyKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGluZyA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFkQWdhaW5Gb3JCcmFuY2gxKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1bGwxQWxnb3JpdGhtKCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlYWRBZ2FpbkZvckJyYW5jaDIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVsbDJBbGdvcml0aG0oKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICAgICAgX2Nsb3NlU3RlcHM6ICgpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJlYWRpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWQxKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsb3NlKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkMikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbG9zZShicmFuY2gyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmQoYnJhbmNoMS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCAwKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIGlmIChicmFuY2gyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kKGJyYW5jaDIuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgMCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkMSB8fCAhY2FuY2VsZWQyKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbmNlbFByb21pc2UodW5kZWZpbmVkKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICAgICAgX2Vycm9yU3RlcHM6ICgpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJlYWRpbmcgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH07XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZChyZWFkZXIsIHJlYWRSZXF1ZXN0KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGZ1bmN0aW9uIHB1bGxXaXRoQllPQlJlYWRlcih2aWV3LCBmb3JCcmFuY2gyKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKElzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHJlYWRlcikpIHtcblx0XHQgICAgICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZShyZWFkZXIpO1xuXHRcdCAgICAgICAgICAgICAgICByZWFkZXIgPSBBY3F1aXJlUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHN0cmVhbSk7XG5cdFx0ICAgICAgICAgICAgICAgIGZvcndhcmRSZWFkZXJFcnJvcihyZWFkZXIpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBieW9iQnJhbmNoID0gZm9yQnJhbmNoMiA/IGJyYW5jaDIgOiBicmFuY2gxO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IG90aGVyQnJhbmNoID0gZm9yQnJhbmNoMiA/IGJyYW5jaDEgOiBicmFuY2gyO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IHJlYWRJbnRvUmVxdWVzdCA9IHtcblx0XHQgICAgICAgICAgICAgICAgX2NodW5rU3RlcHM6IGNodW5rID0+IHtcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgZGVsYXllZCBhIG1pY3JvdGFzayBiZWNhdXNlIGl0IHRha2VzIGF0IGxlYXN0IGEgbWljcm90YXNrIHRvIGRldGVjdCBlcnJvcnMgKHVzaW5nXG5cdFx0ICAgICAgICAgICAgICAgICAgICAvLyByZWFkZXIuX2Nsb3NlZFByb21pc2UgYmVsb3cpLCBhbmQgd2Ugd2FudCBlcnJvcnMgaW4gc3RyZWFtIHRvIGVycm9yIGJvdGggYnJhbmNoZXMgaW1tZWRpYXRlbHkuIFdlIGNhbm5vdCBsZXRcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NmdWwgc3luY2hyb25vdXNseS1hdmFpbGFibGUgcmVhZHMgZ2V0IGFoZWFkIG9mIGFzeW5jaHJvbm91c2x5LWF2YWlsYWJsZSBlcnJvcnMuXG5cdFx0ICAgICAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVhZEFnYWluRm9yQnJhbmNoMSA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRBZ2FpbkZvckJyYW5jaDIgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBieW9iQ2FuY2VsZWQgPSBmb3JCcmFuY2gyID8gY2FuY2VsZWQyIDogY2FuY2VsZWQxO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyQ2FuY2VsZWQgPSBmb3JCcmFuY2gyID8gY2FuY2VsZWQxIDogY2FuY2VsZWQyO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3RoZXJDYW5jZWxlZCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xvbmVkQ2h1bms7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRDaHVuayA9IENsb25lQXNVaW50OEFycmF5KGNodW5rKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoY2xvbmVFKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoYnlvYkJyYW5jaC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCBjbG9uZUUpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKG90aGVyQnJhbmNoLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIGNsb25lRSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FuY2VsUHJvbWlzZShSZWFkYWJsZVN0cmVhbUNhbmNlbChzdHJlYW0sIGNsb25lRSkpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYnlvYkNhbmNlbGVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZFdpdGhOZXdWaWV3KGJ5b2JCcmFuY2guX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgY2h1bmspO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlKG90aGVyQnJhbmNoLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIGNsb25lZENodW5rKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWJ5b2JDYW5jZWxlZCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZFdpdGhOZXdWaWV3KGJ5b2JCcmFuY2guX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgY2h1bmspO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgICAgICByZWFkaW5nID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWRBZ2FpbkZvckJyYW5jaDEpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVsbDFBbGdvcml0aG0oKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVhZEFnYWluRm9yQnJhbmNoMikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWxsMkFsZ29yaXRobSgpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgICAgICBfY2xvc2VTdGVwczogY2h1bmsgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmVhZGluZyA9IGZhbHNlO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgY29uc3QgYnlvYkNhbmNlbGVkID0gZm9yQnJhbmNoMiA/IGNhbmNlbGVkMiA6IGNhbmNlbGVkMTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyQ2FuY2VsZWQgPSBmb3JCcmFuY2gyID8gY2FuY2VsZWQxIDogY2FuY2VsZWQyO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKCFieW9iQ2FuY2VsZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xvc2UoYnlvYkJyYW5jaC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIGlmICghb3RoZXJDYW5jZWxlZCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbG9zZShvdGhlckJyYW5jaC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIGlmIChjaHVuayAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFieW9iQ2FuY2VsZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRXaXRoTmV3VmlldyhieW9iQnJhbmNoLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIGNodW5rKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvdGhlckNhbmNlbGVkICYmIG90aGVyQnJhbmNoLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZChvdGhlckJyYW5jaC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCAwKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWJ5b2JDYW5jZWxlZCB8fCAhb3RoZXJDYW5jZWxlZCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgICAgIF9lcnJvclN0ZXBzOiAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZWFkaW5nID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9O1xuXHRcdCAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclJlYWQocmVhZGVyLCB2aWV3LCByZWFkSW50b1JlcXVlc3QpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZnVuY3Rpb24gcHVsbDFBbGdvcml0aG0oKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKHJlYWRpbmcpIHtcblx0XHQgICAgICAgICAgICAgICAgcmVhZEFnYWluRm9yQnJhbmNoMSA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJlYWRpbmcgPSB0cnVlO1xuXHRcdCAgICAgICAgICAgIGNvbnN0IGJ5b2JSZXF1ZXN0ID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldEJZT0JSZXF1ZXN0KGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7XG5cdFx0ICAgICAgICAgICAgaWYgKGJ5b2JSZXF1ZXN0ID09PSBudWxsKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHB1bGxXaXRoRGVmYXVsdFJlYWRlcigpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgcHVsbFdpdGhCWU9CUmVhZGVyKGJ5b2JSZXF1ZXN0Ll92aWV3LCBmYWxzZSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmdW5jdGlvbiBwdWxsMkFsZ29yaXRobSgpIHtcblx0XHQgICAgICAgICAgICBpZiAocmVhZGluZykge1xuXHRcdCAgICAgICAgICAgICAgICByZWFkQWdhaW5Gb3JCcmFuY2gyID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmVhZGluZyA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgY29uc3QgYnlvYlJlcXVlc3QgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyR2V0QllPQlJlcXVlc3QoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKTtcblx0XHQgICAgICAgICAgICBpZiAoYnlvYlJlcXVlc3QgPT09IG51bGwpIHtcblx0XHQgICAgICAgICAgICAgICAgcHVsbFdpdGhEZWZhdWx0UmVhZGVyKCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBwdWxsV2l0aEJZT0JSZWFkZXIoYnlvYlJlcXVlc3QuX3ZpZXcsIHRydWUpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZnVuY3Rpb24gY2FuY2VsMUFsZ29yaXRobShyZWFzb24pIHtcblx0XHQgICAgICAgICAgICBjYW5jZWxlZDEgPSB0cnVlO1xuXHRcdCAgICAgICAgICAgIHJlYXNvbjEgPSByZWFzb247XG5cdFx0ICAgICAgICAgICAgaWYgKGNhbmNlbGVkMikge1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBjb21wb3NpdGVSZWFzb24gPSBDcmVhdGVBcnJheUZyb21MaXN0KFtyZWFzb24xLCByZWFzb24yXSk7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IGNhbmNlbFJlc3VsdCA9IFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHN0cmVhbSwgY29tcG9zaXRlUmVhc29uKTtcblx0XHQgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbmNlbFByb21pc2UoY2FuY2VsUmVzdWx0KTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGNhbmNlbFByb21pc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmdW5jdGlvbiBjYW5jZWwyQWxnb3JpdGhtKHJlYXNvbikge1xuXHRcdCAgICAgICAgICAgIGNhbmNlbGVkMiA9IHRydWU7XG5cdFx0ICAgICAgICAgICAgcmVhc29uMiA9IHJlYXNvbjtcblx0XHQgICAgICAgICAgICBpZiAoY2FuY2VsZWQxKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvc2l0ZVJlYXNvbiA9IENyZWF0ZUFycmF5RnJvbUxpc3QoW3JlYXNvbjEsIHJlYXNvbjJdKTtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgY2FuY2VsUmVzdWx0ID0gUmVhZGFibGVTdHJlYW1DYW5jZWwoc3RyZWFtLCBjb21wb3NpdGVSZWFzb24pO1xuXHRcdCAgICAgICAgICAgICAgICByZXNvbHZlQ2FuY2VsUHJvbWlzZShjYW5jZWxSZXN1bHQpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gY2FuY2VsUHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGZ1bmN0aW9uIHN0YXJ0QWxnb3JpdGhtKCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGJyYW5jaDEgPSBDcmVhdGVSZWFkYWJsZUJ5dGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGwxQWxnb3JpdGhtLCBjYW5jZWwxQWxnb3JpdGhtKTtcblx0XHQgICAgICAgIGJyYW5jaDIgPSBDcmVhdGVSZWFkYWJsZUJ5dGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGwyQWxnb3JpdGhtLCBjYW5jZWwyQWxnb3JpdGhtKTtcblx0XHQgICAgICAgIGZvcndhcmRSZWFkZXJFcnJvcihyZWFkZXIpO1xuXHRcdCAgICAgICAgcmV0dXJuIFticmFuY2gxLCBicmFuY2gyXTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIGZ1bmN0aW9uIGNvbnZlcnRVbmRlcmx5aW5nRGVmYXVsdE9yQnl0ZVNvdXJjZShzb3VyY2UsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGFzc2VydERpY3Rpb25hcnkoc291cmNlLCBjb250ZXh0KTtcblx0XHQgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gc291cmNlO1xuXHRcdCAgICAgICAgY29uc3QgYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLmF1dG9BbGxvY2F0ZUNodW5rU2l6ZTtcblx0XHQgICAgICAgIGNvbnN0IGNhbmNlbCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5jYW5jZWw7XG5cdFx0ICAgICAgICBjb25zdCBwdWxsID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLnB1bGw7XG5cdFx0ICAgICAgICBjb25zdCBzdGFydCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5zdGFydDtcblx0XHQgICAgICAgIGNvbnN0IHR5cGUgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwudHlwZTtcblx0XHQgICAgICAgIHJldHVybiB7XG5cdFx0ICAgICAgICAgICAgYXV0b0FsbG9jYXRlQ2h1bmtTaXplOiBhdXRvQWxsb2NhdGVDaHVua1NpemUgPT09IHVuZGVmaW5lZCA/XG5cdFx0ICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnZlcnRVbnNpZ25lZExvbmdMb25nV2l0aEVuZm9yY2VSYW5nZShhdXRvQWxsb2NhdGVDaHVua1NpemUsIGAke2NvbnRleHR9IGhhcyBtZW1iZXIgJ2F1dG9BbGxvY2F0ZUNodW5rU2l6ZScgdGhhdGApLFxuXHRcdCAgICAgICAgICAgIGNhbmNlbDogY2FuY2VsID09PSB1bmRlZmluZWQgP1xuXHRcdCAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuXHRcdCAgICAgICAgICAgICAgICBjb252ZXJ0VW5kZXJseWluZ1NvdXJjZUNhbmNlbENhbGxiYWNrKGNhbmNlbCwgb3JpZ2luYWwsIGAke2NvbnRleHR9IGhhcyBtZW1iZXIgJ2NhbmNlbCcgdGhhdGApLFxuXHRcdCAgICAgICAgICAgIHB1bGw6IHB1bGwgPT09IHVuZGVmaW5lZCA/XG5cdFx0ICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnZlcnRVbmRlcmx5aW5nU291cmNlUHVsbENhbGxiYWNrKHB1bGwsIG9yaWdpbmFsLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICdwdWxsJyB0aGF0YCksXG5cdFx0ICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ID09PSB1bmRlZmluZWQgP1xuXHRcdCAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuXHRcdCAgICAgICAgICAgICAgICBjb252ZXJ0VW5kZXJseWluZ1NvdXJjZVN0YXJ0Q2FsbGJhY2soc3RhcnQsIG9yaWdpbmFsLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICdzdGFydCcgdGhhdGApLFxuXHRcdCAgICAgICAgICAgIHR5cGU6IHR5cGUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRSZWFkYWJsZVN0cmVhbVR5cGUodHlwZSwgYCR7Y29udGV4dH0gaGFzIG1lbWJlciAndHlwZScgdGhhdGApXG5cdFx0ICAgICAgICB9O1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGNvbnZlcnRVbmRlcmx5aW5nU291cmNlQ2FuY2VsQ2FsbGJhY2soZm4sIG9yaWdpbmFsLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG5cdFx0ICAgICAgICByZXR1cm4gKHJlYXNvbikgPT4gcHJvbWlzZUNhbGwoZm4sIG9yaWdpbmFsLCBbcmVhc29uXSk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTb3VyY2VQdWxsQ2FsbGJhY2soZm4sIG9yaWdpbmFsLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG5cdFx0ICAgICAgICByZXR1cm4gKGNvbnRyb2xsZXIpID0+IHByb21pc2VDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0VW5kZXJseWluZ1NvdXJjZVN0YXJ0Q2FsbGJhY2soZm4sIG9yaWdpbmFsLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG5cdFx0ICAgICAgICByZXR1cm4gKGNvbnRyb2xsZXIpID0+IHJlZmxlY3RDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0UmVhZGFibGVTdHJlYW1UeXBlKHR5cGUsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIHR5cGUgPSBgJHt0eXBlfWA7XG5cdFx0ICAgICAgICBpZiAodHlwZSAhPT0gJ2J5dGVzJykge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7Y29udGV4dH0gJyR7dHlwZX0nIGlzIG5vdCBhIHZhbGlkIGVudW1lcmF0aW9uIHZhbHVlIGZvciBSZWFkYWJsZVN0cmVhbVR5cGVgKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB0eXBlO1xuXHRcdCAgICB9XG5cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFJlYWRlck9wdGlvbnMob3B0aW9ucywgY29udGV4dCkge1xuXHRcdCAgICAgICAgYXNzZXJ0RGljdGlvbmFyeShvcHRpb25zLCBjb250ZXh0KTtcblx0XHQgICAgICAgIGNvbnN0IG1vZGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubW9kZTtcblx0XHQgICAgICAgIHJldHVybiB7XG5cdFx0ICAgICAgICAgICAgbW9kZTogbW9kZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY29udmVydFJlYWRhYmxlU3RyZWFtUmVhZGVyTW9kZShtb2RlLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICdtb2RlJyB0aGF0YClcblx0XHQgICAgICAgIH07XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFJlYWRhYmxlU3RyZWFtUmVhZGVyTW9kZShtb2RlLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBtb2RlID0gYCR7bW9kZX1gO1xuXHRcdCAgICAgICAgaWYgKG1vZGUgIT09ICdieW9iJykge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7Y29udGV4dH0gJyR7bW9kZX0nIGlzIG5vdCBhIHZhbGlkIGVudW1lcmF0aW9uIHZhbHVlIGZvciBSZWFkYWJsZVN0cmVhbVJlYWRlck1vZGVgKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBtb2RlO1xuXHRcdCAgICB9XG5cblx0XHQgICAgZnVuY3Rpb24gY29udmVydEl0ZXJhdG9yT3B0aW9ucyhvcHRpb25zLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnREaWN0aW9uYXJ5KG9wdGlvbnMsIGNvbnRleHQpO1xuXHRcdCAgICAgICAgY29uc3QgcHJldmVudENhbmNlbCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wcmV2ZW50Q2FuY2VsO1xuXHRcdCAgICAgICAgcmV0dXJuIHsgcHJldmVudENhbmNlbDogQm9vbGVhbihwcmV2ZW50Q2FuY2VsKSB9O1xuXHRcdCAgICB9XG5cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFBpcGVPcHRpb25zKG9wdGlvbnMsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGFzc2VydERpY3Rpb25hcnkob3B0aW9ucywgY29udGV4dCk7XG5cdFx0ICAgICAgICBjb25zdCBwcmV2ZW50QWJvcnQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucHJldmVudEFib3J0O1xuXHRcdCAgICAgICAgY29uc3QgcHJldmVudENhbmNlbCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wcmV2ZW50Q2FuY2VsO1xuXHRcdCAgICAgICAgY29uc3QgcHJldmVudENsb3NlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZXZlbnRDbG9zZTtcblx0XHQgICAgICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaWduYWw7XG5cdFx0ICAgICAgICBpZiAoc2lnbmFsICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBhc3NlcnRBYm9ydFNpZ25hbChzaWduYWwsIGAke2NvbnRleHR9IGhhcyBtZW1iZXIgJ3NpZ25hbCcgdGhhdGApO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHtcblx0XHQgICAgICAgICAgICBwcmV2ZW50QWJvcnQ6IEJvb2xlYW4ocHJldmVudEFib3J0KSxcblx0XHQgICAgICAgICAgICBwcmV2ZW50Q2FuY2VsOiBCb29sZWFuKHByZXZlbnRDYW5jZWwpLFxuXHRcdCAgICAgICAgICAgIHByZXZlbnRDbG9zZTogQm9vbGVhbihwcmV2ZW50Q2xvc2UpLFxuXHRcdCAgICAgICAgICAgIHNpZ25hbFxuXHRcdCAgICAgICAgfTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBhc3NlcnRBYm9ydFNpZ25hbChzaWduYWwsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGlmICghaXNBYm9ydFNpZ25hbChzaWduYWwpKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtjb250ZXh0fSBpcyBub3QgYW4gQWJvcnRTaWduYWwuYCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0UmVhZGFibGVXcml0YWJsZVBhaXIocGFpciwgY29udGV4dCkge1xuXHRcdCAgICAgICAgYXNzZXJ0RGljdGlvbmFyeShwYWlyLCBjb250ZXh0KTtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRhYmxlID0gcGFpciA9PT0gbnVsbCB8fCBwYWlyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWlyLnJlYWRhYmxlO1xuXHRcdCAgICAgICAgYXNzZXJ0UmVxdWlyZWRGaWVsZChyZWFkYWJsZSwgJ3JlYWRhYmxlJywgJ1JlYWRhYmxlV3JpdGFibGVQYWlyJyk7XG5cdFx0ICAgICAgICBhc3NlcnRSZWFkYWJsZVN0cmVhbShyZWFkYWJsZSwgYCR7Y29udGV4dH0gaGFzIG1lbWJlciAncmVhZGFibGUnIHRoYXRgKTtcblx0XHQgICAgICAgIGNvbnN0IHdyaXRhYmxlID0gcGFpciA9PT0gbnVsbCB8fCBwYWlyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWlyLndyaXRhYmxlO1xuXHRcdCAgICAgICAgYXNzZXJ0UmVxdWlyZWRGaWVsZCh3cml0YWJsZSwgJ3dyaXRhYmxlJywgJ1JlYWRhYmxlV3JpdGFibGVQYWlyJyk7XG5cdFx0ICAgICAgICBhc3NlcnRXcml0YWJsZVN0cmVhbSh3cml0YWJsZSwgYCR7Y29udGV4dH0gaGFzIG1lbWJlciAnd3JpdGFibGUnIHRoYXRgKTtcblx0XHQgICAgICAgIHJldHVybiB7IHJlYWRhYmxlLCB3cml0YWJsZSB9O1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEEgcmVhZGFibGUgc3RyZWFtIHJlcHJlc2VudHMgYSBzb3VyY2Ugb2YgZGF0YSwgZnJvbSB3aGljaCB5b3UgY2FuIHJlYWQuXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFJlYWRhYmxlU3RyZWFtIHtcblx0XHQgICAgICAgIGNvbnN0cnVjdG9yKHJhd1VuZGVybHlpbmdTb3VyY2UgPSB7fSwgcmF3U3RyYXRlZ3kgPSB7fSkge1xuXHRcdCAgICAgICAgICAgIGlmIChyYXdVbmRlcmx5aW5nU291cmNlID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmF3VW5kZXJseWluZ1NvdXJjZSA9IG51bGw7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBhc3NlcnRPYmplY3QocmF3VW5kZXJseWluZ1NvdXJjZSwgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBzdHJhdGVneSA9IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3kocmF3U3RyYXRlZ3ksICdTZWNvbmQgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgdW5kZXJseWluZ1NvdXJjZSA9IGNvbnZlcnRVbmRlcmx5aW5nRGVmYXVsdE9yQnl0ZVNvdXJjZShyYXdVbmRlcmx5aW5nU291cmNlLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgSW5pdGlhbGl6ZVJlYWRhYmxlU3RyZWFtKHRoaXMpO1xuXHRcdCAgICAgICAgICAgIGlmICh1bmRlcmx5aW5nU291cmNlLnR5cGUgPT09ICdieXRlcycpIHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHN0cmF0ZWd5LnNpemUgIT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBzdHJhdGVneSBmb3IgYSBieXRlIHN0cmVhbSBjYW5ub3QgaGF2ZSBhIHNpemUgZnVuY3Rpb24nKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBoaWdoV2F0ZXJNYXJrID0gRXh0cmFjdEhpZ2hXYXRlck1hcmsoc3RyYXRlZ3ksIDApO1xuXHRcdCAgICAgICAgICAgICAgICBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NvdXJjZSh0aGlzLCB1bmRlcmx5aW5nU291cmNlLCBoaWdoV2F0ZXJNYXJrKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IHNpemVBbGdvcml0aG0gPSBFeHRyYWN0U2l6ZUFsZ29yaXRobShzdHJhdGVneSk7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IGhpZ2hXYXRlck1hcmsgPSBFeHRyYWN0SGlnaFdhdGVyTWFyayhzdHJhdGVneSwgMSk7XG5cdFx0ICAgICAgICAgICAgICAgIFNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU291cmNlKHRoaXMsIHVuZGVybHlpbmdTb3VyY2UsIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogV2hldGhlciBvciBub3QgdGhlIHJlYWRhYmxlIHN0cmVhbSBpcyBsb2NrZWQgdG8gYSB7QGxpbmsgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyIHwgcmVhZGVyfS5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0IGxvY2tlZCgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdsb2NrZWQnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIElzUmVhZGFibGVTdHJlYW1Mb2NrZWQodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIENhbmNlbHMgdGhlIHN0cmVhbSwgc2lnbmFsaW5nIGEgbG9zcyBvZiBpbnRlcmVzdCBpbiB0aGUgc3RyZWFtIGJ5IGEgY29uc3VtZXIuXG5cdFx0ICAgICAgICAgKlxuXHRcdCAgICAgICAgICogVGhlIHN1cHBsaWVkIGByZWFzb25gIGFyZ3VtZW50IHdpbGwgYmUgZ2l2ZW4gdG8gdGhlIHVuZGVybHlpbmcgc291cmNlJ3Mge0BsaW5rIFVuZGVybHlpbmdTb3VyY2UuY2FuY2VsIHwgY2FuY2VsKCl9XG5cdFx0ICAgICAgICAgKiBtZXRob2QsIHdoaWNoIG1pZ2h0IG9yIG1pZ2h0IG5vdCB1c2UgaXQuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGNhbmNlbChyZWFzb24gPSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdjYW5jZWwnKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYW5jZWwgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHJlYWRlcicpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHRoaXMsIHJlYXNvbik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBnZXRSZWFkZXIocmF3T3B0aW9ucyA9IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbSh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2dldFJlYWRlcicpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gY29udmVydFJlYWRlck9wdGlvbnMocmF3T3B0aW9ucywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIGlmIChvcHRpb25zLm1vZGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gQWNxdWlyZVJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIEFjcXVpcmVSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBwaXBlVGhyb3VnaChyYXdUcmFuc2Zvcm0sIHJhd09wdGlvbnMgPSB7fSkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbSh0aGlzKSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ3BpcGVUaHJvdWdoJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQocmF3VHJhbnNmb3JtLCAxLCAncGlwZVRocm91Z2gnKTtcblx0XHQgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBjb252ZXJ0UmVhZGFibGVXcml0YWJsZVBhaXIocmF3VHJhbnNmb3JtLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnZlcnRQaXBlT3B0aW9ucyhyYXdPcHRpb25zLCAnU2Vjb25kIHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVGhyb3VnaCBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAoSXNXcml0YWJsZVN0cmVhbUxvY2tlZCh0cmFuc2Zvcm0ud3JpdGFibGUpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVGhyb3VnaCBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBXcml0YWJsZVN0cmVhbScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gUmVhZGFibGVTdHJlYW1QaXBlVG8odGhpcywgdHJhbnNmb3JtLndyaXRhYmxlLCBvcHRpb25zLnByZXZlbnRDbG9zZSwgb3B0aW9ucy5wcmV2ZW50QWJvcnQsIG9wdGlvbnMucHJldmVudENhbmNlbCwgb3B0aW9ucy5zaWduYWwpO1xuXHRcdCAgICAgICAgICAgIHNldFByb21pc2VJc0hhbmRsZWRUb1RydWUocHJvbWlzZSk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybS5yZWFkYWJsZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHBpcGVUbyhkZXN0aW5hdGlvbiwgcmF3T3B0aW9ucyA9IHt9KSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSgncGlwZVRvJykpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChgUGFyYW1ldGVyIDEgaXMgcmVxdWlyZWQgaW4gJ3BpcGVUbycuYCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGlmICghSXNXcml0YWJsZVN0cmVhbShkZXN0aW5hdGlvbikpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbydzIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBXcml0YWJsZVN0cmVhbWApKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgbGV0IG9wdGlvbnM7XG5cdFx0ICAgICAgICAgICAgdHJ5IHtcblx0XHQgICAgICAgICAgICAgICAgb3B0aW9ucyA9IGNvbnZlcnRQaXBlT3B0aW9ucyhyYXdPcHRpb25zLCAnU2Vjb25kIHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjYXRjaCAoZSkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChlKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKElzUmVhZGFibGVTdHJlYW1Mb2NrZWQodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbScpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQoZGVzdGluYXRpb24pKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVG8gY2Fubm90IGJlIHVzZWQgb24gYSBsb2NrZWQgV3JpdGFibGVTdHJlYW0nKSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbVBpcGVUbyh0aGlzLCBkZXN0aW5hdGlvbiwgb3B0aW9ucy5wcmV2ZW50Q2xvc2UsIG9wdGlvbnMucHJldmVudEFib3J0LCBvcHRpb25zLnByZXZlbnRDYW5jZWwsIG9wdGlvbnMuc2lnbmFsKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogVGVlcyB0aGlzIHJlYWRhYmxlIHN0cmVhbSwgcmV0dXJuaW5nIGEgdHdvLWVsZW1lbnQgYXJyYXkgY29udGFpbmluZyB0aGUgdHdvIHJlc3VsdGluZyBicmFuY2hlcyBhc1xuXHRcdCAgICAgICAgICogbmV3IHtAbGluayBSZWFkYWJsZVN0cmVhbX0gaW5zdGFuY2VzLlxuXHRcdCAgICAgICAgICpcblx0XHQgICAgICAgICAqIFRlZWluZyBhIHN0cmVhbSB3aWxsIGxvY2sgaXQsIHByZXZlbnRpbmcgYW55IG90aGVyIGNvbnN1bWVyIGZyb20gYWNxdWlyaW5nIGEgcmVhZGVyLlxuXHRcdCAgICAgICAgICogVG8gY2FuY2VsIHRoZSBzdHJlYW0sIGNhbmNlbCBib3RoIG9mIHRoZSByZXN1bHRpbmcgYnJhbmNoZXM7IGEgY29tcG9zaXRlIGNhbmNlbGxhdGlvbiByZWFzb24gd2lsbCB0aGVuIGJlXG5cdFx0ICAgICAgICAgKiBwcm9wYWdhdGVkIHRvIHRoZSBzdHJlYW0ncyB1bmRlcmx5aW5nIHNvdXJjZS5cblx0XHQgICAgICAgICAqXG5cdFx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGNodW5rcyBzZWVuIGluIGVhY2ggYnJhbmNoIHdpbGwgYmUgdGhlIHNhbWUgb2JqZWN0LiBJZiB0aGUgY2h1bmtzIGFyZSBub3QgaW1tdXRhYmxlLFxuXHRcdCAgICAgICAgICogdGhpcyBjb3VsZCBhbGxvdyBpbnRlcmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGJyYW5jaGVzLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICB0ZWUoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSgndGVlJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNvbnN0IGJyYW5jaGVzID0gUmVhZGFibGVTdHJlYW1UZWUodGhpcyk7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIENyZWF0ZUFycmF5RnJvbUxpc3QoYnJhbmNoZXMpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgdmFsdWVzKHJhd09wdGlvbnMgPSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCd2YWx1ZXMnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnZlcnRJdGVyYXRvck9wdGlvbnMocmF3T3B0aW9ucywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBBY3F1aXJlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMsIG9wdGlvbnMucHJldmVudENhbmNlbCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLCB7XG5cdFx0ICAgICAgICBjYW5jZWw6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgZ2V0UmVhZGVyOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHBpcGVUaHJvdWdoOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHBpcGVUbzogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICB0ZWU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgdmFsdWVzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGxvY2tlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnUmVhZGFibGVTdHJlYW0nLFxuXHRcdCAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC5hc3luY0l0ZXJhdG9yID09PSAnc3ltYm9sJykge1xuXHRcdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwuYXN5bmNJdGVyYXRvciwge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiBSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUudmFsdWVzLFxuXHRcdCAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHRcdCAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gQWJzdHJhY3Qgb3BlcmF0aW9ucyBmb3IgdGhlIFJlYWRhYmxlU3RyZWFtLlxuXHRcdCAgICAvLyBUaHJvd3MgaWYgYW5kIG9ubHkgaWYgc3RhcnRBbGdvcml0aG0gdGhyb3dzLlxuXHRcdCAgICBmdW5jdGlvbiBDcmVhdGVSZWFkYWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrID0gMSwgc2l6ZUFsZ29yaXRobSA9ICgpID0+IDEpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlKTtcblx0XHQgICAgICAgIEluaXRpYWxpemVSZWFkYWJsZVN0cmVhbShzdHJlYW0pO1xuXHRcdCAgICAgICAgY29uc3QgY29udHJvbGxlciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO1xuXHRcdCAgICAgICAgU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7XG5cdFx0ICAgICAgICByZXR1cm4gc3RyZWFtO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIFRocm93cyBpZiBhbmQgb25seSBpZiBzdGFydEFsZ29yaXRobSB0aHJvd3MuXG5cdFx0ICAgIGZ1bmN0aW9uIENyZWF0ZVJlYWRhYmxlQnl0ZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtKSB7XG5cdFx0ICAgICAgICBjb25zdCBzdHJlYW0gPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZSk7XG5cdFx0ICAgICAgICBJbml0aWFsaXplUmVhZGFibGVTdHJlYW0oc3RyZWFtKTtcblx0XHQgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlKTtcblx0XHQgICAgICAgIFNldFVwUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWxBbGdvcml0aG0sIDAsIHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICByZXR1cm4gc3RyZWFtO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIEluaXRpYWxpemVSZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcblx0XHQgICAgICAgIHN0cmVhbS5fc3RhdGUgPSAncmVhZGFibGUnO1xuXHRcdCAgICAgICAgc3RyZWFtLl9yZWFkZXIgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBzdHJlYW0uX3N0b3JlZEVycm9yID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgc3RyZWFtLl9kaXN0dXJiZWQgPSBmYWxzZTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtKHgpIHtcblx0XHQgICAgICAgIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXInKSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW07XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pIHtcblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3JlYWRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gUmVhZGFibGVTdHJlYW0gQVBJIGV4cG9zZWQgZm9yIGNvbnRyb2xsZXJzLlxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUNhbmNlbChzdHJlYW0sIHJlYXNvbikge1xuXHRcdCAgICAgICAgc3RyZWFtLl9kaXN0dXJiZWQgPSB0cnVlO1xuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChzdHJlYW0uX3N0YXRlID09PSAnZXJyb3JlZCcpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW0uX3N0b3JlZEVycm9yKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIFJlYWRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKTtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyO1xuXHRcdCAgICAgICAgaWYgKHJlYWRlciAhPT0gdW5kZWZpbmVkICYmIElzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHJlYWRlcikpIHtcblx0XHQgICAgICAgICAgICByZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMuZm9yRWFjaChyZWFkSW50b1JlcXVlc3QgPT4ge1xuXHRcdCAgICAgICAgICAgICAgICByZWFkSW50b1JlcXVlc3QuX2Nsb3NlU3RlcHModW5kZWZpbmVkKTtcblx0XHQgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICByZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IHNvdXJjZUNhbmNlbFByb21pc2UgPSBzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltDYW5jZWxTdGVwc10ocmVhc29uKTtcblx0XHQgICAgICAgIHJldHVybiB0cmFuc2Zvcm1Qcm9taXNlV2l0aChzb3VyY2VDYW5jZWxQcm9taXNlLCBub29wKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSkge1xuXHRcdCAgICAgICAgc3RyZWFtLl9zdGF0ZSA9ICdjbG9zZWQnO1xuXHRcdCAgICAgICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLl9yZWFkZXI7XG5cdFx0ICAgICAgICBpZiAocmVhZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUocmVhZGVyKTtcblx0XHQgICAgICAgIGlmIChJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihyZWFkZXIpKSB7XG5cdFx0ICAgICAgICAgICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMuZm9yRWFjaChyZWFkUmVxdWVzdCA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgIHJlYWRSZXF1ZXN0Ll9jbG9zZVN0ZXBzKCk7XG5cdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUVycm9yKHN0cmVhbSwgZSkge1xuXHRcdCAgICAgICAgc3RyZWFtLl9zdGF0ZSA9ICdlcnJvcmVkJztcblx0XHQgICAgICAgIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSBlO1xuXHRcdCAgICAgICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLl9yZWFkZXI7XG5cdFx0ICAgICAgICBpZiAocmVhZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIGUpO1xuXHRcdCAgICAgICAgaWYgKElzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHJlYWRlcikpIHtcblx0XHQgICAgICAgICAgICByZWFkZXIuX3JlYWRSZXF1ZXN0cy5mb3JFYWNoKHJlYWRSZXF1ZXN0ID0+IHtcblx0XHQgICAgICAgICAgICAgICAgcmVhZFJlcXVlc3QuX2Vycm9yU3RlcHMoZSk7XG5cdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVsc2Uge1xuXHRcdCAgICAgICAgICAgIHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5mb3JFYWNoKHJlYWRJbnRvUmVxdWVzdCA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgIHJlYWRJbnRvUmVxdWVzdC5fZXJyb3JTdGVwcyhlKTtcblx0XHQgICAgICAgICAgICB9KTtcblx0XHQgICAgICAgICAgICByZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICAvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciB0aGUgUmVhZGFibGVTdHJlYW0uXG5cdFx0ICAgIGZ1bmN0aW9uIHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMShuYW1lKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLiR7bmFtZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtYCk7XG5cdFx0ICAgIH1cblxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0UXVldWluZ1N0cmF0ZWd5SW5pdChpbml0LCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnREaWN0aW9uYXJ5KGluaXQsIGNvbnRleHQpO1xuXHRcdCAgICAgICAgY29uc3QgaGlnaFdhdGVyTWFyayA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oaWdoV2F0ZXJNYXJrO1xuXHRcdCAgICAgICAgYXNzZXJ0UmVxdWlyZWRGaWVsZChoaWdoV2F0ZXJNYXJrLCAnaGlnaFdhdGVyTWFyaycsICdRdWV1aW5nU3RyYXRlZ3lJbml0Jyk7XG5cdFx0ICAgICAgICByZXR1cm4ge1xuXHRcdCAgICAgICAgICAgIGhpZ2hXYXRlck1hcms6IGNvbnZlcnRVbnJlc3RyaWN0ZWREb3VibGUoaGlnaFdhdGVyTWFyaylcblx0XHQgICAgICAgIH07XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvLyBUaGUgc2l6ZSBmdW5jdGlvbiBtdXN0IG5vdCBoYXZlIGEgcHJvdG90eXBlIHByb3BlcnR5IG5vciBiZSBhIGNvbnN0cnVjdG9yXG5cdFx0ICAgIGNvbnN0IGJ5dGVMZW5ndGhTaXplRnVuY3Rpb24gPSAoY2h1bmspID0+IHtcblx0XHQgICAgICAgIHJldHVybiBjaHVuay5ieXRlTGVuZ3RoO1xuXHRcdCAgICB9O1xuXHRcdCAgICB0cnkge1xuXHRcdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJ5dGVMZW5ndGhTaXplRnVuY3Rpb24sICduYW1lJywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnc2l6ZScsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBjYXRjaCAoX2EpIHtcblx0XHQgICAgICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgbm9uLWNvbmZpZ3VyYWJsZSBpbiBvbGRlciBicm93c2Vycywgc28gaWdub3JlIGlmIHRoaXMgdGhyb3dzLlxuXHRcdCAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vbmFtZSNicm93c2VyX2NvbXBhdGliaWxpdHlcblx0XHQgICAgfVxuXHRcdCAgICAvKipcblx0XHQgICAgICogQSBxdWV1aW5nIHN0cmF0ZWd5IHRoYXQgY291bnRzIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gZWFjaCBjaHVuay5cblx0XHQgICAgICpcblx0XHQgICAgICogQHB1YmxpY1xuXHRcdCAgICAgKi9cblx0XHQgICAgY2xhc3MgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0ICAgICAgICAgICAgYXNzZXJ0UmVxdWlyZWRBcmd1bWVudChvcHRpb25zLCAxLCAnQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneScpO1xuXHRcdCAgICAgICAgICAgIG9wdGlvbnMgPSBjb252ZXJ0UXVldWluZ1N0cmF0ZWd5SW5pdChvcHRpb25zLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgdGhpcy5fYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmsgPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIFJldHVybnMgdGhlIGhpZ2ggd2F0ZXIgbWFyayBwcm92aWRlZCB0byB0aGUgY29uc3RydWN0b3IuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBoaWdoV2F0ZXJNYXJrKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5KHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGJ5dGVMZW5ndGhCcmFuZENoZWNrRXhjZXB0aW9uKCdoaWdoV2F0ZXJNYXJrJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9ieXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5SGlnaFdhdGVyTWFyaztcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogTWVhc3VyZXMgdGhlIHNpemUgb2YgYGNodW5rYCBieSByZXR1cm5pbmcgdGhlIHZhbHVlIG9mIGl0cyBgYnl0ZUxlbmd0aGAgcHJvcGVydHkuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBzaXplKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5KHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGJ5dGVMZW5ndGhCcmFuZENoZWNrRXhjZXB0aW9uKCdzaXplJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBieXRlTGVuZ3RoU2l6ZUZ1bmN0aW9uO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLCB7XG5cdFx0ICAgICAgICBoaWdoV2F0ZXJNYXJrOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHNpemU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG5cdFx0ICAgIH0pO1xuXHRcdCAgICBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuXHRcdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneScsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciB0aGUgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneS5cblx0XHQgICAgZnVuY3Rpb24gYnl0ZUxlbmd0aEJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLiR7bmFtZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lgKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBJc0J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3koeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrJykpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3k7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvLyBUaGUgc2l6ZSBmdW5jdGlvbiBtdXN0IG5vdCBoYXZlIGEgcHJvdG90eXBlIHByb3BlcnR5IG5vciBiZSBhIGNvbnN0cnVjdG9yXG5cdFx0ICAgIGNvbnN0IGNvdW50U2l6ZUZ1bmN0aW9uID0gKCkgPT4ge1xuXHRcdCAgICAgICAgcmV0dXJuIDE7XG5cdFx0ICAgIH07XG5cdFx0ICAgIHRyeSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY291bnRTaXplRnVuY3Rpb24sICduYW1lJywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnc2l6ZScsXG5cdFx0ICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICBjYXRjaCAoX2EpIHtcblx0XHQgICAgICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgbm9uLWNvbmZpZ3VyYWJsZSBpbiBvbGRlciBicm93c2Vycywgc28gaWdub3JlIGlmIHRoaXMgdGhyb3dzLlxuXHRcdCAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vbmFtZSNicm93c2VyX2NvbXBhdGliaWxpdHlcblx0XHQgICAgfVxuXHRcdCAgICAvKipcblx0XHQgICAgICogQSBxdWV1aW5nIHN0cmF0ZWd5IHRoYXQgY291bnRzIHRoZSBudW1iZXIgb2YgY2h1bmtzLlxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcHVibGljXG5cdFx0ICAgICAqL1xuXHRcdCAgICBjbGFzcyBDb3VudFF1ZXVpbmdTdHJhdGVneSB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0ICAgICAgICAgICAgYXNzZXJ0UmVxdWlyZWRBcmd1bWVudChvcHRpb25zLCAxLCAnQ291bnRRdWV1aW5nU3RyYXRlZ3knKTtcblx0XHQgICAgICAgICAgICBvcHRpb25zID0gY29udmVydFF1ZXVpbmdTdHJhdGVneUluaXQob3B0aW9ucywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuXHRcdCAgICAgICAgICAgIHRoaXMuX2NvdW50UXVldWluZ1N0cmF0ZWd5SGlnaFdhdGVyTWFyayA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogUmV0dXJucyB0aGUgaGlnaCB3YXRlciBtYXJrIHByb3ZpZGVkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0IGhpZ2hXYXRlck1hcmsoKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc0NvdW50UXVldWluZ1N0cmF0ZWd5KHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGNvdW50QnJhbmRDaGVja0V4Y2VwdGlvbignaGlnaFdhdGVyTWFyaycpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fY291bnRRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBNZWFzdXJlcyB0aGUgc2l6ZSBvZiBgY2h1bmtgIGJ5IGFsd2F5cyByZXR1cm5pbmcgMS5cblx0XHQgICAgICAgICAqIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSB0b3RhbCBxdWV1ZSBzaXplIGlzIGEgY291bnQgb2YgdGhlIG51bWJlciBvZiBjaHVua3MgaW4gdGhlIHF1ZXVlLlxuXHRcdCAgICAgICAgICovXG5cdFx0ICAgICAgICBnZXQgc2l6ZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzQ291bnRRdWV1aW5nU3RyYXRlZ3kodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgY291bnRCcmFuZENoZWNrRXhjZXB0aW9uKCdzaXplJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHJldHVybiBjb3VudFNpemVGdW5jdGlvbjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUsIHtcblx0XHQgICAgICAgIGhpZ2hXYXRlck1hcms6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRcdCAgICAgICAgc2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ291bnRRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnQ291bnRRdWV1aW5nU3RyYXRlZ3knLFxuXHRcdCAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgdGhlIENvdW50UXVldWluZ1N0cmF0ZWd5LlxuXHRcdCAgICBmdW5jdGlvbiBjb3VudEJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYENvdW50UXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZS4ke25hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBDb3VudFF1ZXVpbmdTdHJhdGVneWApO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIElzQ291bnRRdWV1aW5nU3RyYXRlZ3koeCkge1xuXHRcdCAgICAgICAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2NvdW50UXVldWluZ1N0cmF0ZWd5SGlnaFdhdGVyTWFyaycpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBDb3VudFF1ZXVpbmdTdHJhdGVneTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIGZ1bmN0aW9uIGNvbnZlcnRUcmFuc2Zvcm1lcihvcmlnaW5hbCwgY29udGV4dCkge1xuXHRcdCAgICAgICAgYXNzZXJ0RGljdGlvbmFyeShvcmlnaW5hbCwgY29udGV4dCk7XG5cdFx0ICAgICAgICBjb25zdCBmbHVzaCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5mbHVzaDtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRhYmxlVHlwZSA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5yZWFkYWJsZVR5cGU7XG5cdFx0ICAgICAgICBjb25zdCBzdGFydCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5zdGFydDtcblx0XHQgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC50cmFuc2Zvcm07XG5cdFx0ICAgICAgICBjb25zdCB3cml0YWJsZVR5cGUgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwud3JpdGFibGVUeXBlO1xuXHRcdCAgICAgICAgcmV0dXJuIHtcblx0XHQgICAgICAgICAgICBmbHVzaDogZmx1c2ggPT09IHVuZGVmaW5lZCA/XG5cdFx0ICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnZlcnRUcmFuc2Zvcm1lckZsdXNoQ2FsbGJhY2soZmx1c2gsIG9yaWdpbmFsLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICdmbHVzaCcgdGhhdGApLFxuXHRcdCAgICAgICAgICAgIHJlYWRhYmxlVHlwZSxcblx0XHQgICAgICAgICAgICBzdGFydDogc3RhcnQgPT09IHVuZGVmaW5lZCA/XG5cdFx0ICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnZlcnRUcmFuc2Zvcm1lclN0YXJ0Q2FsbGJhY2soc3RhcnQsIG9yaWdpbmFsLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICdzdGFydCcgdGhhdGApLFxuXHRcdCAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtID09PSB1bmRlZmluZWQgP1xuXHRcdCAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuXHRcdCAgICAgICAgICAgICAgICBjb252ZXJ0VHJhbnNmb3JtZXJUcmFuc2Zvcm1DYWxsYmFjayh0cmFuc2Zvcm0sIG9yaWdpbmFsLCBgJHtjb250ZXh0fSBoYXMgbWVtYmVyICd0cmFuc2Zvcm0nIHRoYXRgKSxcblx0XHQgICAgICAgICAgICB3cml0YWJsZVR5cGVcblx0XHQgICAgICAgIH07XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gY29udmVydFRyYW5zZm9ybWVyRmx1c2hDYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGFzc2VydEZ1bmN0aW9uKGZuLCBjb250ZXh0KTtcblx0XHQgICAgICAgIHJldHVybiAoY29udHJvbGxlcikgPT4gcHJvbWlzZUNhbGwoZm4sIG9yaWdpbmFsLCBbY29udHJvbGxlcl0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIGNvbnZlcnRUcmFuc2Zvcm1lclN0YXJ0Q2FsbGJhY2soZm4sIG9yaWdpbmFsLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG5cdFx0ICAgICAgICByZXR1cm4gKGNvbnRyb2xsZXIpID0+IHJlZmxlY3RDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBjb252ZXJ0VHJhbnNmb3JtZXJUcmFuc2Zvcm1DYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGFzc2VydEZ1bmN0aW9uKGZuLCBjb250ZXh0KTtcblx0XHQgICAgICAgIHJldHVybiAoY2h1bmssIGNvbnRyb2xsZXIpID0+IHByb21pc2VDYWxsKGZuLCBvcmlnaW5hbCwgW2NodW5rLCBjb250cm9sbGVyXSk7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvLyBDbGFzcyBUcmFuc2Zvcm1TdHJlYW1cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEEgdHJhbnNmb3JtIHN0cmVhbSBjb25zaXN0cyBvZiBhIHBhaXIgb2Ygc3RyZWFtczogYSB7QGxpbmsgV3JpdGFibGVTdHJlYW0gfCB3cml0YWJsZSBzdHJlYW19LFxuXHRcdCAgICAgKiBrbm93biBhcyBpdHMgd3JpdGFibGUgc2lkZSwgYW5kIGEge0BsaW5rIFJlYWRhYmxlU3RyZWFtIHwgcmVhZGFibGUgc3RyZWFtfSwga25vd24gYXMgaXRzIHJlYWRhYmxlIHNpZGUuXG5cdFx0ICAgICAqIEluIGEgbWFubmVyIHNwZWNpZmljIHRvIHRoZSB0cmFuc2Zvcm0gc3RyZWFtIGluIHF1ZXN0aW9uLCB3cml0ZXMgdG8gdGhlIHdyaXRhYmxlIHNpZGUgcmVzdWx0IGluIG5ldyBkYXRhIGJlaW5nXG5cdFx0ICAgICAqIG1hZGUgYXZhaWxhYmxlIGZvciByZWFkaW5nIGZyb20gdGhlIHJlYWRhYmxlIHNpZGUuXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFRyYW5zZm9ybVN0cmVhbSB7XG5cdFx0ICAgICAgICBjb25zdHJ1Y3RvcihyYXdUcmFuc2Zvcm1lciA9IHt9LCByYXdXcml0YWJsZVN0cmF0ZWd5ID0ge30sIHJhd1JlYWRhYmxlU3RyYXRlZ3kgPSB7fSkge1xuXHRcdCAgICAgICAgICAgIGlmIChyYXdUcmFuc2Zvcm1lciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJhd1RyYW5zZm9ybWVyID0gbnVsbDtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgY29uc3Qgd3JpdGFibGVTdHJhdGVneSA9IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3kocmF3V3JpdGFibGVTdHJhdGVneSwgJ1NlY29uZCBwYXJhbWV0ZXInKTtcblx0XHQgICAgICAgICAgICBjb25zdCByZWFkYWJsZVN0cmF0ZWd5ID0gY29udmVydFF1ZXVpbmdTdHJhdGVneShyYXdSZWFkYWJsZVN0cmF0ZWd5LCAnVGhpcmQgcGFyYW1ldGVyJyk7XG5cdFx0ICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjb252ZXJ0VHJhbnNmb3JtZXIocmF3VHJhbnNmb3JtZXIsICdGaXJzdCBwYXJhbWV0ZXInKTtcblx0XHQgICAgICAgICAgICBpZiAodHJhbnNmb3JtZXIucmVhZGFibGVUeXBlICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgcmVhZGFibGVUeXBlIHNwZWNpZmllZCcpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBpZiAodHJhbnNmb3JtZXIud3JpdGFibGVUeXBlICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgd3JpdGFibGVUeXBlIHNwZWNpZmllZCcpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCByZWFkYWJsZUhpZ2hXYXRlck1hcmsgPSBFeHRyYWN0SGlnaFdhdGVyTWFyayhyZWFkYWJsZVN0cmF0ZWd5LCAwKTtcblx0XHQgICAgICAgICAgICBjb25zdCByZWFkYWJsZVNpemVBbGdvcml0aG0gPSBFeHRyYWN0U2l6ZUFsZ29yaXRobShyZWFkYWJsZVN0cmF0ZWd5KTtcblx0XHQgICAgICAgICAgICBjb25zdCB3cml0YWJsZUhpZ2hXYXRlck1hcmsgPSBFeHRyYWN0SGlnaFdhdGVyTWFyayh3cml0YWJsZVN0cmF0ZWd5LCAxKTtcblx0XHQgICAgICAgICAgICBjb25zdCB3cml0YWJsZVNpemVBbGdvcml0aG0gPSBFeHRyYWN0U2l6ZUFsZ29yaXRobSh3cml0YWJsZVN0cmF0ZWd5KTtcblx0XHQgICAgICAgICAgICBsZXQgc3RhcnRQcm9taXNlX3Jlc29sdmU7XG5cdFx0ICAgICAgICAgICAgY29uc3Qgc3RhcnRQcm9taXNlID0gbmV3UHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHQgICAgICAgICAgICAgICAgc3RhcnRQcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdCAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgICAgIEluaXRpYWxpemVUcmFuc2Zvcm1TdHJlYW0odGhpcywgc3RhcnRQcm9taXNlLCB3cml0YWJsZUhpZ2hXYXRlck1hcmssIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSwgcmVhZGFibGVIaWdoV2F0ZXJNYXJrLCByZWFkYWJsZVNpemVBbGdvcml0aG0pO1xuXHRcdCAgICAgICAgICAgIFNldFVwVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVHJhbnNmb3JtZXIodGhpcywgdHJhbnNmb3JtZXIpO1xuXHRcdCAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lci5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHN0YXJ0UHJvbWlzZV9yZXNvbHZlKHRyYW5zZm9ybWVyLnN0YXJ0KHRoaXMuX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXIpKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgIHN0YXJ0UHJvbWlzZV9yZXNvbHZlKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBUaGUgcmVhZGFibGUgc2lkZSBvZiB0aGUgdHJhbnNmb3JtIHN0cmVhbS5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0IHJlYWRhYmxlKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNUcmFuc2Zvcm1TdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZGFibGUnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBUaGUgd3JpdGFibGUgc2lkZSBvZiB0aGUgdHJhbnNmb3JtIHN0cmVhbS5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZ2V0IHdyaXRhYmxlKCkge1xuXHRcdCAgICAgICAgICAgIGlmICghSXNUcmFuc2Zvcm1TdHJlYW0odGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbignd3JpdGFibGUnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUsIHtcblx0XHQgICAgICAgIHJlYWRhYmxlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHdyaXRhYmxlOiB7IGVudW1lcmFibGU6IHRydWUgfVxuXHRcdCAgICB9KTtcblx0XHQgICAgaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCcpIHtcblx0XHQgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnVHJhbnNmb3JtU3RyZWFtJyxcblx0XHQgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIEluaXRpYWxpemVUcmFuc2Zvcm1TdHJlYW0oc3RyZWFtLCBzdGFydFByb21pc2UsIHdyaXRhYmxlSGlnaFdhdGVyTWFyaywgd3JpdGFibGVTaXplQWxnb3JpdGhtLCByZWFkYWJsZUhpZ2hXYXRlck1hcmssIHJlYWRhYmxlU2l6ZUFsZ29yaXRobSkge1xuXHRcdCAgICAgICAgZnVuY3Rpb24gc3RhcnRBbGdvcml0aG0oKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHN0YXJ0UHJvbWlzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGZ1bmN0aW9uIHdyaXRlQWxnb3JpdGhtKGNodW5rKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRTaW5rV3JpdGVBbGdvcml0aG0oc3RyZWFtLCBjaHVuayk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmdW5jdGlvbiBhYm9ydEFsZ29yaXRobShyZWFzb24pIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtBYm9ydEFsZ29yaXRobShzdHJlYW0sIHJlYXNvbik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBmdW5jdGlvbiBjbG9zZUFsZ29yaXRobSgpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtDbG9zZUFsZ29yaXRobShzdHJlYW0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgc3RyZWFtLl93cml0YWJsZSA9IENyZWF0ZVdyaXRhYmxlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCB3cml0YWJsZUhpZ2hXYXRlck1hcmssIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSk7XG5cdFx0ICAgICAgICBmdW5jdGlvbiBwdWxsQWxnb3JpdGhtKCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U291cmNlUHVsbEFsZ29yaXRobShzdHJlYW0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZnVuY3Rpb24gY2FuY2VsQWxnb3JpdGhtKHJlYXNvbikge1xuXHRcdCAgICAgICAgICAgIFRyYW5zZm9ybVN0cmVhbUVycm9yV3JpdGFibGVBbmRVbmJsb2NrV3JpdGUoc3RyZWFtLCByZWFzb24pO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBzdHJlYW0uX3JlYWRhYmxlID0gQ3JlYXRlUmVhZGFibGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgcmVhZGFibGVIaWdoV2F0ZXJNYXJrLCByZWFkYWJsZVNpemVBbGdvcml0aG0pO1xuXHRcdCAgICAgICAgLy8gVGhlIFtbYmFja3ByZXNzdXJlXV0gc2xvdCBpcyBzZXQgdG8gdW5kZWZpbmVkIHNvIHRoYXQgaXQgY2FuIGJlIGluaXRpYWxpc2VkIGJ5IFRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZS5cblx0XHQgICAgICAgIHN0cmVhbS5fYmFja3ByZXNzdXJlID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG5cdFx0ICAgICAgICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCB0cnVlKTtcblx0XHQgICAgICAgIHN0cmVhbS5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBJc1RyYW5zZm9ybVN0cmVhbSh4KSB7XG5cdFx0ICAgICAgICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcicpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBUcmFuc2Zvcm1TdHJlYW07XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gVGhpcyBpcyBhIG5vLW9wIGlmIGJvdGggc2lkZXMgYXJlIGFscmVhZHkgZXJyb3JlZC5cblx0XHQgICAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRXJyb3Ioc3RyZWFtLCBlKSB7XG5cdFx0ICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3Ioc3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCBlKTtcblx0XHQgICAgICAgIFRyYW5zZm9ybVN0cmVhbUVycm9yV3JpdGFibGVBbmRVbmJsb2NrV3JpdGUoc3RyZWFtLCBlKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlKHN0cmVhbSwgZSkge1xuXHRcdCAgICAgICAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoc3RyZWFtLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyKTtcblx0XHQgICAgICAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcklmTmVlZGVkKHN0cmVhbS5fd3JpdGFibGUuX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlciwgZSk7XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9iYWNrcHJlc3N1cmUpIHtcblx0XHQgICAgICAgICAgICAvLyBQcmV0ZW5kIHRoYXQgcHVsbCgpIHdhcyBjYWxsZWQgdG8gcGVybWl0IGFueSBwZW5kaW5nIHdyaXRlKCkgY2FsbHMgdG8gY29tcGxldGUuIFRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZSgpXG5cdFx0ICAgICAgICAgICAgLy8gY2Fubm90IGJlIGNhbGxlZCBmcm9tIGVucXVldWUoKSBvciBwdWxsKCkgb25jZSB0aGUgUmVhZGFibGVTdHJlYW0gaXMgZXJyb3JlZCwgc28gdGhpcyB3aWxsIHdpbGwgYmUgdGhlIGZpbmFsIHRpbWVcblx0XHQgICAgICAgICAgICAvLyBfYmFja3ByZXNzdXJlIGlzIHNldC5cblx0XHQgICAgICAgICAgICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCBmYWxzZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtU2V0QmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKSB7XG5cdFx0ICAgICAgICAvLyBQYXNzZXMgYWxzbyB3aGVuIGNhbGxlZCBkdXJpbmcgY29uc3RydWN0aW9uLlxuXHRcdCAgICAgICAgaWYgKHN0cmVhbS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmUoKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHN0cmVhbS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZSA9IG5ld1Byb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0ICAgICAgICAgICAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICBzdHJlYW0uX2JhY2twcmVzc3VyZSA9IGJhY2twcmVzc3VyZTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBDbGFzcyBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclxuXHRcdCAgICAvKipcblx0XHQgICAgICogQWxsb3dzIGNvbnRyb2wgb2YgdGhlIHtAbGluayBSZWFkYWJsZVN0cmVhbX0gYW5kIHtAbGluayBXcml0YWJsZVN0cmVhbX0gb2YgdGhlIGFzc29jaWF0ZWQge0BsaW5rIFRyYW5zZm9ybVN0cmVhbX0uXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwdWJsaWNcblx0XHQgICAgICovXG5cdFx0ICAgIGNsYXNzIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyIHtcblx0XHQgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgY29uc3RydWN0b3InKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIC8qKlxuXHRcdCAgICAgICAgICogUmV0dXJucyB0aGUgZGVzaXJlZCBzaXplIHRvIGZpbGwgdGhlIHJlYWRhYmxlIHNpZGXigJlzIGludGVybmFsIHF1ZXVlLiBJdCBjYW4gYmUgbmVnYXRpdmUsIGlmIHRoZSBxdWV1ZSBpcyBvdmVyLWZ1bGwuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIGdldCBkZXNpcmVkU2l6ZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBjb25zdCByZWFkYWJsZUNvbnRyb2xsZXIgPSB0aGlzLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyO1xuXHRcdCAgICAgICAgICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUocmVhZGFibGVDb250cm9sbGVyKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGVucXVldWUoY2h1bmsgPSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdlbnF1ZXVlJyk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZSh0aGlzLCBjaHVuayk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvKipcblx0XHQgICAgICAgICAqIEVycm9ycyBib3RoIHRoZSByZWFkYWJsZSBzaWRlIGFuZCB0aGUgd3JpdGFibGUgc2lkZSBvZiB0aGUgY29udHJvbGxlZCB0cmFuc2Zvcm0gc3RyZWFtLCBtYWtpbmcgYWxsIGZ1dHVyZVxuXHRcdCAgICAgICAgICogaW50ZXJhY3Rpb25zIHdpdGggaXQgZmFpbCB3aXRoIHRoZSBnaXZlbiBlcnJvciBgZWAuIEFueSBjaHVua3MgcXVldWVkIGZvciB0cmFuc2Zvcm1hdGlvbiB3aWxsIGJlIGRpc2NhcmRlZC5cblx0XHQgICAgICAgICAqL1xuXHRcdCAgICAgICAgZXJyb3IocmVhc29uID0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKCFJc1RyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZXJyb3InKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcih0aGlzLCByZWFzb24pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgLyoqXG5cdFx0ICAgICAgICAgKiBDbG9zZXMgdGhlIHJlYWRhYmxlIHNpZGUgYW5kIGVycm9ycyB0aGUgd3JpdGFibGUgc2lkZSBvZiB0aGUgY29udHJvbGxlZCB0cmFuc2Zvcm0gc3RyZWFtLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHRoZVxuXHRcdCAgICAgICAgICogdHJhbnNmb3JtZXIgb25seSBuZWVkcyB0byBjb25zdW1lIGEgcG9ydGlvbiBvZiB0aGUgY2h1bmtzIHdyaXR0ZW4gdG8gdGhlIHdyaXRhYmxlIHNpZGUuXG5cdFx0ICAgICAgICAgKi9cblx0XHQgICAgICAgIHRlcm1pbmF0ZSgpIHtcblx0XHQgICAgICAgICAgICBpZiAoIUlzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcblx0XHQgICAgICAgICAgICAgICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCd0ZXJtaW5hdGUnKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJUZXJtaW5hdGUodGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCB7XG5cdFx0ICAgICAgICBlbnF1ZXVlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIGVycm9yOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0XHQgICAgICAgIHRlcm1pbmF0ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdFx0ICAgICAgICBkZXNpcmVkU2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cblx0XHQgICAgfSk7XG5cdFx0ICAgIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG5cdFx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuXHRcdCAgICAgICAgICAgIHZhbHVlOiAnVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXInLFxuXHRcdCAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gVHJhbnNmb3JtIFN0cmVhbSBEZWZhdWx0IENvbnRyb2xsZXIgQWJzdHJhY3QgT3BlcmF0aW9uc1xuXHRcdCAgICBmdW5jdGlvbiBJc1RyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHgpIHtcblx0XHQgICAgICAgIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtJykpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFNldFVwVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCB0cmFuc2Zvcm1BbGdvcml0aG0sIGZsdXNoQWxnb3JpdGhtKSB7XG5cdFx0ICAgICAgICBjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtID0gc3RyZWFtO1xuXHRcdCAgICAgICAgc3RyZWFtLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyID0gY29udHJvbGxlcjtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3RyYW5zZm9ybUFsZ29yaXRobSA9IHRyYW5zZm9ybUFsZ29yaXRobTtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2ZsdXNoQWxnb3JpdGhtID0gZmx1c2hBbGdvcml0aG07XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gU2V0VXBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21UcmFuc2Zvcm1lcihzdHJlYW0sIHRyYW5zZm9ybWVyKSB7XG5cdFx0ICAgICAgICBjb25zdCBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO1xuXHRcdCAgICAgICAgbGV0IHRyYW5zZm9ybUFsZ29yaXRobSA9IChjaHVuaykgPT4ge1xuXHRcdCAgICAgICAgICAgIHRyeSB7XG5cdFx0ICAgICAgICAgICAgICAgIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuayk7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGNhdGNoICh0cmFuc2Zvcm1SZXN1bHRFKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHRyYW5zZm9ybVJlc3VsdEUpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH07XG5cdFx0ICAgICAgICBsZXQgZmx1c2hBbGdvcml0aG0gPSAoKSA9PiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICBpZiAodHJhbnNmb3JtZXIudHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICB0cmFuc2Zvcm1BbGdvcml0aG0gPSBjaHVuayA9PiB0cmFuc2Zvcm1lci50cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHRyYW5zZm9ybWVyLmZsdXNoICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICBmbHVzaEFsZ29yaXRobSA9ICgpID0+IHRyYW5zZm9ybWVyLmZsdXNoKGNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgU2V0VXBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHRyYW5zZm9ybUFsZ29yaXRobSwgZmx1c2hBbGdvcml0aG0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX3RyYW5zZm9ybUFsZ29yaXRobSA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGNvbnRyb2xsZXIuX2ZsdXNoQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuaykge1xuXHRcdCAgICAgICAgY29uc3Qgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbTtcblx0XHQgICAgICAgIGNvbnN0IHJlYWRhYmxlQ29udHJvbGxlciA9IHN0cmVhbS5fcmVhZGFibGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjtcblx0XHQgICAgICAgIGlmICghUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKHJlYWRhYmxlQ29udHJvbGxlcikpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZSBzaWRlIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBlbnF1ZXVlJyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICAvLyBXZSB0aHJvdHRsZSB0cmFuc2Zvcm0gaW52b2NhdGlvbnMgYmFzZWQgb24gdGhlIGJhY2twcmVzc3VyZSBvZiB0aGUgUmVhZGFibGVTdHJlYW0sIGJ1dCB3ZSBzdGlsbFxuXHRcdCAgICAgICAgLy8gYWNjZXB0IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZSgpIGNhbGxzLlxuXHRcdCAgICAgICAgdHJ5IHtcblx0XHQgICAgICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZShyZWFkYWJsZUNvbnRyb2xsZXIsIGNodW5rKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNhdGNoIChlKSB7XG5cdFx0ICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIHdoZW4gcmVhZGFibGVTdHJhdGVneS5zaXplKCkgdGhyb3dzLlxuXHRcdCAgICAgICAgICAgIFRyYW5zZm9ybVN0cmVhbUVycm9yV3JpdGFibGVBbmRVbmJsb2NrV3JpdGUoc3RyZWFtLCBlKTtcblx0XHQgICAgICAgICAgICB0aHJvdyBzdHJlYW0uX3JlYWRhYmxlLl9zdG9yZWRFcnJvcjtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGNvbnN0IGJhY2twcmVzc3VyZSA9IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJIYXNCYWNrcHJlc3N1cmUocmVhZGFibGVDb250cm9sbGVyKTtcblx0XHQgICAgICAgIGlmIChiYWNrcHJlc3N1cmUgIT09IHN0cmVhbS5fYmFja3ByZXNzdXJlKSB7XG5cdFx0ICAgICAgICAgICAgVHJhbnNmb3JtU3RyZWFtU2V0QmFja3ByZXNzdXJlKHN0cmVhbSwgdHJ1ZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlKSB7XG5cdFx0ICAgICAgICBUcmFuc2Zvcm1TdHJlYW1FcnJvcihjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLCBlKTtcblx0XHQgICAgfVxuXHRcdCAgICBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclBlcmZvcm1UcmFuc2Zvcm0oY29udHJvbGxlciwgY2h1bmspIHtcblx0XHQgICAgICAgIGNvbnN0IHRyYW5zZm9ybVByb21pc2UgPSBjb250cm9sbGVyLl90cmFuc2Zvcm1BbGdvcml0aG0oY2h1bmspO1xuXHRcdCAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVByb21pc2VXaXRoKHRyYW5zZm9ybVByb21pc2UsIHVuZGVmaW5lZCwgciA9PiB7XG5cdFx0ICAgICAgICAgICAgVHJhbnNmb3JtU3RyZWFtRXJyb3IoY29udHJvbGxlci5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbSwgcik7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgcjtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9XG5cdFx0ICAgIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyVGVybWluYXRlKGNvbnRyb2xsZXIpIHtcblx0XHQgICAgICAgIGNvbnN0IHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW07XG5cdFx0ICAgICAgICBjb25zdCByZWFkYWJsZUNvbnRyb2xsZXIgPSBzdHJlYW0uX3JlYWRhYmxlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXI7XG5cdFx0ICAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UocmVhZGFibGVDb250cm9sbGVyKTtcblx0XHQgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcignVHJhbnNmb3JtU3RyZWFtIHRlcm1pbmF0ZWQnKTtcblx0XHQgICAgICAgIFRyYW5zZm9ybVN0cmVhbUVycm9yV3JpdGFibGVBbmRVbmJsb2NrV3JpdGUoc3RyZWFtLCBlcnJvcik7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmsgQWxnb3JpdGhtc1xuXHRcdCAgICBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua1dyaXRlQWxnb3JpdGhtKHN0cmVhbSwgY2h1bmspIHtcblx0XHQgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXI7XG5cdFx0ICAgICAgICBpZiAoc3RyZWFtLl9iYWNrcHJlc3N1cmUpIHtcblx0XHQgICAgICAgICAgICBjb25zdCBiYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlID0gc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlO1xuXHRcdCAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1Qcm9taXNlV2l0aChiYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlLCAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IHdyaXRhYmxlID0gc3RyZWFtLl93cml0YWJsZTtcblx0XHQgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB3cml0YWJsZS5fc3RhdGU7XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgd3JpdGFibGUuX3N0b3JlZEVycm9yO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclBlcmZvcm1UcmFuc2Zvcm0oY29udHJvbGxlciwgY2h1bmspO1xuXHRcdCAgICAgICAgICAgIH0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyUGVyZm9ybVRyYW5zZm9ybShjb250cm9sbGVyLCBjaHVuayk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtBYm9ydEFsZ29yaXRobShzdHJlYW0sIHJlYXNvbikge1xuXHRcdCAgICAgICAgLy8gYWJvcnQoKSBpcyBub3QgY2FsbGVkIHN5bmNocm9ub3VzbHksIHNvIGl0IGlzIHBvc3NpYmxlIGZvciBhYm9ydCgpIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBzdHJlYW0gaXMgYWxyZWFkeVxuXHRcdCAgICAgICAgLy8gZXJyb3JlZC5cblx0XHQgICAgICAgIFRyYW5zZm9ybVN0cmVhbUVycm9yKHN0cmVhbSwgcmVhc29uKTtcblx0XHQgICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG5cdFx0ICAgIH1cblx0XHQgICAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtDbG9zZUFsZ29yaXRobShzdHJlYW0pIHtcblx0XHQgICAgICAgIC8vIHN0cmVhbS5fcmVhZGFibGUgY2Fubm90IGNoYW5nZSBhZnRlciBjb25zdHJ1Y3Rpb24sIHNvIGNhY2hpbmcgaXQgYWNyb3NzIGEgY2FsbCB0byB1c2VyIGNvZGUgaXMgc2FmZS5cblx0XHQgICAgICAgIGNvbnN0IHJlYWRhYmxlID0gc3RyZWFtLl9yZWFkYWJsZTtcblx0XHQgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXI7XG5cdFx0ICAgICAgICBjb25zdCBmbHVzaFByb21pc2UgPSBjb250cm9sbGVyLl9mbHVzaEFsZ29yaXRobSgpO1xuXHRcdCAgICAgICAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG5cdFx0ICAgICAgICAvLyBSZXR1cm4gYSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggdW5kZWZpbmVkIG9uIHN1Y2Nlc3MuXG5cdFx0ICAgICAgICByZXR1cm4gdHJhbnNmb3JtUHJvbWlzZVdpdGgoZmx1c2hQcm9taXNlLCAoKSA9PiB7XG5cdFx0ICAgICAgICAgICAgaWYgKHJlYWRhYmxlLl9zdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRocm93IHJlYWRhYmxlLl9zdG9yZWRFcnJvcjtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKHJlYWRhYmxlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpO1xuXHRcdCAgICAgICAgfSwgciA9PiB7XG5cdFx0ICAgICAgICAgICAgVHJhbnNmb3JtU3RyZWFtRXJyb3Ioc3RyZWFtLCByKTtcblx0XHQgICAgICAgICAgICB0aHJvdyByZWFkYWJsZS5fc3RvcmVkRXJyb3I7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfVxuXHRcdCAgICAvLyBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U291cmNlIEFsZ29yaXRobXNcblx0XHQgICAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNvdXJjZVB1bGxBbGdvcml0aG0oc3RyZWFtKSB7XG5cdFx0ICAgICAgICAvLyBJbnZhcmlhbnQuIEVuZm9yY2VkIGJ5IHRoZSBwcm9taXNlcyByZXR1cm5lZCBieSBzdGFydCgpIGFuZCBwdWxsKCkuXG5cdFx0ICAgICAgICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCBmYWxzZSk7XG5cdFx0ICAgICAgICAvLyBQcmV2ZW50IHRoZSBuZXh0IHB1bGwoKSBjYWxsIHVudGlsIHRoZXJlIGlzIGJhY2twcmVzc3VyZS5cblx0XHQgICAgICAgIHJldHVybiBzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2U7XG5cdFx0ICAgIH1cblx0XHQgICAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgdGhlIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLlxuXHRcdCAgICBmdW5jdGlvbiBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS4ke25hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcmApO1xuXHRcdCAgICB9XG5cdFx0ICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIHRoZSBUcmFuc2Zvcm1TdHJlYW0uXG5cdFx0ICAgIGZ1bmN0aW9uIHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuXHRcdCAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUuJHtuYW1lfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgVHJhbnNmb3JtU3RyZWFtYCk7XG5cdFx0ICAgIH1cblxuXHRcdCAgICBleHBvcnRzLkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kgPSBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5O1xuXHRcdCAgICBleHBvcnRzLkNvdW50UXVldWluZ1N0cmF0ZWd5ID0gQ291bnRRdWV1aW5nU3RyYXRlZ3k7XG5cdFx0ICAgIGV4cG9ydHMuUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXI7XG5cdFx0ICAgIGV4cG9ydHMuUmVhZGFibGVTdHJlYW0gPSBSZWFkYWJsZVN0cmVhbTtcblx0XHQgICAgZXhwb3J0cy5SZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIgPSBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXI7XG5cdFx0ICAgIGV4cG9ydHMuUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCA9IFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3Q7XG5cdFx0ICAgIGV4cG9ydHMuUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI7XG5cdFx0ICAgIGV4cG9ydHMuUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyID0gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyO1xuXHRcdCAgICBleHBvcnRzLlRyYW5zZm9ybVN0cmVhbSA9IFRyYW5zZm9ybVN0cmVhbTtcblx0XHQgICAgZXhwb3J0cy5UcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuXHRcdCAgICBleHBvcnRzLldyaXRhYmxlU3RyZWFtID0gV3JpdGFibGVTdHJlYW07XG5cdFx0ICAgIGV4cG9ydHMuV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI7XG5cdFx0ICAgIGV4cG9ydHMuV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyO1xuXG5cdFx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cblx0XHR9KSkpO1xuXHRcdFxufSAocG9ueWZpbGxfZXMyMDE4LCBwb255ZmlsbF9lczIwMTguZXhwb3J0cykpO1xuXHRyZXR1cm4gcG9ueWZpbGxfZXMyMDE4LmV4cG9ydHM7XG59XG5cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuXG4vLyA2NCBLaUIgKHNhbWUgc2l6ZSBjaHJvbWUgc2xpY2UgdGhlaXJzIGJsb2IgaW50byBVaW50OGFycmF5J3MpXG5jb25zdCBQT09MX1NJWkUkMSA9IDY1NTM2O1xuXG5pZiAoIWdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW0pIHtcbiAgLy8gYG5vZGU6c3RyZWFtL3dlYmAgZ290IGludHJvZHVjZWQgaW4gdjE2LjUuMCBhcyBleHBlcmltZW50YWxcbiAgLy8gYW5kIGl0J3MgcHJlZmVycmVkIG92ZXIgdGhlIHBvbHlmaWxsZWQgdmVyc2lvbi4gU28gd2UgYWxzb1xuICAvLyBzdXBwcmVzcyB0aGUgd2FybmluZyB0aGF0IGdldHMgZW1pdHRlZCBieSBOb2RlSlMgZm9yIHVzaW5nIGl0LlxuICB0cnkge1xuICAgIGNvbnN0IHByb2Nlc3MgPSByZXF1aXJlKCdub2RlOnByb2Nlc3MnKTtcbiAgICBjb25zdCB7IGVtaXRXYXJuaW5nIH0gPSBwcm9jZXNzO1xuICAgIHRyeSB7XG4gICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nID0gKCkgPT4ge307XG4gICAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHJlcXVpcmUoJ25vZGU6c3RyZWFtL3dlYicpKTtcbiAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcgPSBlbWl0V2FybmluZztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcHJvY2Vzcy5lbWl0V2FybmluZyA9IGVtaXRXYXJuaW5nO1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gZmFsbGJhY2sgdG8gcG9seWZpbGwgaW1wbGVtZW50YXRpb25cbiAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHJlcXVpcmVQb255ZmlsbF9lczIwMTgoKSk7XG4gIH1cbn1cblxudHJ5IHtcbiAgLy8gRG9uJ3QgdXNlIG5vZGU6IHByZWZpeCBmb3IgdGhpcywgcmVxdWlyZStub2RlOiBpcyBub3Qgc3VwcG9ydGVkIHVudGlsIG5vZGUgdjE0LjE0XG4gIC8vIE9ubHkgYGltcG9ydCgpYCBjYW4gdXNlIHByZWZpeCBpbiAxMi4yMCBhbmQgbGF0ZXJcbiAgY29uc3QgeyBCbG9iIH0gPSByZXF1aXJlKCdidWZmZXInKTtcbiAgaWYgKEJsb2IgJiYgIUJsb2IucHJvdG90eXBlLnN0cmVhbSkge1xuICAgIEJsb2IucHJvdG90eXBlLnN0cmVhbSA9IGZ1bmN0aW9uIG5hbWUgKHBhcmFtcykge1xuICAgICAgbGV0IHBvc2l0aW9uID0gMDtcbiAgICAgIGNvbnN0IGJsb2IgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgdHlwZTogJ2J5dGVzJyxcbiAgICAgICAgYXN5bmMgcHVsbCAoY3RybCkge1xuICAgICAgICAgIGNvbnN0IGNodW5rID0gYmxvYi5zbGljZShwb3NpdGlvbiwgTWF0aC5taW4oYmxvYi5zaXplLCBwb3NpdGlvbiArIFBPT0xfU0laRSQxKSk7XG4gICAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgY2h1bmsuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICBwb3NpdGlvbiArPSBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBjdHJsLmVucXVldWUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XG5cbiAgICAgICAgICBpZiAocG9zaXRpb24gPT09IGJsb2Iuc2l6ZSkge1xuICAgICAgICAgICAgY3RybC5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9XG59IGNhdGNoIChlcnJvcikge31cblxuLyohIGZldGNoLWJsb2IuIE1JVCBMaWNlbnNlLiBKaW1teSBXw6RydGluZyA8aHR0cHM6Ly9qaW1teS53YXJ0aW5nLnNlL29wZW5zb3VyY2U+ICovXG5cbi8vIDY0IEtpQiAoc2FtZSBzaXplIGNocm9tZSBzbGljZSB0aGVpcnMgYmxvYiBpbnRvIFVpbnQ4YXJyYXkncylcbmNvbnN0IFBPT0xfU0laRSA9IDY1NTM2O1xuXG4vKiogQHBhcmFtIHsoQmxvYiB8IFVpbnQ4QXJyYXkpW119IHBhcnRzICovXG5hc3luYyBmdW5jdGlvbiAqIHRvSXRlcmF0b3IgKHBhcnRzLCBjbG9uZSA9IHRydWUpIHtcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgaWYgKCdzdHJlYW0nIGluIHBhcnQpIHtcbiAgICAgIHlpZWxkICogKC8qKiBAdHlwZSB7QXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFVpbnQ4QXJyYXk+fSAqLyAocGFydC5zdHJlYW0oKSkpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHBhcnQpKSB7XG4gICAgICBpZiAoY2xvbmUpIHtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gcGFydC5ieXRlT2Zmc2V0O1xuICAgICAgICBjb25zdCBlbmQgPSBwYXJ0LmJ5dGVPZmZzZXQgKyBwYXJ0LmJ5dGVMZW5ndGg7XG4gICAgICAgIHdoaWxlIChwb3NpdGlvbiAhPT0gZW5kKSB7XG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgubWluKGVuZCAtIHBvc2l0aW9uLCBQT09MX1NJWkUpO1xuICAgICAgICAgIGNvbnN0IGNodW5rID0gcGFydC5idWZmZXIuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgc2l6ZSk7XG4gICAgICAgICAgcG9zaXRpb24gKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICB5aWVsZCBuZXcgVWludDhBcnJheShjaHVuayk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIHBhcnQ7XG4gICAgICB9XG4gICAgLyogYzggaWdub3JlIG5leHQgMTAgKi9cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIGJsb2JzIHRoYXQgaGF2ZSBhcnJheUJ1ZmZlciBidXQgbm8gc3RyZWFtIG1ldGhvZCAobm9kZXMgYnVmZmVyLkJsb2IpXG4gICAgICBsZXQgcG9zaXRpb24gPSAwLCBiID0gKC8qKiBAdHlwZSB7QmxvYn0gKi8gKHBhcnQpKTtcbiAgICAgIHdoaWxlIChwb3NpdGlvbiAhPT0gYi5zaXplKSB7XG4gICAgICAgIGNvbnN0IGNodW5rID0gYi5zbGljZShwb3NpdGlvbiwgTWF0aC5taW4oYi5zaXplLCBwb3NpdGlvbiArIFBPT0xfU0laRSkpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBjaHVuay5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBwb3NpdGlvbiArPSBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgeWllbGQgbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgX0Jsb2IgPSBjbGFzcyBCbG9iIHtcbiAgLyoqIEB0eXBlIHtBcnJheS48KEJsb2J8VWludDhBcnJheSk+fSAqL1xuICAjcGFydHMgPSBbXVxuICAjdHlwZSA9ICcnXG4gICNzaXplID0gMFxuICAjZW5kaW5ncyA9ICd0cmFuc3BhcmVudCdcblxuICAvKipcbiAgICogVGhlIEJsb2IoKSBjb25zdHJ1Y3RvciByZXR1cm5zIGEgbmV3IEJsb2Igb2JqZWN0LiBUaGUgY29udGVudFxuICAgKiBvZiB0aGUgYmxvYiBjb25zaXN0cyBvZiB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGUgdmFsdWVzIGdpdmVuXG4gICAqIGluIHRoZSBwYXJhbWV0ZXIgYXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYmxvYlBhcnRzXG4gICAqIEBwYXJhbSB7eyB0eXBlPzogc3RyaW5nLCBlbmRpbmdzPzogc3RyaW5nIH19IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGJsb2JQYXJ0cyA9IFtdLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIGJsb2JQYXJ0cyAhPT0gJ29iamVjdCcgfHwgYmxvYlBhcnRzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGYWlsZWQgdG8gY29uc3RydWN0IFxcJ0Jsb2JcXCc6IFRoZSBwcm92aWRlZCB2YWx1ZSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgc2VxdWVuY2UuJylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGJsb2JQYXJ0c1tTeW1ib2wuaXRlcmF0b3JdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGYWlsZWQgdG8gY29uc3RydWN0IFxcJ0Jsb2JcXCc6IFRoZSBvYmplY3QgbXVzdCBoYXZlIGEgY2FsbGFibGUgQEBpdGVyYXRvciBwcm9wZXJ0eS4nKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZhaWxlZCB0byBjb25zdHJ1Y3QgXFwnQmxvYlxcJzogcGFyYW1ldGVyIDIgY2Fubm90IGNvbnZlcnQgdG8gZGljdGlvbmFyeS4nKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSBudWxsKSBvcHRpb25zID0ge307XG5cbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGJsb2JQYXJ0cykge1xuICAgICAgbGV0IHBhcnQ7XG4gICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGVsZW1lbnQpKSB7XG4gICAgICAgIHBhcnQgPSBuZXcgVWludDhBcnJheShlbGVtZW50LmJ1ZmZlci5zbGljZShlbGVtZW50LmJ5dGVPZmZzZXQsIGVsZW1lbnQuYnl0ZU9mZnNldCArIGVsZW1lbnQuYnl0ZUxlbmd0aCkpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcGFydCA9IG5ldyBVaW50OEFycmF5KGVsZW1lbnQuc2xpY2UoMCkpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICBwYXJ0ID0gZWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnQgPSBlbmNvZGVyLmVuY29kZShgJHtlbGVtZW50fWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzaXplID0gQXJyYXlCdWZmZXIuaXNWaWV3KHBhcnQpID8gcGFydC5ieXRlTGVuZ3RoIDogcGFydC5zaXplO1xuICAgICAgLy8gQXZvaWQgcHVzaGluZyBlbXB0eSBwYXJ0cyBpbnRvIHRoZSBhcnJheSB0byBiZXR0ZXIgR0MgdGhlbVxuICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgdGhpcy4jc2l6ZSArPSBzaXplO1xuICAgICAgICB0aGlzLiNwYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuI2VuZGluZ3MgPSBgJHtvcHRpb25zLmVuZGluZ3MgPT09IHVuZGVmaW5lZCA/ICd0cmFuc3BhcmVudCcgOiBvcHRpb25zLmVuZGluZ3N9YDtcbiAgICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhvcHRpb25zLnR5cGUpO1xuICAgIHRoaXMuI3R5cGUgPSAvXltcXHgyMC1cXHg3RV0qJC8udGVzdCh0eXBlKSA/IHR5cGUgOiAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgQmxvYiBpbnRlcmZhY2UncyBzaXplIHByb3BlcnR5IHJldHVybnMgdGhlXG4gICAqIHNpemUgb2YgdGhlIEJsb2IgaW4gYnl0ZXMuXG4gICAqL1xuICBnZXQgc2l6ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3NpemVcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBwcm9wZXJ0eSBvZiBhIEJsb2Igb2JqZWN0IHJldHVybnMgdGhlIE1JTUUgdHlwZSBvZiB0aGUgZmlsZS5cbiAgICovXG4gIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gdGhpcy4jdHlwZVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0KCkgbWV0aG9kIGluIHRoZSBCbG9iIGludGVyZmFjZSByZXR1cm5zIGEgUHJvbWlzZVxuICAgKiB0aGF0IHJlc29sdmVzIHdpdGggYSBzdHJpbmcgY29udGFpbmluZyB0aGUgY29udGVudHMgb2ZcbiAgICogdGhlIGJsb2IsIGludGVycHJldGVkIGFzIFVURi04LlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBhc3luYyB0ZXh0ICgpIHtcbiAgICAvLyBNb3JlIG9wdGltaXplZCB0aGFuIHVzaW5nIHRoaXMuYXJyYXlCdWZmZXIoKVxuICAgIC8vIHRoYXQgcmVxdWlyZXMgdHdpY2UgYXMgbXVjaCByYW1cbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGZvciBhd2FpdCAoY29uc3QgcGFydCBvZiB0b0l0ZXJhdG9yKHRoaXMuI3BhcnRzLCBmYWxzZSkpIHtcbiAgICAgIHN0ciArPSBkZWNvZGVyLmRlY29kZShwYXJ0LCB7IHN0cmVhbTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgLy8gUmVtYWluaW5nXG4gICAgc3RyICs9IGRlY29kZXIuZGVjb2RlKCk7XG4gICAgcmV0dXJuIHN0clxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhcnJheUJ1ZmZlcigpIG1ldGhvZCBpbiB0aGUgQmxvYiBpbnRlcmZhY2UgcmV0dXJucyBhXG4gICAqIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgYmxvYiBhc1xuICAgKiBiaW5hcnkgZGF0YSBjb250YWluZWQgaW4gYW4gQXJyYXlCdWZmZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgKi9cbiAgYXN5bmMgYXJyYXlCdWZmZXIgKCkge1xuICAgIC8vIEVhc2llciB3YXkuLi4gSnVzdCBhIHVubmVjZXNzYXJ5IG92ZXJoZWFkXG4gICAgLy8gY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuc2l6ZSk7XG4gICAgLy8gYXdhaXQgdGhpcy5zdHJlYW0oKS5nZXRSZWFkZXIoe21vZGU6ICdieW9iJ30pLnJlYWQodmlldyk7XG4gICAgLy8gcmV0dXJuIHZpZXcuYnVmZmVyO1xuXG4gICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuc2l6ZSk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiB0b0l0ZXJhdG9yKHRoaXMuI3BhcnRzLCBmYWxzZSkpIHtcbiAgICAgIGRhdGEuc2V0KGNodW5rLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YS5idWZmZXJcbiAgfVxuXG4gIHN0cmVhbSAoKSB7XG4gICAgY29uc3QgaXQgPSB0b0l0ZXJhdG9yKHRoaXMuI3BhcnRzLCB0cnVlKTtcblxuICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSh7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0eXBlOiAnYnl0ZXMnLFxuICAgICAgYXN5bmMgcHVsbCAoY3RybCkge1xuICAgICAgICBjb25zdCBjaHVuayA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgICAgY2h1bmsuZG9uZSA/IGN0cmwuY2xvc2UoKSA6IGN0cmwuZW5xdWV1ZShjaHVuay52YWx1ZSk7XG4gICAgICB9LFxuXG4gICAgICBhc3luYyBjYW5jZWwgKCkge1xuICAgICAgICBhd2FpdCBpdC5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBCbG9iIGludGVyZmFjZSdzIHNsaWNlKCkgbWV0aG9kIGNyZWF0ZXMgYW5kIHJldHVybnMgYVxuICAgKiBuZXcgQmxvYiBvYmplY3Qgd2hpY2ggY29udGFpbnMgZGF0YSBmcm9tIGEgc3Vic2V0IG9mIHRoZVxuICAgKiBibG9iIG9uIHdoaWNoIGl0J3MgY2FsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXVxuICAgKi9cbiAgc2xpY2UgKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5zaXplLCB0eXBlID0gJycpIHtcbiAgICBjb25zdCB7IHNpemUgfSA9IHRoaXM7XG5cbiAgICBsZXQgcmVsYXRpdmVTdGFydCA9IHN0YXJ0IDwgMCA/IE1hdGgubWF4KHNpemUgKyBzdGFydCwgMCkgOiBNYXRoLm1pbihzdGFydCwgc2l6ZSk7XG4gICAgbGV0IHJlbGF0aXZlRW5kID0gZW5kIDwgMCA/IE1hdGgubWF4KHNpemUgKyBlbmQsIDApIDogTWF0aC5taW4oZW5kLCBzaXplKTtcblxuICAgIGNvbnN0IHNwYW4gPSBNYXRoLm1heChyZWxhdGl2ZUVuZCAtIHJlbGF0aXZlU3RhcnQsIDApO1xuICAgIGNvbnN0IHBhcnRzID0gdGhpcy4jcGFydHM7XG4gICAgY29uc3QgYmxvYlBhcnRzID0gW107XG4gICAgbGV0IGFkZGVkID0gMDtcblxuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgICAgLy8gZG9uJ3QgYWRkIHRoZSBvdmVyZmxvdyB0byBuZXcgYmxvYlBhcnRzXG4gICAgICBpZiAoYWRkZWQgPj0gc3Bhbikge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzaXplID0gQXJyYXlCdWZmZXIuaXNWaWV3KHBhcnQpID8gcGFydC5ieXRlTGVuZ3RoIDogcGFydC5zaXplO1xuICAgICAgaWYgKHJlbGF0aXZlU3RhcnQgJiYgc2l6ZSA8PSByZWxhdGl2ZVN0YXJ0KSB7XG4gICAgICAgIC8vIFNraXAgdGhlIGJlZ2lubmluZyBhbmQgY2hhbmdlIHRoZSByZWxhdGl2ZVxuICAgICAgICAvLyBzdGFydCAmIGVuZCBwb3NpdGlvbiBhcyB3ZSBza2lwIHRoZSB1bndhbnRlZCBwYXJ0c1xuICAgICAgICByZWxhdGl2ZVN0YXJ0IC09IHNpemU7XG4gICAgICAgIHJlbGF0aXZlRW5kIC09IHNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY2h1bms7XG4gICAgICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcocGFydCkpIHtcbiAgICAgICAgICBjaHVuayA9IHBhcnQuc3ViYXJyYXkocmVsYXRpdmVTdGFydCwgTWF0aC5taW4oc2l6ZSwgcmVsYXRpdmVFbmQpKTtcbiAgICAgICAgICBhZGRlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNodW5rID0gcGFydC5zbGljZShyZWxhdGl2ZVN0YXJ0LCBNYXRoLm1pbihzaXplLCByZWxhdGl2ZUVuZCkpO1xuICAgICAgICAgIGFkZGVkICs9IGNodW5rLnNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmVsYXRpdmVFbmQgLT0gc2l6ZTtcbiAgICAgICAgYmxvYlBhcnRzLnB1c2goY2h1bmspO1xuICAgICAgICByZWxhdGl2ZVN0YXJ0ID0gMDsgLy8gQWxsIG5leHQgc2VxdWVudGlhbCBwYXJ0cyBzaG91bGQgc3RhcnQgYXQgMFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbXSwgeyB0eXBlOiBTdHJpbmcodHlwZSkudG9Mb3dlckNhc2UoKSB9KTtcbiAgICBibG9iLiNzaXplID0gc3BhbjtcbiAgICBibG9iLiNwYXJ0cyA9IGJsb2JQYXJ0cztcblxuICAgIHJldHVybiBibG9iXG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10gKCkge1xuICAgIHJldHVybiAnQmxvYidcbiAgfVxuXG4gIHN0YXRpYyBbU3ltYm9sLmhhc0luc3RhbmNlXSAob2JqZWN0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG9iamVjdCAmJlxuICAgICAgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChcbiAgICAgICAgdHlwZW9mIG9iamVjdC5zdHJlYW0gPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgdHlwZW9mIG9iamVjdC5hcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgKSAmJlxuICAgICAgL14oQmxvYnxGaWxlKSQvLnRlc3Qob2JqZWN0W1N5bWJvbC50b1N0cmluZ1RhZ10pXG4gICAgKVxuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhfQmxvYi5wcm90b3R5cGUsIHtcbiAgc2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHR5cGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICBzbGljZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG4vKiogQHR5cGUge3R5cGVvZiBnbG9iYWxUaGlzLkJsb2J9ICovXG5jb25zdCBCbG9iID0gX0Jsb2I7XG5jb25zdCBfQmxvYiQxID0gQmxvYjtcblxuY29uc3QgX0ZpbGUgPSBjbGFzcyBGaWxlIGV4dGVuZHMgX0Jsb2IkMSB7XG4gICNsYXN0TW9kaWZpZWQgPSAwXG4gICNuYW1lID0gJydcblxuICAvKipcbiAgICogQHBhcmFtIHsqW119IGZpbGVCaXRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlTmFtZVxuICAgKiBAcGFyYW0ge3tsYXN0TW9kaWZpZWQ/OiBudW1iZXIsIHR5cGU/OiBzdHJpbmd9fSBvcHRpb25zXG4gICAqLy8vIEB0cy1pZ25vcmVcbiAgY29uc3RydWN0b3IgKGZpbGVCaXRzLCBmaWxlTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBGYWlsZWQgdG8gY29uc3RydWN0ICdGaWxlJzogMiBhcmd1bWVudHMgcmVxdWlyZWQsIGJ1dCBvbmx5ICR7YXJndW1lbnRzLmxlbmd0aH0gcHJlc2VudC5gKVxuICAgIH1cbiAgICBzdXBlcihmaWxlQml0cywgb3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCkgb3B0aW9ucyA9IHt9O1xuXG4gICAgLy8gU2ltdWxhdGUgV2ViSURMIHR5cGUgY2FzdGluZyBmb3IgTmFOIHZhbHVlIGluIGxhc3RNb2RpZmllZCBvcHRpb24uXG4gICAgY29uc3QgbGFzdE1vZGlmaWVkID0gb3B0aW9ucy5sYXN0TW9kaWZpZWQgPT09IHVuZGVmaW5lZCA/IERhdGUubm93KCkgOiBOdW1iZXIob3B0aW9ucy5sYXN0TW9kaWZpZWQpO1xuICAgIGlmICghTnVtYmVyLmlzTmFOKGxhc3RNb2RpZmllZCkpIHtcbiAgICAgIHRoaXMuI2xhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDtcbiAgICB9XG5cbiAgICB0aGlzLiNuYW1lID0gU3RyaW5nKGZpbGVOYW1lKTtcbiAgfVxuXG4gIGdldCBuYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy4jbmFtZVxuICB9XG5cbiAgZ2V0IGxhc3RNb2RpZmllZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2xhc3RNb2RpZmllZFxuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddICgpIHtcbiAgICByZXR1cm4gJ0ZpbGUnXG4gIH1cblxuICBzdGF0aWMgW1N5bWJvbC5oYXNJbnN0YW5jZV0gKG9iamVjdCkge1xuICAgIHJldHVybiAhIW9iamVjdCAmJiBvYmplY3QgaW5zdGFuY2VvZiBfQmxvYiQxICYmXG4gICAgICAvXihGaWxlKSQvLnRlc3Qob2JqZWN0W1N5bWJvbC50b1N0cmluZ1RhZ10pXG4gIH1cbn07XG5cbi8qKiBAdHlwZSB7dHlwZW9mIGdsb2JhbFRoaXMuRmlsZX0gKi8vLyBAdHMtaWdub3JlXG5jb25zdCBGaWxlID0gX0ZpbGU7XG5jb25zdCBGaWxlJDEgPSBGaWxlO1xuXG4vKiEgZm9ybWRhdGEtcG9seWZpbGwuIE1JVCBMaWNlbnNlLiBKaW1teSBXw6RydGluZyA8aHR0cHM6Ly9qaW1teS53YXJ0aW5nLnNlL29wZW5zb3VyY2U+ICovXG5cbnZhciB7dG9TdHJpbmdUYWc6dCxpdGVyYXRvcjppLGhhc0luc3RhbmNlOmh9PVN5bWJvbCxcbnI9TWF0aC5yYW5kb20sXG5tPSdhcHBlbmQsc2V0LGdldCxnZXRBbGwsZGVsZXRlLGtleXMsdmFsdWVzLGVudHJpZXMsZm9yRWFjaCxjb25zdHJ1Y3Rvcicuc3BsaXQoJywnKSxcbmY9KGEsYixjKT0+KGErPScnLC9eKEJsb2J8RmlsZSkkLy50ZXN0KGIgJiYgYlt0XSk/WyhjPWMhPT12b2lkIDA/YysnJzpiW3RdPT0nRmlsZSc/Yi5uYW1lOidibG9iJyxhKSxiLm5hbWUhPT1jfHxiW3RdPT0nYmxvYic/bmV3IEZpbGUkMShbYl0sYyxiKTpiXTpbYSxiKycnXSksXG5lPShjLGYpPT4oZj9jOmMucmVwbGFjZSgvXFxyP1xcbnxcXHIvZywnXFxyXFxuJykpLnJlcGxhY2UoL1xcbi9nLCclMEEnKS5yZXBsYWNlKC9cXHIvZywnJTBEJykucmVwbGFjZSgvXCIvZywnJTIyJyksXG54PShuLCBhLCBlKT0+e2lmKGEubGVuZ3RoPGUpe3Rocm93IG5ldyBUeXBlRXJyb3IoYEZhaWxlZCB0byBleGVjdXRlICcke259JyBvbiAnRm9ybURhdGEnOiAke2V9IGFyZ3VtZW50cyByZXF1aXJlZCwgYnV0IG9ubHkgJHthLmxlbmd0aH0gcHJlc2VudC5gKX19O1xuXG4vKiogQHR5cGUge3R5cGVvZiBnbG9iYWxUaGlzLkZvcm1EYXRhfSAqL1xuY29uc3QgRm9ybURhdGEgPSBjbGFzcyBGb3JtRGF0YSB7XG4jZD1bXTtcbmNvbnN0cnVjdG9yKC4uLmEpe2lmKGEubGVuZ3RoKXRocm93IG5ldyBUeXBlRXJyb3IoYEZhaWxlZCB0byBjb25zdHJ1Y3QgJ0Zvcm1EYXRhJzogcGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgJ0hUTUxGb3JtRWxlbWVudCcuYCl9XG5nZXQgW3RdKCkge3JldHVybiAnRm9ybURhdGEnfVxuW2ldKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfVxuc3RhdGljIFtoXShvKSB7cmV0dXJuIG8mJnR5cGVvZiBvPT09J29iamVjdCcmJm9bdF09PT0nRm9ybURhdGEnJiYhbS5zb21lKG09PnR5cGVvZiBvW21dIT0nZnVuY3Rpb24nKX1cbmFwcGVuZCguLi5hKXt4KCdhcHBlbmQnLGFyZ3VtZW50cywyKTt0aGlzLiNkLnB1c2goZiguLi5hKSk7fVxuZGVsZXRlKGEpe3goJ2RlbGV0ZScsYXJndW1lbnRzLDEpO2ErPScnO3RoaXMuI2Q9dGhpcy4jZC5maWx0ZXIoKFtiXSk9PmIhPT1hKTt9XG5nZXQoYSl7eCgnZ2V0Jyxhcmd1bWVudHMsMSk7YSs9Jyc7Zm9yKHZhciBiPXRoaXMuI2QsbD1iLmxlbmd0aCxjPTA7YzxsO2MrKylpZihiW2NdWzBdPT09YSlyZXR1cm4gYltjXVsxXTtyZXR1cm4gbnVsbH1cbmdldEFsbChhLGIpe3goJ2dldEFsbCcsYXJndW1lbnRzLDEpO2I9W107YSs9Jyc7dGhpcy4jZC5mb3JFYWNoKGM9PmNbMF09PT1hJiZiLnB1c2goY1sxXSkpO3JldHVybiBifVxuaGFzKGEpe3goJ2hhcycsYXJndW1lbnRzLDEpO2ErPScnO3JldHVybiB0aGlzLiNkLnNvbWUoYj0+YlswXT09PWEpfVxuZm9yRWFjaChhLGIpe3goJ2ZvckVhY2gnLGFyZ3VtZW50cywxKTtmb3IodmFyIFtjLGRdb2YgdGhpcylhLmNhbGwoYixkLGMsdGhpcyk7fVxuc2V0KC4uLmEpe3goJ3NldCcsYXJndW1lbnRzLDIpO3ZhciBiPVtdLGM9ITA7YT1mKC4uLmEpO3RoaXMuI2QuZm9yRWFjaChkPT57ZFswXT09PWFbMF0/YyYmKGM9IWIucHVzaChhKSk6Yi5wdXNoKGQpO30pO2MmJmIucHVzaChhKTt0aGlzLiNkPWI7fVxuKmVudHJpZXMoKXt5aWVsZCp0aGlzLiNkO31cbiprZXlzKCl7Zm9yKHZhclthXW9mIHRoaXMpeWllbGQgYTt9XG4qdmFsdWVzKCl7Zm9yKHZhclssYV1vZiB0aGlzKXlpZWxkIGE7fX07XG5cbi8qKiBAcGFyYW0ge0Zvcm1EYXRhfSBGICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvQmxvYiAoRixCPV9CbG9iJDEpe1xudmFyIGI9YCR7cigpfSR7cigpfWAucmVwbGFjZSgvXFwuL2csICcnKS5zbGljZSgtMjgpLnBhZFN0YXJ0KDMyLCAnLScpLGM9W10scD1gLS0ke2J9XFxyXFxuQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiYDtcbkYuZm9yRWFjaCgodixuKT0+dHlwZW9mIHY9PSdzdHJpbmcnXG4/Yy5wdXNoKHArZShuKStgXCJcXHJcXG5cXHJcXG4ke3YucmVwbGFjZSgvXFxyKD8hXFxuKXwoPzwhXFxyKVxcbi9nLCAnXFxyXFxuJyl9XFxyXFxuYClcbjpjLnB1c2gocCtlKG4pK2BcIjsgZmlsZW5hbWU9XCIke2Uodi5uYW1lLCAxKX1cIlxcclxcbkNvbnRlbnQtVHlwZTogJHt2LnR5cGV8fFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9XFxyXFxuXFxyXFxuYCwgdiwgJ1xcclxcbicpKTtcbmMucHVzaChgLS0ke2J9LS1gKTtcbnJldHVybiBuZXcgQihjLHt0eXBlOlwibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9XCIrYn0pfVxuXG5jbGFzcyBGZXRjaEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZSwgdHlwZSkge1xuXHRcdHN1cGVyKG1lc3NhZ2UpO1xuXHRcdC8vIEhpZGUgY3VzdG9tIGVycm9yIGltcGxlbWVudGF0aW9uIGRldGFpbHMgZnJvbSBlbmQtdXNlcnNcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcblxuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdH1cblxuXHRnZXQgbmFtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXHR9XG5cblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuXHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG5cdH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7eyBhZGRyZXNzPzogc3RyaW5nLCBjb2RlOiBzdHJpbmcsIGRlc3Q/OiBzdHJpbmcsIGVycm5vOiBudW1iZXIsIGluZm8/OiBvYmplY3QsIG1lc3NhZ2U6IHN0cmluZywgcGF0aD86IHN0cmluZywgcG9ydD86IG51bWJlciwgc3lzY2FsbDogc3RyaW5nfX0gU3lzdGVtRXJyb3JcbiovXG5cbi8qKlxuICogRmV0Y2hFcnJvciBpbnRlcmZhY2UgZm9yIG9wZXJhdGlvbmFsIGVycm9yc1xuICovXG5jbGFzcyBGZXRjaEVycm9yIGV4dGVuZHMgRmV0Y2hCYXNlRXJyb3Ige1xuXHQvKipcblx0ICogQHBhcmFtICB7c3RyaW5nfSBtZXNzYWdlIC0gICAgICBFcnJvciBtZXNzYWdlIGZvciBodW1hblxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IFt0eXBlXSAtICAgICAgICBFcnJvciB0eXBlIGZvciBtYWNoaW5lXG5cdCAqIEBwYXJhbSAge1N5c3RlbUVycm9yfSBbc3lzdGVtRXJyb3JdIC0gRm9yIE5vZGUuanMgc3lzdGVtIGVycm9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlLCBzeXN0ZW1FcnJvcikge1xuXHRcdHN1cGVyKG1lc3NhZ2UsIHR5cGUpO1xuXHRcdC8vIFdoZW4gZXJyLnR5cGUgaXMgYHN5c3RlbWAsIGVyci5lcnJvcmVkU3lzQ2FsbCBjb250YWlucyBzeXN0ZW0gZXJyb3IgYW5kIGVyci5jb2RlIGNvbnRhaW5zIHN5c3RlbSBlcnJvciBjb2RlXG5cdFx0aWYgKHN5c3RlbUVycm9yKSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbXVsdGktYXNzaWduXG5cdFx0XHR0aGlzLmNvZGUgPSB0aGlzLmVycm5vID0gc3lzdGVtRXJyb3IuY29kZTtcblx0XHRcdHRoaXMuZXJyb3JlZFN5c0NhbGwgPSBzeXN0ZW1FcnJvci5zeXNjYWxsO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIElzLmpzXG4gKlxuICogT2JqZWN0IHR5cGUgY2hlY2tzLlxuICovXG5cbmNvbnN0IE5BTUUgPSBTeW1ib2wudG9TdHJpbmdUYWc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKiByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWZldGNoL25vZGUtZmV0Y2gvaXNzdWVzLzI5NiNpc3N1ZWNvbW1lbnQtMzA3NTk4MTQzXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBjaGVjayBmb3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1ldGVycyA9IG9iamVjdCA9PiB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmFwcGVuZCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuZGVsZXRlID09PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIG9iamVjdC5nZXQgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmdldEFsbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuaGFzID09PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIG9iamVjdC5zZXQgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LnNvcnQgPT09ICdmdW5jdGlvbicgJiZcblx0XHRvYmplY3RbTkFNRV0gPT09ICdVUkxTZWFyY2hQYXJhbXMnXG5cdCk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmplY3RgIGlzIGEgVzNDIGBCbG9iYCBvYmplY3QgKHdoaWNoIGBGaWxlYCBpbmhlcml0cyBmcm9tKVxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gY2hlY2sgZm9yXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5jb25zdCBpc0Jsb2IgPSBvYmplY3QgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdG9iamVjdCAmJlxuXHRcdHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG5cdFx0dHlwZW9mIG9iamVjdC5hcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QudHlwZSA9PT0gJ3N0cmluZycgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LnN0cmVhbSA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiZcblx0XHQvXihCbG9ifEZpbGUpJC8udGVzdChvYmplY3RbTkFNRV0pXG5cdCk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmpgIGlzIGFuIGluc3RhbmNlIG9mIEFib3J0U2lnbmFsLlxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gY2hlY2sgZm9yXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5jb25zdCBpc0Fib3J0U2lnbmFsID0gb2JqZWN0ID0+IHtcblx0cmV0dXJuIChcblx0XHR0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiAoXG5cdFx0XHRvYmplY3RbTkFNRV0gPT09ICdBYm9ydFNpZ25hbCcgfHxcblx0XHRcdG9iamVjdFtOQU1FXSA9PT0gJ0V2ZW50VGFyZ2V0J1xuXHRcdClcblx0KTtcbn07XG5cbi8qKlxuICogaXNEb21haW5PclN1YmRvbWFpbiByZXBvcnRzIHdoZXRoZXIgc3ViIGlzIGEgc3ViZG9tYWluIChvciBleGFjdCBtYXRjaCkgb2ZcbiAqIHRoZSBwYXJlbnQgZG9tYWluLlxuICpcbiAqIEJvdGggZG9tYWlucyBtdXN0IGFscmVhZHkgYmUgaW4gY2Fub25pY2FsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IG9yaWdpbmFsXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IGRlc3RpbmF0aW9uXG4gKi9cbmNvbnN0IGlzRG9tYWluT3JTdWJkb21haW4gPSAoZGVzdGluYXRpb24sIG9yaWdpbmFsKSA9PiB7XG5cdGNvbnN0IG9yaWcgPSBuZXcgVVJMKG9yaWdpbmFsKS5ob3N0bmFtZTtcblx0Y29uc3QgZGVzdCA9IG5ldyBVUkwoZGVzdGluYXRpb24pLmhvc3RuYW1lO1xuXG5cdHJldHVybiBvcmlnID09PSBkZXN0IHx8IG9yaWcuZW5kc1dpdGgoYC4ke2Rlc3R9YCk7XG59O1xuXG4vKipcbiAqIGlzU2FtZVByb3RvY29sIHJlcG9ydHMgd2hldGhlciB0aGUgdHdvIHByb3ZpZGVkIFVSTHMgdXNlIHRoZSBzYW1lIHByb3RvY29sLlxuICpcbiAqIEJvdGggZG9tYWlucyBtdXN0IGFscmVhZHkgYmUgaW4gY2Fub25pY2FsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IG9yaWdpbmFsXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IGRlc3RpbmF0aW9uXG4gKi9cbmNvbnN0IGlzU2FtZVByb3RvY29sID0gKGRlc3RpbmF0aW9uLCBvcmlnaW5hbCkgPT4ge1xuXHRjb25zdCBvcmlnID0gbmV3IFVSTChvcmlnaW5hbCkucHJvdG9jb2w7XG5cdGNvbnN0IGRlc3QgPSBuZXcgVVJMKGRlc3RpbmF0aW9uKS5wcm90b2NvbDtcblxuXHRyZXR1cm4gb3JpZyA9PT0gZGVzdDtcbn07XG5cbmNvbnN0IHBpcGVsaW5lID0gbm9kZV91dGlsLnByb21pc2lmeShTdHJlYW0ucGlwZWxpbmUpO1xuY29uc3QgSU5URVJOQUxTJDIgPSBTeW1ib2woJ0JvZHkgaW50ZXJuYWxzJyk7XG5cbi8qKlxuICogQm9keSBtaXhpblxuICpcbiAqIFJlZjogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2JvZHlcbiAqXG4gKiBAcGFyYW0gICBTdHJlYW0gIGJvZHkgIFJlYWRhYmxlIHN0cmVhbVxuICogQHBhcmFtICAgT2JqZWN0ICBvcHRzICBSZXNwb25zZSBvcHRpb25zXG4gKiBAcmV0dXJuICBWb2lkXG4gKi9cbmNsYXNzIEJvZHkge1xuXHRjb25zdHJ1Y3Rvcihib2R5LCB7XG5cdFx0c2l6ZSA9IDBcblx0fSA9IHt9KSB7XG5cdFx0bGV0IGJvdW5kYXJ5ID0gbnVsbDtcblxuXHRcdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0XHQvLyBCb2R5IGlzIHVuZGVmaW5lZCBvciBudWxsXG5cdFx0XHRib2R5ID0gbnVsbDtcblx0XHR9IGVsc2UgaWYgKGlzVVJMU2VhcmNoUGFyYW1ldGVycyhib2R5KSkge1xuXHRcdFx0Ly8gQm9keSBpcyBhIFVSTFNlYXJjaFBhcmFtc1xuXHRcdFx0Ym9keSA9IG5vZGVfYnVmZmVyLkJ1ZmZlci5mcm9tKGJvZHkudG9TdHJpbmcoKSk7XG5cdFx0fSBlbHNlIGlmIChpc0Jsb2IoYm9keSkpIDsgZWxzZSBpZiAobm9kZV9idWZmZXIuQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSA7IGVsc2UgaWYgKG5vZGVfdXRpbC50eXBlcy5pc0FueUFycmF5QnVmZmVyKGJvZHkpKSB7XG5cdFx0XHQvLyBCb2R5IGlzIEFycmF5QnVmZmVyXG5cdFx0XHRib2R5ID0gbm9kZV9idWZmZXIuQnVmZmVyLmZyb20oYm9keSk7XG5cdFx0fSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkpIHtcblx0XHRcdC8vIEJvZHkgaXMgQXJyYXlCdWZmZXJWaWV3XG5cdFx0XHRib2R5ID0gbm9kZV9idWZmZXIuQnVmZmVyLmZyb20oYm9keS5idWZmZXIsIGJvZHkuYnl0ZU9mZnNldCwgYm9keS5ieXRlTGVuZ3RoKTtcblx0XHR9IGVsc2UgaWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIDsgZWxzZSBpZiAoYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG5cdFx0XHQvLyBCb2R5IGlzIEZvcm1EYXRhXG5cdFx0XHRib2R5ID0gZm9ybURhdGFUb0Jsb2IoYm9keSk7XG5cdFx0XHRib3VuZGFyeSA9IGJvZHkudHlwZS5zcGxpdCgnPScpWzFdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBOb25lIG9mIHRoZSBhYm92ZVxuXHRcdFx0Ly8gY29lcmNlIHRvIHN0cmluZyB0aGVuIGJ1ZmZlclxuXHRcdFx0Ym9keSA9IG5vZGVfYnVmZmVyLkJ1ZmZlci5mcm9tKFN0cmluZyhib2R5KSk7XG5cdFx0fVxuXG5cdFx0bGV0IHN0cmVhbSA9IGJvZHk7XG5cblx0XHRpZiAobm9kZV9idWZmZXIuQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0XHRzdHJlYW0gPSBTdHJlYW0uUmVhZGFibGUuZnJvbShib2R5KTtcblx0XHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkge1xuXHRcdFx0c3RyZWFtID0gU3RyZWFtLlJlYWRhYmxlLmZyb20oYm9keS5zdHJlYW0oKSk7XG5cdFx0fVxuXG5cdFx0dGhpc1tJTlRFUk5BTFMkMl0gPSB7XG5cdFx0XHRib2R5LFxuXHRcdFx0c3RyZWFtLFxuXHRcdFx0Ym91bmRhcnksXG5cdFx0XHRkaXN0dXJiZWQ6IGZhbHNlLFxuXHRcdFx0ZXJyb3I6IG51bGxcblx0XHR9O1xuXHRcdHRoaXMuc2l6ZSA9IHNpemU7XG5cblx0XHRpZiAoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkge1xuXHRcdFx0Ym9keS5vbignZXJyb3InLCBlcnJvcl8gPT4ge1xuXHRcdFx0XHRjb25zdCBlcnJvciA9IGVycm9yXyBpbnN0YW5jZW9mIEZldGNoQmFzZUVycm9yID9cblx0XHRcdFx0XHRlcnJvcl8gOlxuXHRcdFx0XHRcdG5ldyBGZXRjaEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGJvZHkgd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7dGhpcy51cmx9OiAke2Vycm9yXy5tZXNzYWdlfWAsICdzeXN0ZW0nLCBlcnJvcl8pO1xuXHRcdFx0XHR0aGlzW0lOVEVSTkFMUyQyXS5lcnJvciA9IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGJvZHkoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDJdLnN0cmVhbTtcblx0fVxuXG5cdGdldCBib2R5VXNlZCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMl0uZGlzdHVyYmVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlY29kZSByZXNwb25zZSBhcyBBcnJheUJ1ZmZlclxuXHQgKlxuXHQgKiBAcmV0dXJuICBQcm9taXNlXG5cdCAqL1xuXHRhc3luYyBhcnJheUJ1ZmZlcigpIHtcblx0XHRjb25zdCB7YnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RofSA9IGF3YWl0IGNvbnN1bWVCb2R5KHRoaXMpO1xuXHRcdHJldHVybiBidWZmZXIuc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGgpO1xuXHR9XG5cblx0YXN5bmMgZm9ybURhdGEoKSB7XG5cdFx0Y29uc3QgY3QgPSB0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcblxuXHRcdGlmIChjdC5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSkge1xuXHRcdFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblx0XHRcdGNvbnN0IHBhcmFtZXRlcnMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGF3YWl0IHRoaXMudGV4dCgpKTtcblxuXHRcdFx0Zm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIHBhcmFtZXRlcnMpIHtcblx0XHRcdFx0Zm9ybURhdGEuYXBwZW5kKG5hbWUsIHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZvcm1EYXRhO1xuXHRcdH1cblxuXHRcdGNvbnN0IHt0b0Zvcm1EYXRhfSA9IGF3YWl0IGltcG9ydCgnLi4vY2h1bmtzL211bHRpcGFydC1wYXJzZXIuY2pzJyk7XG5cdFx0cmV0dXJuIHRvRm9ybURhdGEodGhpcy5ib2R5LCBjdCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJuIHJhdyByZXNwb25zZSBhcyBCbG9iXG5cdCAqXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxuXHQgKi9cblx0YXN5bmMgYmxvYigpIHtcblx0XHRjb25zdCBjdCA9ICh0aGlzLmhlYWRlcnMgJiYgdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHx8ICh0aGlzW0lOVEVSTkFMUyQyXS5ib2R5ICYmIHRoaXNbSU5URVJOQUxTJDJdLmJvZHkudHlwZSkgfHwgJyc7XG5cdFx0Y29uc3QgYnVmID0gYXdhaXQgdGhpcy5hcnJheUJ1ZmZlcigpO1xuXG5cdFx0cmV0dXJuIG5ldyBfQmxvYiQxKFtidWZdLCB7XG5cdFx0XHR0eXBlOiBjdFxuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlY29kZSByZXNwb25zZSBhcyBqc29uXG5cdCAqXG5cdCAqIEByZXR1cm4gIFByb21pc2Vcblx0ICovXG5cdGFzeW5jIGpzb24oKSB7XG5cdFx0Y29uc3QgdGV4dCA9IGF3YWl0IHRoaXMudGV4dCgpO1xuXHRcdHJldHVybiBKU09OLnBhcnNlKHRleHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlY29kZSByZXNwb25zZSBhcyB0ZXh0XG5cdCAqXG5cdCAqIEByZXR1cm4gIFByb21pc2Vcblx0ICovXG5cdGFzeW5jIHRleHQoKSB7XG5cdFx0Y29uc3QgYnVmZmVyID0gYXdhaXQgY29uc3VtZUJvZHkodGhpcyk7XG5cdFx0cmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShidWZmZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlY29kZSByZXNwb25zZSBhcyBidWZmZXIgKG5vbi1zcGVjIGFwaSlcblx0ICpcblx0ICogQHJldHVybiAgUHJvbWlzZVxuXHQgKi9cblx0YnVmZmVyKCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keSh0aGlzKTtcblx0fVxufVxuXG5Cb2R5LnByb3RvdHlwZS5idWZmZXIgPSBub2RlX3V0aWwuZGVwcmVjYXRlKEJvZHkucHJvdG90eXBlLmJ1ZmZlciwgJ1BsZWFzZSB1c2UgXFwncmVzcG9uc2UuYXJyYXlCdWZmZXIoKVxcJyBpbnN0ZWFkIG9mIFxcJ3Jlc3BvbnNlLmJ1ZmZlcigpXFwnJywgJ25vZGUtZmV0Y2gjYnVmZmVyJyk7XG5cbi8vIEluIGJyb3dzZXJzLCBhbGwgcHJvcGVydGllcyBhcmUgZW51bWVyYWJsZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJvZHkucHJvdG90eXBlLCB7XG5cdGJvZHk6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0Ym9keVVzZWQ6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0YXJyYXlCdWZmZXI6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0YmxvYjoge2VudW1lcmFibGU6IHRydWV9LFxuXHRqc29uOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHRleHQ6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0ZGF0YToge2dldDogbm9kZV91dGlsLmRlcHJlY2F0ZSgoKSA9PiB7fSxcblx0XHQnZGF0YSBkb2VzblxcJ3QgZXhpc3QsIHVzZSBqc29uKCksIHRleHQoKSwgYXJyYXlCdWZmZXIoKSwgb3IgYm9keSBpbnN0ZWFkJyxcblx0XHQnaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMTAwMCAocmVzcG9uc2UpJyl9XG59KTtcblxuLyoqXG4gKiBDb25zdW1lIGFuZCBjb252ZXJ0IGFuIGVudGlyZSBCb2R5IHRvIGEgQnVmZmVyLlxuICpcbiAqIFJlZjogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtYm9keS1jb25zdW1lLWJvZHlcbiAqXG4gKiBAcmV0dXJuIFByb21pc2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29uc3VtZUJvZHkoZGF0YSkge1xuXHRpZiAoZGF0YVtJTlRFUk5BTFMkMl0uZGlzdHVyYmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgYm9keSB1c2VkIGFscmVhZHkgZm9yOiAke2RhdGEudXJsfWApO1xuXHR9XG5cblx0ZGF0YVtJTlRFUk5BTFMkMl0uZGlzdHVyYmVkID0gdHJ1ZTtcblxuXHRpZiAoZGF0YVtJTlRFUk5BTFMkMl0uZXJyb3IpIHtcblx0XHR0aHJvdyBkYXRhW0lOVEVSTkFMUyQyXS5lcnJvcjtcblx0fVxuXG5cdGNvbnN0IHtib2R5fSA9IGRhdGE7XG5cblx0Ly8gQm9keSBpcyBudWxsXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIG5vZGVfYnVmZmVyLkJ1ZmZlci5hbGxvYygwKTtcblx0fVxuXG5cdC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cblx0aWYgKCEoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkpIHtcblx0XHRyZXR1cm4gbm9kZV9idWZmZXIuQnVmZmVyLmFsbG9jKDApO1xuXHR9XG5cblx0Ly8gQm9keSBpcyBzdHJlYW1cblx0Ly8gZ2V0IHJlYWR5IHRvIGFjdHVhbGx5IGNvbnN1bWUgdGhlIGJvZHlcblx0Y29uc3QgYWNjdW0gPSBbXTtcblx0bGV0IGFjY3VtQnl0ZXMgPSAwO1xuXG5cdHRyeSB7XG5cdFx0Zm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBib2R5KSB7XG5cdFx0XHRpZiAoZGF0YS5zaXplID4gMCAmJiBhY2N1bUJ5dGVzICsgY2h1bmsubGVuZ3RoID4gZGF0YS5zaXplKSB7XG5cdFx0XHRcdGNvbnN0IGVycm9yID0gbmV3IEZldGNoRXJyb3IoYGNvbnRlbnQgc2l6ZSBhdCAke2RhdGEudXJsfSBvdmVyIGxpbWl0OiAke2RhdGEuc2l6ZX1gLCAnbWF4LXNpemUnKTtcblx0XHRcdFx0Ym9keS5kZXN0cm95KGVycm9yKTtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cblx0XHRcdGFjY3VtQnl0ZXMgKz0gY2h1bmsubGVuZ3RoO1xuXHRcdFx0YWNjdW0ucHVzaChjaHVuayk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnN0IGVycm9yXyA9IGVycm9yIGluc3RhbmNlb2YgRmV0Y2hCYXNlRXJyb3IgPyBlcnJvciA6IG5ldyBGZXRjaEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGJvZHkgd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7ZGF0YS51cmx9OiAke2Vycm9yLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycm9yKTtcblx0XHR0aHJvdyBlcnJvcl87XG5cdH1cblxuXHRpZiAoYm9keS5yZWFkYWJsZUVuZGVkID09PSB0cnVlIHx8IGJvZHkuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPT09IHRydWUpIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKGFjY3VtLmV2ZXJ5KGMgPT4gdHlwZW9mIGMgPT09ICdzdHJpbmcnKSkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZV9idWZmZXIuQnVmZmVyLmZyb20oYWNjdW0uam9pbignJykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbm9kZV9idWZmZXIuQnVmZmVyLmNvbmNhdChhY2N1bSwgYWNjdW1CeXRlcyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRocm93IG5ldyBGZXRjaEVycm9yKGBDb3VsZCBub3QgY3JlYXRlIEJ1ZmZlciBmcm9tIHJlc3BvbnNlIGJvZHkgZm9yICR7ZGF0YS51cmx9OiAke2Vycm9yLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycm9yKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEZldGNoRXJyb3IoYFByZW1hdHVyZSBjbG9zZSBvZiBzZXJ2ZXIgcmVzcG9uc2Ugd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7ZGF0YS51cmx9YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBDbG9uZSBib2R5IGdpdmVuIFJlcy9SZXEgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgIGluc3RhbmNlICAgICAgIFJlc3BvbnNlIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEBwYXJhbSAgIFN0cmluZyAgaGlnaFdhdGVyTWFyayAgaGlnaFdhdGVyTWFyayBmb3IgYm90aCBQYXNzVGhyb3VnaCBib2R5IHN0cmVhbXNcbiAqIEByZXR1cm4gIE1peGVkXG4gKi9cbmNvbnN0IGNsb25lID0gKGluc3RhbmNlLCBoaWdoV2F0ZXJNYXJrKSA9PiB7XG5cdGxldCBwMTtcblx0bGV0IHAyO1xuXHRsZXQge2JvZHl9ID0gaW5zdGFuY2VbSU5URVJOQUxTJDJdO1xuXG5cdC8vIERvbid0IGFsbG93IGNsb25pbmcgYSB1c2VkIGJvZHlcblx0aWYgKGluc3RhbmNlLmJvZHlVc2VkKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgY2xvbmUgYm9keSBhZnRlciBpdCBpcyB1c2VkJyk7XG5cdH1cblxuXHQvLyBDaGVjayB0aGF0IGJvZHkgaXMgYSBzdHJlYW0gYW5kIG5vdCBmb3JtLWRhdGEgb2JqZWN0XG5cdC8vIG5vdGU6IHdlIGNhbid0IGNsb25lIHRoZSBmb3JtLWRhdGEgb2JqZWN0IHdpdGhvdXQgaGF2aW5nIGl0IGFzIGEgZGVwZW5kZW5jeVxuXHRpZiAoKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pICYmICh0eXBlb2YgYm9keS5nZXRCb3VuZGFyeSAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHQvLyBUZWUgaW5zdGFuY2UgYm9keVxuXHRcdHAxID0gbmV3IFN0cmVhbS5QYXNzVGhyb3VnaCh7aGlnaFdhdGVyTWFya30pO1xuXHRcdHAyID0gbmV3IFN0cmVhbS5QYXNzVGhyb3VnaCh7aGlnaFdhdGVyTWFya30pO1xuXHRcdGJvZHkucGlwZShwMSk7XG5cdFx0Ym9keS5waXBlKHAyKTtcblx0XHQvLyBTZXQgaW5zdGFuY2UgYm9keSB0byB0ZWVkIGJvZHkgYW5kIHJldHVybiB0aGUgb3RoZXIgdGVlZCBib2R5XG5cdFx0aW5zdGFuY2VbSU5URVJOQUxTJDJdLnN0cmVhbSA9IHAxO1xuXHRcdGJvZHkgPSBwMjtcblx0fVxuXG5cdHJldHVybiBib2R5O1xufTtcblxuY29uc3QgZ2V0Tm9uU3BlY0Zvcm1EYXRhQm91bmRhcnkgPSBub2RlX3V0aWwuZGVwcmVjYXRlKFxuXHRib2R5ID0+IGJvZHkuZ2V0Qm91bmRhcnkoKSxcblx0J2Zvcm0tZGF0YSBkb2VzblxcJ3QgZm9sbG93IHRoZSBzcGVjIGFuZCByZXF1aXJlcyBzcGVjaWFsIHRyZWF0bWVudC4gVXNlIGFsdGVybmF0aXZlIHBhY2thZ2UnLFxuXHQnaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMTE2Nydcbik7XG5cbi8qKlxuICogUGVyZm9ybXMgdGhlIG9wZXJhdGlvbiBcImV4dHJhY3QgYSBgQ29udGVudC1UeXBlYCB2YWx1ZSBmcm9tIHxvYmplY3R8XCIgYXNcbiAqIHNwZWNpZmllZCBpbiB0aGUgc3BlY2lmaWNhdGlvbjpcbiAqIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWJvZHlpbml0LWV4dHJhY3RcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBpbnN0YW5jZS5ib2R5IGlzIHByZXNlbnQuXG4gKlxuICogQHBhcmFtIHthbnl9IGJvZHkgQW55IG9wdGlvbnMuYm9keSBpbnB1dFxuICogQHJldHVybnMge3N0cmluZyB8IG51bGx9XG4gKi9cbmNvbnN0IGV4dHJhY3RDb250ZW50VHlwZSA9IChib2R5LCByZXF1ZXN0KSA9PiB7XG5cdC8vIEJvZHkgaXMgbnVsbCBvciB1bmRlZmluZWRcblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIEJvZHkgaXMgc3RyaW5nXG5cdGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCc7XG5cdH1cblxuXHQvLyBCb2R5IGlzIGEgVVJMU2VhcmNoUGFyYW1zXG5cdGlmIChpc1VSTFNlYXJjaFBhcmFtZXRlcnMoYm9keSkpIHtcblx0XHRyZXR1cm4gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jztcblx0fVxuXG5cdC8vIEJvZHkgaXMgYmxvYlxuXHRpZiAoaXNCbG9iKGJvZHkpKSB7XG5cdFx0cmV0dXJuIGJvZHkudHlwZSB8fCBudWxsO1xuXHR9XG5cblx0Ly8gQm9keSBpcyBhIEJ1ZmZlciAoQnVmZmVyLCBBcnJheUJ1ZmZlciBvciBBcnJheUJ1ZmZlclZpZXcpXG5cdGlmIChub2RlX2J1ZmZlci5CdWZmZXIuaXNCdWZmZXIoYm9keSkgfHwgbm9kZV91dGlsLnR5cGVzLmlzQW55QXJyYXlCdWZmZXIoYm9keSkgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KGJvZHkpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRpZiAoYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG5cdFx0cmV0dXJuIGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke3JlcXVlc3RbSU5URVJOQUxTJDJdLmJvdW5kYXJ5fWA7XG5cdH1cblxuXHQvLyBEZXRlY3QgZm9ybSBkYXRhIGlucHV0IGZyb20gZm9ybS1kYXRhIG1vZHVsZVxuXHRpZiAoYm9keSAmJiB0eXBlb2YgYm9keS5nZXRCb3VuZGFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBgbXVsdGlwYXJ0L2Zvcm0tZGF0YTtib3VuZGFyeT0ke2dldE5vblNwZWNGb3JtRGF0YUJvdW5kYXJ5KGJvZHkpfWA7XG5cdH1cblxuXHQvLyBCb2R5IGlzIHN0cmVhbSAtIGNhbid0IHJlYWxseSBkbyBtdWNoIGFib3V0IHRoaXNcblx0aWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIEJvZHkgY29uc3RydWN0b3IgZGVmYXVsdHMgb3RoZXIgdGhpbmdzIHRvIHN0cmluZ1xuXHRyZXR1cm4gJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCc7XG59O1xuXG4vKipcbiAqIFRoZSBGZXRjaCBTdGFuZGFyZCB0cmVhdHMgdGhpcyBhcyBpZiBcInRvdGFsIGJ5dGVzXCIgaXMgYSBwcm9wZXJ0eSBvbiB0aGUgYm9keS5cbiAqIEZvciB1cywgd2UgaGF2ZSB0byBleHBsaWNpdGx5IGdldCBpdCB3aXRoIGEgZnVuY3Rpb24uXG4gKlxuICogcmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ib2R5LXRvdGFsLWJ5dGVzXG4gKlxuICogQHBhcmFtIHthbnl9IG9iai5ib2R5IEJvZHkgb2JqZWN0IGZyb20gdGhlIEJvZHkgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7bnVtYmVyIHwgbnVsbH1cbiAqL1xuY29uc3QgZ2V0VG90YWxCeXRlcyA9IHJlcXVlc3QgPT4ge1xuXHRjb25zdCB7Ym9keX0gPSByZXF1ZXN0W0lOVEVSTkFMUyQyXTtcblxuXHQvLyBCb2R5IGlzIG51bGwgb3IgdW5kZWZpbmVkXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHQvLyBCb2R5IGlzIEJsb2Jcblx0aWYgKGlzQmxvYihib2R5KSkge1xuXHRcdHJldHVybiBib2R5LnNpemU7XG5cdH1cblxuXHQvLyBCb2R5IGlzIEJ1ZmZlclxuXHRpZiAobm9kZV9idWZmZXIuQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0cmV0dXJuIGJvZHkubGVuZ3RoO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IGZvcm0gZGF0YSBpbnB1dCBmcm9tIGZvcm0tZGF0YSBtb2R1bGVcblx0aWYgKGJvZHkgJiYgdHlwZW9mIGJvZHkuZ2V0TGVuZ3RoU3luYyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBib2R5Lmhhc0tub3duTGVuZ3RoICYmIGJvZHkuaGFzS25vd25MZW5ndGgoKSA/IGJvZHkuZ2V0TGVuZ3RoU3luYygpIDogbnVsbDtcblx0fVxuXG5cdC8vIEJvZHkgaXMgc3RyZWFtXG5cdHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBXcml0ZSBhIEJvZHkgdG8gYSBOb2RlLmpzIFdyaXRhYmxlU3RyZWFtIChlLmcuIGh0dHAuUmVxdWVzdCkgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyZWFtLldyaXRhYmxlfSBkZXN0IFRoZSBzdHJlYW0gdG8gd3JpdGUgdG8uXG4gKiBAcGFyYW0gb2JqLmJvZHkgQm9keSBvYmplY3QgZnJvbSB0aGUgQm9keSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5jb25zdCB3cml0ZVRvU3RyZWFtID0gYXN5bmMgKGRlc3QsIHtib2R5fSkgPT4ge1xuXHRpZiAoYm9keSA9PT0gbnVsbCkge1xuXHRcdC8vIEJvZHkgaXMgbnVsbFxuXHRcdGRlc3QuZW5kKCk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gQm9keSBpcyBzdHJlYW1cblx0XHRhd2FpdCBwaXBlbGluZShib2R5LCBkZXN0KTtcblx0fVxufTtcblxuLyoqXG4gKiBIZWFkZXJzLmpzXG4gKlxuICogSGVhZGVycyBjbGFzcyBvZmZlcnMgY29udmVuaWVudCBoZWxwZXJzXG4gKi9cblxuLyogYzggaWdub3JlIG5leHQgOSAqL1xuY29uc3QgdmFsaWRhdGVIZWFkZXJOYW1lID0gdHlwZW9mIGh0dHAudmFsaWRhdGVIZWFkZXJOYW1lID09PSAnZnVuY3Rpb24nID9cblx0aHR0cC52YWxpZGF0ZUhlYWRlck5hbWUgOlxuXHRuYW1lID0+IHtcblx0XHRpZiAoIS9eW1xcXmBcXC1cXHchIyQlJicqKy58fl0rJC8udGVzdChuYW1lKSkge1xuXHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKGBIZWFkZXIgbmFtZSBtdXN0IGJlIGEgdmFsaWQgSFRUUCB0b2tlbiBbJHtuYW1lfV1gKTtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ2NvZGUnLCB7dmFsdWU6ICdFUlJfSU5WQUxJRF9IVFRQX1RPS0VOJ30pO1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXHR9O1xuXG4vKiBjOCBpZ25vcmUgbmV4dCA5ICovXG5jb25zdCB2YWxpZGF0ZUhlYWRlclZhbHVlID0gdHlwZW9mIGh0dHAudmFsaWRhdGVIZWFkZXJWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/XG5cdGh0dHAudmFsaWRhdGVIZWFkZXJWYWx1ZSA6XG5cdChuYW1lLCB2YWx1ZSkgPT4ge1xuXHRcdGlmICgvW15cXHRcXHUwMDIwLVxcdTAwN0VcXHUwMDgwLVxcdTAwRkZdLy50ZXN0KHZhbHVlKSkge1xuXHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgY29udGVudCBbXCIke25hbWV9XCJdYCk7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdjb2RlJywge3ZhbHVlOiAnRVJSX0lOVkFMSURfQ0hBUid9KTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7SGVhZGVycyB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBJdGVyYWJsZTxyZWFkb25seSBbc3RyaW5nLCBzdHJpbmddPiB8IEl0ZXJhYmxlPEl0ZXJhYmxlPHN0cmluZz4+fSBIZWFkZXJzSW5pdFxuICovXG5cbi8qKlxuICogVGhpcyBGZXRjaCBBUEkgaW50ZXJmYWNlIGFsbG93cyB5b3UgdG8gcGVyZm9ybSB2YXJpb3VzIGFjdGlvbnMgb24gSFRUUCByZXF1ZXN0IGFuZCByZXNwb25zZSBoZWFkZXJzLlxuICogVGhlc2UgYWN0aW9ucyBpbmNsdWRlIHJldHJpZXZpbmcsIHNldHRpbmcsIGFkZGluZyB0bywgYW5kIHJlbW92aW5nLlxuICogQSBIZWFkZXJzIG9iamVjdCBoYXMgYW4gYXNzb2NpYXRlZCBoZWFkZXIgbGlzdCwgd2hpY2ggaXMgaW5pdGlhbGx5IGVtcHR5IGFuZCBjb25zaXN0cyBvZiB6ZXJvIG9yIG1vcmUgbmFtZSBhbmQgdmFsdWUgcGFpcnMuXG4gKiBZb3UgY2FuIGFkZCB0byB0aGlzIHVzaW5nIG1ldGhvZHMgbGlrZSBhcHBlbmQoKSAoc2VlIEV4YW1wbGVzLilcbiAqIEluIGFsbCBtZXRob2RzIG9mIHRoaXMgaW50ZXJmYWNlLCBoZWFkZXIgbmFtZXMgYXJlIG1hdGNoZWQgYnkgY2FzZS1pbnNlbnNpdGl2ZSBieXRlIHNlcXVlbmNlLlxuICpcbiAqL1xuY2xhc3MgSGVhZGVycyBleHRlbmRzIFVSTFNlYXJjaFBhcmFtcyB7XG5cdC8qKlxuXHQgKiBIZWFkZXJzIGNsYXNzXG5cdCAqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge0hlYWRlcnNJbml0fSBbaW5pdF0gLSBSZXNwb25zZSBoZWFkZXJzXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihpbml0KSB7XG5cdFx0Ly8gVmFsaWRhdGUgYW5kIG5vcm1hbGl6ZSBpbml0IG9iamVjdCBpbiBbbmFtZSwgdmFsdWUocyldW11cblx0XHQvKiogQHR5cGUge3N0cmluZ1tdW119ICovXG5cdFx0bGV0IHJlc3VsdCA9IFtdO1xuXHRcdGlmIChpbml0IGluc3RhbmNlb2YgSGVhZGVycykge1xuXHRcdFx0Y29uc3QgcmF3ID0gaW5pdC5yYXcoKTtcblx0XHRcdGZvciAoY29uc3QgW25hbWUsIHZhbHVlc10gb2YgT2JqZWN0LmVudHJpZXMocmF3KSkge1xuXHRcdFx0XHRyZXN1bHQucHVzaCguLi52YWx1ZXMubWFwKHZhbHVlID0+IFtuYW1lLCB2YWx1ZV0pKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGluaXQgPT0gbnVsbCkgOyBlbHNlIGlmICh0eXBlb2YgaW5pdCA9PT0gJ29iamVjdCcgJiYgIW5vZGVfdXRpbC50eXBlcy5pc0JveGVkUHJpbWl0aXZlKGluaXQpKSB7XG5cdFx0XHRjb25zdCBtZXRob2QgPSBpbml0W1N5bWJvbC5pdGVyYXRvcl07XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxXG5cdFx0XHRpZiAobWV0aG9kID09IG51bGwpIHtcblx0XHRcdFx0Ly8gUmVjb3JkPEJ5dGVTdHJpbmcsIEJ5dGVTdHJpbmc+XG5cdFx0XHRcdHJlc3VsdC5wdXNoKC4uLk9iamVjdC5lbnRyaWVzKGluaXQpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgbWV0aG9kICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSGVhZGVyIHBhaXJzIG11c3QgYmUgaXRlcmFibGUnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlcXVlbmNlPHNlcXVlbmNlPEJ5dGVTdHJpbmc+PlxuXHRcdFx0XHQvLyBOb3RlOiBwZXIgc3BlYyB3ZSBoYXZlIHRvIGZpcnN0IGV4aGF1c3QgdGhlIGxpc3RzIHRoZW4gcHJvY2VzcyB0aGVtXG5cdFx0XHRcdHJlc3VsdCA9IFsuLi5pbml0XVxuXHRcdFx0XHRcdC5tYXAocGFpciA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRcdHR5cGVvZiBwYWlyICE9PSAnb2JqZWN0JyB8fCBub2RlX3V0aWwudHlwZXMuaXNCb3hlZFByaW1pdGl2ZShwYWlyKVxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0VhY2ggaGVhZGVyIHBhaXIgbXVzdCBiZSBhbiBpdGVyYWJsZSBvYmplY3QnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIFsuLi5wYWlyXTtcblx0XHRcdFx0XHR9KS5tYXAocGFpciA9PiB7XG5cdFx0XHRcdFx0XHRpZiAocGFpci5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRWFjaCBoZWFkZXIgcGFpciBtdXN0IGJlIGEgbmFtZS92YWx1ZSB0dXBsZScpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gWy4uLnBhaXJdO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdGYWlsZWQgdG8gY29uc3RydWN0IFxcJ0hlYWRlcnNcXCc6IFRoZSBwcm92aWRlZCB2YWx1ZSBpcyBub3Qgb2YgdHlwZSBcXCcoc2VxdWVuY2U8c2VxdWVuY2U8Qnl0ZVN0cmluZz4+IG9yIHJlY29yZDxCeXRlU3RyaW5nLCBCeXRlU3RyaW5nPiknKTtcblx0XHR9XG5cblx0XHQvLyBWYWxpZGF0ZSBhbmQgbG93ZXJjYXNlXG5cdFx0cmVzdWx0ID1cblx0XHRcdHJlc3VsdC5sZW5ndGggPiAwID9cblx0XHRcdFx0cmVzdWx0Lm1hcCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuXHRcdFx0XHRcdHZhbGlkYXRlSGVhZGVyTmFtZShuYW1lKTtcblx0XHRcdFx0XHR2YWxpZGF0ZUhlYWRlclZhbHVlKG5hbWUsIFN0cmluZyh2YWx1ZSkpO1xuXHRcdFx0XHRcdHJldHVybiBbU3RyaW5nKG5hbWUpLnRvTG93ZXJDYXNlKCksIFN0cmluZyh2YWx1ZSldO1xuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdHVuZGVmaW5lZDtcblxuXHRcdHN1cGVyKHJlc3VsdCk7XG5cblx0XHQvLyBSZXR1cm5pbmcgYSBQcm94eSB0aGF0IHdpbGwgbG93ZXJjYXNlIGtleSBuYW1lcywgdmFsaWRhdGUgcGFyYW1ldGVycyBhbmQgc29ydCBrZXlzXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuXHRcdHJldHVybiBuZXcgUHJveHkodGhpcywge1xuXHRcdFx0Z2V0KHRhcmdldCwgcCwgcmVjZWl2ZXIpIHtcblx0XHRcdFx0c3dpdGNoIChwKSB7XG5cdFx0XHRcdFx0Y2FzZSAnYXBwZW5kJzpcblx0XHRcdFx0XHRjYXNlICdzZXQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIChuYW1lLCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHR2YWxpZGF0ZUhlYWRlck5hbWUobmFtZSk7XG5cdFx0XHRcdFx0XHRcdHZhbGlkYXRlSGVhZGVyVmFsdWUobmFtZSwgU3RyaW5nKHZhbHVlKSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlW3BdLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0dGFyZ2V0LFxuXHRcdFx0XHRcdFx0XHRcdFN0cmluZyhuYW1lKS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0XHRcdFN0cmluZyh2YWx1ZSlcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRjYXNlICdkZWxldGUnOlxuXHRcdFx0XHRcdGNhc2UgJ2hhcyc6XG5cdFx0XHRcdFx0Y2FzZSAnZ2V0QWxsJzpcblx0XHRcdFx0XHRcdHJldHVybiBuYW1lID0+IHtcblx0XHRcdFx0XHRcdFx0dmFsaWRhdGVIZWFkZXJOYW1lKG5hbWUpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtwXS5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdHRhcmdldCxcblx0XHRcdFx0XHRcdFx0XHRTdHJpbmcobmFtZSkudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGNhc2UgJ2tleXMnOlxuXHRcdFx0XHRcdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdFx0XHRcdFx0dGFyZ2V0LnNvcnQoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG5ldyBTZXQoVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzLmNhbGwodGFyZ2V0KSkua2V5cygpO1xuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRyZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwLCByZWNlaXZlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHQvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXHR9XG5cblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuXHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpO1xuXHR9XG5cblx0Z2V0KG5hbWUpIHtcblx0XHRjb25zdCB2YWx1ZXMgPSB0aGlzLmdldEFsbChuYW1lKTtcblx0XHRpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0bGV0IHZhbHVlID0gdmFsdWVzLmpvaW4oJywgJyk7XG5cdFx0aWYgKC9eY29udGVudC1lbmNvZGluZyQvaS50ZXN0KG5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0Zm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZyA9IHVuZGVmaW5lZCkge1xuXHRcdGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmtleXMoKSkge1xuXHRcdFx0UmVmbGVjdC5hcHBseShjYWxsYmFjaywgdGhpc0FyZywgW3RoaXMuZ2V0KG5hbWUpLCBuYW1lLCB0aGlzXSk7XG5cdFx0fVxuXHR9XG5cblx0KiB2YWx1ZXMoKSB7XG5cdFx0Zm9yIChjb25zdCBuYW1lIG9mIHRoaXMua2V5cygpKSB7XG5cdFx0XHR5aWVsZCB0aGlzLmdldChuYW1lKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHR5cGUgeygpID0+IEl0ZXJhYmxlSXRlcmF0b3I8W3N0cmluZywgc3RyaW5nXT59XG5cdCAqL1xuXHQqIGVudHJpZXMoKSB7XG5cdFx0Zm9yIChjb25zdCBuYW1lIG9mIHRoaXMua2V5cygpKSB7XG5cdFx0XHR5aWVsZCBbbmFtZSwgdGhpcy5nZXQobmFtZSldO1xuXHRcdH1cblx0fVxuXG5cdFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuXHRcdHJldHVybiB0aGlzLmVudHJpZXMoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBOb2RlLWZldGNoIG5vbi1zcGVjIG1ldGhvZFxuXHQgKiByZXR1cm5pbmcgYWxsIGhlYWRlcnMgYW5kIHRoZWlyIHZhbHVlcyBhcyBhcnJheVxuXHQgKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgc3RyaW5nW10+fVxuXHQgKi9cblx0cmF3KCkge1xuXHRcdHJldHVybiBbLi4udGhpcy5rZXlzKCldLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcblx0XHRcdHJlc3VsdFtrZXldID0gdGhpcy5nZXRBbGwoa2V5KTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSwge30pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZvciBiZXR0ZXIgY29uc29sZS5sb2coaGVhZGVycykgYW5kIGFsc28gdG8gY29udmVydCBIZWFkZXJzIGludG8gTm9kZS5qcyBSZXF1ZXN0IGNvbXBhdGlibGUgZm9ybWF0XG5cdCAqL1xuXHRbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0oKSB7XG5cdFx0cmV0dXJuIFsuLi50aGlzLmtleXMoKV0ucmVkdWNlKChyZXN1bHQsIGtleSkgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWVzID0gdGhpcy5nZXRBbGwoa2V5KTtcblx0XHRcdC8vIEh0dHAucmVxdWVzdCgpIG9ubHkgc3VwcG9ydHMgc3RyaW5nIGFzIEhvc3QgaGVhZGVyLlxuXHRcdFx0Ly8gVGhpcyBoYWNrIG1ha2VzIHNwZWNpZnlpbmcgY3VzdG9tIEhvc3QgaGVhZGVyIHBvc3NpYmxlLlxuXHRcdFx0aWYgKGtleSA9PT0gJ2hvc3QnKSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWVzWzBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0W2tleV0gPSB2YWx1ZXMubGVuZ3RoID4gMSA/IHZhbHVlcyA6IHZhbHVlc1swXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9LCB7fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZS1zaGFwaW5nIG9iamVjdCBmb3IgV2ViIElETCB0ZXN0c1xuICogT25seSBuZWVkIHRvIGRvIGl0IGZvciBvdmVycmlkZGVuIG1ldGhvZHNcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG5cdEhlYWRlcnMucHJvdG90eXBlLFxuXHRbJ2dldCcsICdlbnRyaWVzJywgJ2ZvckVhY2gnLCAndmFsdWVzJ10ucmVkdWNlKChyZXN1bHQsIHByb3BlcnR5KSA9PiB7XG5cdFx0cmVzdWx0W3Byb3BlcnR5XSA9IHtlbnVtZXJhYmxlOiB0cnVlfTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LCB7fSlcbik7XG5cbi8qKlxuICogQ3JlYXRlIGEgSGVhZGVycyBvYmplY3QgZnJvbSBhbiBodHRwLkluY29taW5nTWVzc2FnZS5yYXdIZWFkZXJzLCBpZ25vcmluZyB0aG9zZSB0aGF0IGRvXG4gKiBub3QgY29uZm9ybSB0byBIVFRQIGdyYW1tYXIgcHJvZHVjdGlvbnMuXG4gKiBAcGFyYW0ge2ltcG9ydCgnaHR0cCcpLkluY29taW5nTWVzc2FnZVsncmF3SGVhZGVycyddfSBoZWFkZXJzXG4gKi9cbmZ1bmN0aW9uIGZyb21SYXdIZWFkZXJzKGhlYWRlcnMgPSBbXSkge1xuXHRyZXR1cm4gbmV3IEhlYWRlcnMoXG5cdFx0aGVhZGVyc1xuXHRcdFx0Ly8gU3BsaXQgaW50byBwYWlyc1xuXHRcdFx0LnJlZHVjZSgocmVzdWx0LCB2YWx1ZSwgaW5kZXgsIGFycmF5KSA9PiB7XG5cdFx0XHRcdGlmIChpbmRleCAlIDIgPT09IDApIHtcblx0XHRcdFx0XHRyZXN1bHQucHVzaChhcnJheS5zbGljZShpbmRleCwgaW5kZXggKyAyKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSwgW10pXG5cdFx0XHQuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dmFsaWRhdGVIZWFkZXJOYW1lKG5hbWUpO1xuXHRcdFx0XHRcdHZhbGlkYXRlSGVhZGVyVmFsdWUobmFtZSwgU3RyaW5nKHZhbHVlKSk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblxuXHQpO1xufVxuXG5jb25zdCByZWRpcmVjdFN0YXR1cyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5cbi8qKlxuICogUmVkaXJlY3QgY29kZSBtYXRjaGluZ1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlIC0gU3RhdHVzIGNvZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzUmVkaXJlY3QgPSBjb2RlID0+IHtcblx0cmV0dXJuIHJlZGlyZWN0U3RhdHVzLmhhcyhjb2RlKTtcbn07XG5cbi8qKlxuICogUmVzcG9uc2UuanNcbiAqXG4gKiBSZXNwb25zZSBjbGFzcyBwcm92aWRlcyBjb250ZW50IGRlY29kaW5nXG4gKi9cblxuY29uc3QgSU5URVJOQUxTJDEgPSBTeW1ib2woJ1Jlc3BvbnNlIGludGVybmFscycpO1xuXG4vKipcbiAqIFJlc3BvbnNlIGNsYXNzXG4gKlxuICogUmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jcmVzcG9uc2UtY2xhc3NcbiAqXG4gKiBAcGFyYW0gICBTdHJlYW0gIGJvZHkgIFJlYWRhYmxlIHN0cmVhbVxuICogQHBhcmFtICAgT2JqZWN0ICBvcHRzICBSZXNwb25zZSBvcHRpb25zXG4gKiBAcmV0dXJuICBWb2lkXG4gKi9cbmNsYXNzIFJlc3BvbnNlIGV4dGVuZHMgQm9keSB7XG5cdGNvbnN0cnVjdG9yKGJvZHkgPSBudWxsLCBvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihib2R5LCBvcHRpb25zKTtcblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLCBlcWVxZXEsIG5vLW5lZ2F0ZWQtY29uZGl0aW9uXG5cdFx0Y29uc3Qgc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgIT0gbnVsbCA/IG9wdGlvbnMuc3RhdHVzIDogMjAwO1xuXG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG5cblx0XHRpZiAoYm9keSAhPT0gbnVsbCAmJiAhaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpKSB7XG5cdFx0XHRjb25zdCBjb250ZW50VHlwZSA9IGV4dHJhY3RDb250ZW50VHlwZShib2R5LCB0aGlzKTtcblx0XHRcdGlmIChjb250ZW50VHlwZSkge1xuXHRcdFx0XHRoZWFkZXJzLmFwcGVuZCgnQ29udGVudC1UeXBlJywgY29udGVudFR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXNbSU5URVJOQUxTJDFdID0ge1xuXHRcdFx0dHlwZTogJ2RlZmF1bHQnLFxuXHRcdFx0dXJsOiBvcHRpb25zLnVybCxcblx0XHRcdHN0YXR1cyxcblx0XHRcdHN0YXR1c1RleHQ6IG9wdGlvbnMuc3RhdHVzVGV4dCB8fCAnJyxcblx0XHRcdGhlYWRlcnMsXG5cdFx0XHRjb3VudGVyOiBvcHRpb25zLmNvdW50ZXIsXG5cdFx0XHRoaWdoV2F0ZXJNYXJrOiBvcHRpb25zLmhpZ2hXYXRlck1hcmtcblx0XHR9O1xuXHR9XG5cblx0Z2V0IHR5cGUoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLnR5cGU7XG5cdH1cblxuXHRnZXQgdXJsKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS51cmwgfHwgJyc7XG5cdH1cblxuXHRnZXQgc3RhdHVzKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXM7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVuaWVuY2UgcHJvcGVydHkgcmVwcmVzZW50aW5nIGlmIHRoZSByZXF1ZXN0IGVuZGVkIG5vcm1hbGx5XG5cdCAqL1xuXHRnZXQgb2soKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLnN0YXR1cyA+PSAyMDAgJiYgdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzIDwgMzAwO1xuXHR9XG5cblx0Z2V0IHJlZGlyZWN0ZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLmNvdW50ZXIgPiAwO1xuXHR9XG5cblx0Z2V0IHN0YXR1c1RleHQoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLnN0YXR1c1RleHQ7XG5cdH1cblxuXHRnZXQgaGVhZGVycygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uaGVhZGVycztcblx0fVxuXG5cdGdldCBoaWdoV2F0ZXJNYXJrKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5oaWdoV2F0ZXJNYXJrO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsb25lIHRoaXMgcmVzcG9uc2Vcblx0ICpcblx0ICogQHJldHVybiAgUmVzcG9uc2Vcblx0ICovXG5cdGNsb25lKCkge1xuXHRcdHJldHVybiBuZXcgUmVzcG9uc2UoY2xvbmUodGhpcywgdGhpcy5oaWdoV2F0ZXJNYXJrKSwge1xuXHRcdFx0dHlwZTogdGhpcy50eXBlLFxuXHRcdFx0dXJsOiB0aGlzLnVybCxcblx0XHRcdHN0YXR1czogdGhpcy5zdGF0dXMsXG5cdFx0XHRzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG5cdFx0XHRoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG5cdFx0XHRvazogdGhpcy5vayxcblx0XHRcdHJlZGlyZWN0ZWQ6IHRoaXMucmVkaXJlY3RlZCxcblx0XHRcdHNpemU6IHRoaXMuc2l6ZSxcblx0XHRcdGhpZ2hXYXRlck1hcms6IHRoaXMuaGlnaFdhdGVyTWFya1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgICAgVGhlIFVSTCB0aGF0IHRoZSBuZXcgcmVzcG9uc2UgaXMgdG8gb3JpZ2luYXRlIGZyb20uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgQW4gb3B0aW9uYWwgc3RhdHVzIGNvZGUgZm9yIHRoZSByZXNwb25zZSAoZS5nLiwgMzAyLilcblx0ICogQHJldHVybnMge1Jlc3BvbnNlfSAgICBBIFJlc3BvbnNlIG9iamVjdC5cblx0ICovXG5cdHN0YXRpYyByZWRpcmVjdCh1cmwsIHN0YXR1cyA9IDMwMikge1xuXHRcdGlmICghaXNSZWRpcmVjdChzdGF0dXMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgXCJyZWRpcmVjdFwiIG9uIFwicmVzcG9uc2VcIjogSW52YWxpZCBzdGF0dXMgY29kZScpO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRsb2NhdGlvbjogbmV3IFVSTCh1cmwpLnRvU3RyaW5nKClcblx0XHRcdH0sXG5cdFx0XHRzdGF0dXNcblx0XHR9KTtcblx0fVxuXG5cdHN0YXRpYyBlcnJvcigpIHtcblx0XHRjb25zdCByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pO1xuXHRcdHJlc3BvbnNlW0lOVEVSTkFMUyQxXS50eXBlID0gJ2Vycm9yJztcblx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdH1cblxuXHRzdGF0aWMganNvbihkYXRhID0gdW5kZWZpbmVkLCBpbml0ID0ge30pIHtcblx0XHRjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG5cblx0XHRpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIGlzIG5vdCBKU09OIHNlcmlhbGl6YWJsZScpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0ICYmIGluaXQuaGVhZGVycyk7XG5cblx0XHRpZiAoIWhlYWRlcnMuaGFzKCdjb250ZW50LXR5cGUnKSkge1xuXHRcdFx0aGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShib2R5LCB7XG5cdFx0XHQuLi5pbml0LFxuXHRcdFx0aGVhZGVyc1xuXHRcdH0pO1xuXHR9XG5cblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuXHRcdHJldHVybiAnUmVzcG9uc2UnO1xuXHR9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlc3BvbnNlLnByb3RvdHlwZSwge1xuXHR0eXBlOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHVybDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRzdGF0dXM6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0b2s6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0cmVkaXJlY3RlZDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRzdGF0dXNUZXh0OiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdGhlYWRlcnM6IHtlbnVtZXJhYmxlOiB0cnVlfSxcblx0Y2xvbmU6IHtlbnVtZXJhYmxlOiB0cnVlfVxufSk7XG5cbmNvbnN0IGdldFNlYXJjaCA9IHBhcnNlZFVSTCA9PiB7XG5cdGlmIChwYXJzZWRVUkwuc2VhcmNoKSB7XG5cdFx0cmV0dXJuIHBhcnNlZFVSTC5zZWFyY2g7XG5cdH1cblxuXHRjb25zdCBsYXN0T2Zmc2V0ID0gcGFyc2VkVVJMLmhyZWYubGVuZ3RoIC0gMTtcblx0Y29uc3QgaGFzaCA9IHBhcnNlZFVSTC5oYXNoIHx8IChwYXJzZWRVUkwuaHJlZltsYXN0T2Zmc2V0XSA9PT0gJyMnID8gJyMnIDogJycpO1xuXHRyZXR1cm4gcGFyc2VkVVJMLmhyZWZbbGFzdE9mZnNldCAtIGhhc2gubGVuZ3RoXSA9PT0gJz8nID8gJz8nIDogJyc7XG59O1xuXG4vKipcbiAqIEBleHRlcm5hbCBVUkxcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkx8VVJMfVxuICovXG5cbi8qKlxuICogQG1vZHVsZSB1dGlscy9yZWZlcnJlclxuICogQHByaXZhdGVcbiAqL1xuXG4vKipcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtcmVmZXJyZXItcG9saWN5LyNzdHJpcC11cmx8UmVmZXJyZXIgUG9saWN5IMKnOC40LiBTdHJpcCB1cmwgZm9yIHVzZSBhcyBhIHJlZmVycmVyfVxuICogQHBhcmFtIHtzdHJpbmd9IFVSTFxuICogQHBhcmFtIHtib29sZWFufSBbb3JpZ2luT25seT1mYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3RyaXBVUkxGb3JVc2VBc0FSZWZlcnJlcih1cmwsIG9yaWdpbk9ubHkgPSBmYWxzZSkge1xuXHQvLyAxLiBJZiB1cmwgaXMgbnVsbCwgcmV0dXJuIG5vIHJlZmVycmVyLlxuXHRpZiAodXJsID09IG51bGwpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lcS1udWxsLCBlcWVxZXFcblx0XHRyZXR1cm4gJ25vLXJlZmVycmVyJztcblx0fVxuXG5cdHVybCA9IG5ldyBVUkwodXJsKTtcblxuXHQvLyAyLiBJZiB1cmwncyBzY2hlbWUgaXMgYSBsb2NhbCBzY2hlbWUsIHRoZW4gcmV0dXJuIG5vIHJlZmVycmVyLlxuXHRpZiAoL14oYWJvdXR8YmxvYnxkYXRhKTokLy50ZXN0KHVybC5wcm90b2NvbCkpIHtcblx0XHRyZXR1cm4gJ25vLXJlZmVycmVyJztcblx0fVxuXG5cdC8vIDMuIFNldCB1cmwncyB1c2VybmFtZSB0byB0aGUgZW1wdHkgc3RyaW5nLlxuXHR1cmwudXNlcm5hbWUgPSAnJztcblxuXHQvLyA0LiBTZXQgdXJsJ3MgcGFzc3dvcmQgdG8gbnVsbC5cblx0Ly8gTm90ZTogYG51bGxgIGFwcGVhcnMgdG8gYmUgYSBtaXN0YWtlIGFzIHRoaXMgYWN0dWFsbHkgcmVzdWx0cyBpbiB0aGUgcGFzc3dvcmQgYmVpbmcgYFwibnVsbFwiYC5cblx0dXJsLnBhc3N3b3JkID0gJyc7XG5cblx0Ly8gNS4gU2V0IHVybCdzIGZyYWdtZW50IHRvIG51bGwuXG5cdC8vIE5vdGU6IGBudWxsYCBhcHBlYXJzIHRvIGJlIGEgbWlzdGFrZSBhcyB0aGlzIGFjdHVhbGx5IHJlc3VsdHMgaW4gdGhlIGZyYWdtZW50IGJlaW5nIGBcIiNudWxsXCJgLlxuXHR1cmwuaGFzaCA9ICcnO1xuXG5cdC8vIDYuIElmIHRoZSBvcmlnaW4tb25seSBmbGFnIGlzIHRydWUsIHRoZW46XG5cdGlmIChvcmlnaW5Pbmx5KSB7XG5cdFx0Ly8gNi4xLiBTZXQgdXJsJ3MgcGF0aCB0byBudWxsLlxuXHRcdC8vIE5vdGU6IGBudWxsYCBhcHBlYXJzIHRvIGJlIGEgbWlzdGFrZSBhcyB0aGlzIGFjdHVhbGx5IHJlc3VsdHMgaW4gdGhlIHBhdGggYmVpbmcgYFwiL251bGxcImAuXG5cdFx0dXJsLnBhdGhuYW1lID0gJyc7XG5cblx0XHQvLyA2LjIuIFNldCB1cmwncyBxdWVyeSB0byBudWxsLlxuXHRcdC8vIE5vdGU6IGBudWxsYCBhcHBlYXJzIHRvIGJlIGEgbWlzdGFrZSBhcyB0aGlzIGFjdHVhbGx5IHJlc3VsdHMgaW4gdGhlIHF1ZXJ5IGJlaW5nIGBcIj9udWxsXCJgLlxuXHRcdHVybC5zZWFyY2ggPSAnJztcblx0fVxuXG5cdC8vIDcuIFJldHVybiB1cmwuXG5cdHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1yZWZlcnJlci1wb2xpY3kvI2VudW1kZWYtcmVmZXJyZXJwb2xpY3l8ZW51bSBSZWZlcnJlclBvbGljeX1cbiAqL1xuY29uc3QgUmVmZXJyZXJQb2xpY3kgPSBuZXcgU2V0KFtcblx0JycsXG5cdCduby1yZWZlcnJlcicsXG5cdCduby1yZWZlcnJlci13aGVuLWRvd25ncmFkZScsXG5cdCdzYW1lLW9yaWdpbicsXG5cdCdvcmlnaW4nLFxuXHQnc3RyaWN0LW9yaWdpbicsXG5cdCdvcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLFxuXHQnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsXG5cdCd1bnNhZmUtdXJsJ1xuXSk7XG5cbi8qKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1yZWZlcnJlci1wb2xpY3kvI2RlZmF1bHQtcmVmZXJyZXItcG9saWN5fGRlZmF1bHQgcmVmZXJyZXIgcG9saWN5fVxuICovXG5jb25zdCBERUZBVUxUX1JFRkVSUkVSX1BPTElDWSA9ICdzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJztcblxuLyoqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLXJlZmVycmVyLXBvbGljeS8jcmVmZXJyZXItcG9saWNpZXN8UmVmZXJyZXIgUG9saWN5IMKnMy4gUmVmZXJyZXIgUG9saWNpZXN9XG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmZXJyZXJQb2xpY3lcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJlZmVycmVyUG9saWN5XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUmVmZXJyZXJQb2xpY3kocmVmZXJyZXJQb2xpY3kpIHtcblx0aWYgKCFSZWZlcnJlclBvbGljeS5oYXMocmVmZXJyZXJQb2xpY3kpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCByZWZlcnJlclBvbGljeTogJHtyZWZlcnJlclBvbGljeX1gKTtcblx0fVxuXG5cdHJldHVybiByZWZlcnJlclBvbGljeTtcbn1cblxuLyoqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLXNlY3VyZS1jb250ZXh0cy8jaXMtb3JpZ2luLXRydXN0d29ydGh5fFJlZmVycmVyIFBvbGljeSDCpzMuMi4gSXMgb3JpZ2luIHBvdGVudGlhbGx5IHRydXN0d29ydGh5P31cbiAqIEBwYXJhbSB7ZXh0ZXJuYWw6VVJMfSB1cmxcbiAqIEByZXR1cm5zIGB0cnVlYDogXCJQb3RlbnRpYWxseSBUcnVzdHdvcnRoeVwiLCBgZmFsc2VgOiBcIk5vdCBUcnVzdHdvcnRoeVwiXG4gKi9cbmZ1bmN0aW9uIGlzT3JpZ2luUG90ZW50aWFsbHlUcnVzdHdvcnRoeSh1cmwpIHtcblx0Ly8gMS4gSWYgb3JpZ2luIGlzIGFuIG9wYXF1ZSBvcmlnaW4sIHJldHVybiBcIk5vdCBUcnVzdHdvcnRoeVwiLlxuXHQvLyBOb3QgYXBwbGljYWJsZVxuXG5cdC8vIDIuIEFzc2VydDogb3JpZ2luIGlzIGEgdHVwbGUgb3JpZ2luLlxuXHQvLyBOb3QgZm9yIGltcGxlbWVudGF0aW9uc1xuXG5cdC8vIDMuIElmIG9yaWdpbidzIHNjaGVtZSBpcyBlaXRoZXIgXCJodHRwc1wiIG9yIFwid3NzXCIsIHJldHVybiBcIlBvdGVudGlhbGx5IFRydXN0d29ydGh5XCIuXG5cdGlmICgvXihodHRwfHdzKXM6JC8udGVzdCh1cmwucHJvdG9jb2wpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyA0LiBJZiBvcmlnaW4ncyBob3N0IGNvbXBvbmVudCBtYXRjaGVzIG9uZSBvZiB0aGUgQ0lEUiBub3RhdGlvbnMgMTI3LjAuMC4wLzggb3IgOjoxLzEyOCBbUkZDNDYzMl0sIHJldHVybiBcIlBvdGVudGlhbGx5IFRydXN0d29ydGh5XCIuXG5cdGNvbnN0IGhvc3RJcCA9IHVybC5ob3N0LnJlcGxhY2UoLyheXFxbKXwoXSQpL2csICcnKTtcblx0Y29uc3QgaG9zdElQVmVyc2lvbiA9IG5vZGVfbmV0LmlzSVAoaG9zdElwKTtcblxuXHRpZiAoaG9zdElQVmVyc2lvbiA9PT0gNCAmJiAvXjEyN1xcLi8udGVzdChob3N0SXApKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoaG9zdElQVmVyc2lvbiA9PT0gNiAmJiAvXigoKDArOil7N30pfCg6OigwKzopezAsNn0pKTAqMSQvLnRlc3QoaG9zdElwKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gNS4gSWYgb3JpZ2luJ3MgaG9zdCBjb21wb25lbnQgaXMgXCJsb2NhbGhvc3RcIiBvciBmYWxscyB3aXRoaW4gXCIubG9jYWxob3N0XCIsIGFuZCB0aGUgdXNlciBhZ2VudCBjb25mb3JtcyB0byB0aGUgbmFtZSByZXNvbHV0aW9uIHJ1bGVzIGluIFtsZXQtbG9jYWxob3N0LWJlLWxvY2FsaG9zdF0sIHJldHVybiBcIlBvdGVudGlhbGx5IFRydXN0d29ydGh5XCIuXG5cdC8vIFdlIGFyZSByZXR1cm5pbmcgRkFMU0UgaGVyZSBiZWNhdXNlIHdlIGNhbm5vdCBlbnN1cmUgY29uZm9ybWFuY2UgdG9cblx0Ly8gbGV0LWxvY2FsaG9zdC1iZS1sb2FsaG9zdCAoaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXdlc3QtbGV0LWxvY2FsaG9zdC1iZS1sb2NhbGhvc3QpXG5cdGlmICh1cmwuaG9zdCA9PT0gJ2xvY2FsaG9zdCcgfHwgdXJsLmhvc3QuZW5kc1dpdGgoJy5sb2NhbGhvc3QnKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIDYuIElmIG9yaWdpbidzIHNjaGVtZSBjb21wb25lbnQgaXMgZmlsZSwgcmV0dXJuIFwiUG90ZW50aWFsbHkgVHJ1c3R3b3J0aHlcIi5cblx0aWYgKHVybC5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gNy4gSWYgb3JpZ2luJ3Mgc2NoZW1lIGNvbXBvbmVudCBpcyBvbmUgd2hpY2ggdGhlIHVzZXIgYWdlbnQgY29uc2lkZXJzIHRvIGJlIGF1dGhlbnRpY2F0ZWQsIHJldHVybiBcIlBvdGVudGlhbGx5IFRydXN0d29ydGh5XCIuXG5cdC8vIE5vdCBzdXBwb3J0ZWRcblxuXHQvLyA4LiBJZiBvcmlnaW4gaGFzIGJlZW4gY29uZmlndXJlZCBhcyBhIHRydXN0d29ydGh5IG9yaWdpbiwgcmV0dXJuIFwiUG90ZW50aWFsbHkgVHJ1c3R3b3J0aHlcIi5cblx0Ly8gTm90IHN1cHBvcnRlZFxuXG5cdC8vIDkuIFJldHVybiBcIk5vdCBUcnVzdHdvcnRoeVwiLlxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1zZWN1cmUtY29udGV4dHMvI2lzLXVybC10cnVzdHdvcnRoeXxSZWZlcnJlciBQb2xpY3kgwqczLjMuIElzIHVybCBwb3RlbnRpYWxseSB0cnVzdHdvcnRoeT99XG4gKiBAcGFyYW0ge2V4dGVybmFsOlVSTH0gdXJsXG4gKiBAcmV0dXJucyBgdHJ1ZWA6IFwiUG90ZW50aWFsbHkgVHJ1c3R3b3J0aHlcIiwgYGZhbHNlYDogXCJOb3QgVHJ1c3R3b3J0aHlcIlxuICovXG5mdW5jdGlvbiBpc1VybFBvdGVudGlhbGx5VHJ1c3R3b3J0aHkodXJsKSB7XG5cdC8vIDEuIElmIHVybCBpcyBcImFib3V0OmJsYW5rXCIgb3IgXCJhYm91dDpzcmNkb2NcIiwgcmV0dXJuIFwiUG90ZW50aWFsbHkgVHJ1c3R3b3J0aHlcIi5cblx0aWYgKC9eYWJvdXQ6KGJsYW5rfHNyY2RvYykkLy50ZXN0KHVybCkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIDIuIElmIHVybCdzIHNjaGVtZSBpcyBcImRhdGFcIiwgcmV0dXJuIFwiUG90ZW50aWFsbHkgVHJ1c3R3b3J0aHlcIi5cblx0aWYgKHVybC5wcm90b2NvbCA9PT0gJ2RhdGE6Jykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gTm90ZTogVGhlIG9yaWdpbiBvZiBibG9iOiBhbmQgZmlsZXN5c3RlbTogVVJMcyBpcyB0aGUgb3JpZ2luIG9mIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZXkgd2VyZVxuXHQvLyBjcmVhdGVkLiBUaGVyZWZvcmUsIGJsb2JzIGNyZWF0ZWQgaW4gYSB0cnVzdHdvcnRoeSBvcmlnaW4gd2lsbCB0aGVtc2VsdmVzIGJlIHBvdGVudGlhbGx5XG5cdC8vIHRydXN0d29ydGh5LlxuXHRpZiAoL14oYmxvYnxmaWxlc3lzdGVtKTokLy50ZXN0KHVybC5wcm90b2NvbCkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIDMuIFJldHVybiB0aGUgcmVzdWx0IG9mIGV4ZWN1dGluZyDCpzMuMiBJcyBvcmlnaW4gcG90ZW50aWFsbHkgdHJ1c3R3b3J0aHk/IG9uIHVybCdzIG9yaWdpbi5cblx0cmV0dXJuIGlzT3JpZ2luUG90ZW50aWFsbHlUcnVzdHdvcnRoeSh1cmwpO1xufVxuXG4vKipcbiAqIE1vZGlmaWVzIHRoZSByZWZlcnJlclVSTCB0byBlbmZvcmNlIGFueSBleHRyYSBzZWN1cml0eSBwb2xpY3kgY29uc2lkZXJhdGlvbnMuXG4gKiBAc2VlIHtAbGluayBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLXJlZmVycmVyLXBvbGljeS8jZGV0ZXJtaW5lLXJlcXVlc3RzLXJlZmVycmVyfFJlZmVycmVyIFBvbGljeSDCpzguMy4gRGV0ZXJtaW5lIHJlcXVlc3QncyBSZWZlcnJlcn0sIHN0ZXAgN1xuICogQGNhbGxiYWNrIG1vZHVsZTp1dGlscy9yZWZlcnJlcn5yZWZlcnJlclVSTENhbGxiYWNrXG4gKiBAcGFyYW0ge2V4dGVybmFsOlVSTH0gcmVmZXJyZXJVUkxcbiAqIEByZXR1cm5zIHtleHRlcm5hbDpVUkx9IG1vZGlmaWVkIHJlZmVycmVyVVJMXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcyB0aGUgcmVmZXJyZXJPcmlnaW4gdG8gZW5mb3JjZSBhbnkgZXh0cmEgc2VjdXJpdHkgcG9saWN5IGNvbnNpZGVyYXRpb25zLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1yZWZlcnJlci1wb2xpY3kvI2RldGVybWluZS1yZXF1ZXN0cy1yZWZlcnJlcnxSZWZlcnJlciBQb2xpY3kgwqc4LjMuIERldGVybWluZSByZXF1ZXN0J3MgUmVmZXJyZXJ9LCBzdGVwIDdcbiAqIEBjYWxsYmFjayBtb2R1bGU6dXRpbHMvcmVmZXJyZXJ+cmVmZXJyZXJPcmlnaW5DYWxsYmFja1xuICogQHBhcmFtIHtleHRlcm5hbDpVUkx9IHJlZmVycmVyT3JpZ2luXG4gKiBAcmV0dXJucyB7ZXh0ZXJuYWw6VVJMfSBtb2RpZmllZCByZWZlcnJlck9yaWdpblxuICovXG5cbi8qKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1yZWZlcnJlci1wb2xpY3kvI2RldGVybWluZS1yZXF1ZXN0cy1yZWZlcnJlcnxSZWZlcnJlciBQb2xpY3kgwqc4LjMuIERldGVybWluZSByZXF1ZXN0J3MgUmVmZXJyZXJ9XG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcXVlc3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBvXG4gKiBAcGFyYW0ge21vZHVsZTp1dGlscy9yZWZlcnJlcn5yZWZlcnJlclVSTENhbGxiYWNrfSBvLnJlZmVycmVyVVJMQ2FsbGJhY2tcbiAqIEBwYXJhbSB7bW9kdWxlOnV0aWxzL3JlZmVycmVyfnJlZmVycmVyT3JpZ2luQ2FsbGJhY2t9IG8ucmVmZXJyZXJPcmlnaW5DYWxsYmFja1xuICogQHJldHVybnMge2V4dGVybmFsOlVSTH0gUmVxdWVzdCdzIHJlZmVycmVyXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVJlcXVlc3RzUmVmZXJyZXIocmVxdWVzdCwge3JlZmVycmVyVVJMQ2FsbGJhY2ssIHJlZmVycmVyT3JpZ2luQ2FsbGJhY2t9ID0ge30pIHtcblx0Ly8gVGhlcmUgYXJlIDIgbm90ZXMgaW4gdGhlIHNwZWNpZmljYXRpb24gYWJvdXQgaW52YWxpZCBwcmUtY29uZGl0aW9ucy4gIFdlIHJldHVybiBudWxsLCBoZXJlLCBmb3Jcblx0Ly8gdGhlc2UgY2FzZXM6XG5cdC8vID4gTm90ZTogSWYgcmVxdWVzdCdzIHJlZmVycmVyIGlzIFwibm8tcmVmZXJyZXJcIiwgRmV0Y2ggd2lsbCBub3QgY2FsbCBpbnRvIHRoaXMgYWxnb3JpdGhtLlxuXHQvLyA+IE5vdGU6IElmIHJlcXVlc3QncyByZWZlcnJlciBwb2xpY3kgaXMgdGhlIGVtcHR5IHN0cmluZywgRmV0Y2ggd2lsbCBub3QgY2FsbCBpbnRvIHRoaXNcblx0Ly8gPiBhbGdvcml0aG0uXG5cdGlmIChyZXF1ZXN0LnJlZmVycmVyID09PSAnbm8tcmVmZXJyZXInIHx8IHJlcXVlc3QucmVmZXJyZXJQb2xpY3kgPT09ICcnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyAxLiBMZXQgcG9saWN5IGJlIHJlcXVlc3QncyBhc3NvY2lhdGVkIHJlZmVycmVyIHBvbGljeS5cblx0Y29uc3QgcG9saWN5ID0gcmVxdWVzdC5yZWZlcnJlclBvbGljeTtcblxuXHQvLyAyLiBMZXQgZW52aXJvbm1lbnQgYmUgcmVxdWVzdCdzIGNsaWVudC5cblx0Ly8gbm90IGFwcGxpY2FibGUgdG8gbm9kZS5qc1xuXG5cdC8vIDMuIFN3aXRjaCBvbiByZXF1ZXN0J3MgcmVmZXJyZXI6XG5cdGlmIChyZXF1ZXN0LnJlZmVycmVyID09PSAnYWJvdXQ6Y2xpZW50Jykge1xuXHRcdHJldHVybiAnbm8tcmVmZXJyZXInO1xuXHR9XG5cblx0Ly8gXCJhIFVSTFwiOiBMZXQgcmVmZXJyZXJTb3VyY2UgYmUgcmVxdWVzdCdzIHJlZmVycmVyLlxuXHRjb25zdCByZWZlcnJlclNvdXJjZSA9IHJlcXVlc3QucmVmZXJyZXI7XG5cblx0Ly8gNC4gTGV0IHJlcXVlc3QncyByZWZlcnJlclVSTCBiZSB0aGUgcmVzdWx0IG9mIHN0cmlwcGluZyByZWZlcnJlclNvdXJjZSBmb3IgdXNlIGFzIGEgcmVmZXJyZXIuXG5cdGxldCByZWZlcnJlclVSTCA9IHN0cmlwVVJMRm9yVXNlQXNBUmVmZXJyZXIocmVmZXJyZXJTb3VyY2UpO1xuXG5cdC8vIDUuIExldCByZWZlcnJlck9yaWdpbiBiZSB0aGUgcmVzdWx0IG9mIHN0cmlwcGluZyByZWZlcnJlclNvdXJjZSBmb3IgdXNlIGFzIGEgcmVmZXJyZXIsIHdpdGggdGhlXG5cdC8vICAgIG9yaWdpbi1vbmx5IGZsYWcgc2V0IHRvIHRydWUuXG5cdGxldCByZWZlcnJlck9yaWdpbiA9IHN0cmlwVVJMRm9yVXNlQXNBUmVmZXJyZXIocmVmZXJyZXJTb3VyY2UsIHRydWUpO1xuXG5cdC8vIDYuIElmIHRoZSByZXN1bHQgb2Ygc2VyaWFsaXppbmcgcmVmZXJyZXJVUkwgaXMgYSBzdHJpbmcgd2hvc2UgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiA0MDk2LCBzZXRcblx0Ly8gICAgcmVmZXJyZXJVUkwgdG8gcmVmZXJyZXJPcmlnaW4uXG5cdGlmIChyZWZlcnJlclVSTC50b1N0cmluZygpLmxlbmd0aCA+IDQwOTYpIHtcblx0XHRyZWZlcnJlclVSTCA9IHJlZmVycmVyT3JpZ2luO1xuXHR9XG5cblx0Ly8gNy4gVGhlIHVzZXIgYWdlbnQgTUFZIGFsdGVyIHJlZmVycmVyVVJMIG9yIHJlZmVycmVyT3JpZ2luIGF0IHRoaXMgcG9pbnQgdG8gZW5mb3JjZSBhcmJpdHJhcnlcblx0Ly8gICAgcG9saWN5IGNvbnNpZGVyYXRpb25zIGluIHRoZSBpbnRlcmVzdHMgb2YgbWluaW1pemluZyBkYXRhIGxlYWthZ2UuIEZvciBleGFtcGxlLCB0aGUgdXNlclxuXHQvLyAgICBhZ2VudCBjb3VsZCBzdHJpcCB0aGUgVVJMIGRvd24gdG8gYW4gb3JpZ2luLCBtb2RpZnkgaXRzIGhvc3QsIHJlcGxhY2UgaXQgd2l0aCBhbiBlbXB0eVxuXHQvLyAgICBzdHJpbmcsIGV0Yy5cblx0aWYgKHJlZmVycmVyVVJMQ2FsbGJhY2spIHtcblx0XHRyZWZlcnJlclVSTCA9IHJlZmVycmVyVVJMQ2FsbGJhY2socmVmZXJyZXJVUkwpO1xuXHR9XG5cblx0aWYgKHJlZmVycmVyT3JpZ2luQ2FsbGJhY2spIHtcblx0XHRyZWZlcnJlck9yaWdpbiA9IHJlZmVycmVyT3JpZ2luQ2FsbGJhY2socmVmZXJyZXJPcmlnaW4pO1xuXHR9XG5cblx0Ly8gOC5FeGVjdXRlIHRoZSBzdGF0ZW1lbnRzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZhbHVlIG9mIHBvbGljeTpcblx0Y29uc3QgY3VycmVudFVSTCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuXG5cdHN3aXRjaCAocG9saWN5KSB7XG5cdFx0Y2FzZSAnbm8tcmVmZXJyZXInOlxuXHRcdFx0cmV0dXJuICduby1yZWZlcnJlcic7XG5cblx0XHRjYXNlICdvcmlnaW4nOlxuXHRcdFx0cmV0dXJuIHJlZmVycmVyT3JpZ2luO1xuXG5cdFx0Y2FzZSAndW5zYWZlLXVybCc6XG5cdFx0XHRyZXR1cm4gcmVmZXJyZXJVUkw7XG5cblx0XHRjYXNlICdzdHJpY3Qtb3JpZ2luJzpcblx0XHRcdC8vIDEuIElmIHJlZmVycmVyVVJMIGlzIGEgcG90ZW50aWFsbHkgdHJ1c3R3b3J0aHkgVVJMIGFuZCByZXF1ZXN0J3MgY3VycmVudCBVUkwgaXMgbm90IGFcblx0XHRcdC8vICAgIHBvdGVudGlhbGx5IHRydXN0d29ydGh5IFVSTCwgdGhlbiByZXR1cm4gbm8gcmVmZXJyZXIuXG5cdFx0XHRpZiAoaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5KHJlZmVycmVyVVJMKSAmJiAhaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5KGN1cnJlbnRVUkwpKSB7XG5cdFx0XHRcdHJldHVybiAnbm8tcmVmZXJyZXInO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyAyLiBSZXR1cm4gcmVmZXJyZXJPcmlnaW4uXG5cdFx0XHRyZXR1cm4gcmVmZXJyZXJPcmlnaW4udG9TdHJpbmcoKTtcblxuXHRcdGNhc2UgJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nOlxuXHRcdFx0Ly8gMS4gSWYgdGhlIG9yaWdpbiBvZiByZWZlcnJlclVSTCBhbmQgdGhlIG9yaWdpbiBvZiByZXF1ZXN0J3MgY3VycmVudCBVUkwgYXJlIHRoZSBzYW1lLCB0aGVuXG5cdFx0XHQvLyAgICByZXR1cm4gcmVmZXJyZXJVUkwuXG5cdFx0XHRpZiAocmVmZXJyZXJVUkwub3JpZ2luID09PSBjdXJyZW50VVJMLm9yaWdpbikge1xuXHRcdFx0XHRyZXR1cm4gcmVmZXJyZXJVUkw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIDIuIElmIHJlZmVycmVyVVJMIGlzIGEgcG90ZW50aWFsbHkgdHJ1c3R3b3J0aHkgVVJMIGFuZCByZXF1ZXN0J3MgY3VycmVudCBVUkwgaXMgbm90IGFcblx0XHRcdC8vICAgIHBvdGVudGlhbGx5IHRydXN0d29ydGh5IFVSTCwgdGhlbiByZXR1cm4gbm8gcmVmZXJyZXIuXG5cdFx0XHRpZiAoaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5KHJlZmVycmVyVVJMKSAmJiAhaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5KGN1cnJlbnRVUkwpKSB7XG5cdFx0XHRcdHJldHVybiAnbm8tcmVmZXJyZXInO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyAzLiBSZXR1cm4gcmVmZXJyZXJPcmlnaW4uXG5cdFx0XHRyZXR1cm4gcmVmZXJyZXJPcmlnaW47XG5cblx0XHRjYXNlICdzYW1lLW9yaWdpbic6XG5cdFx0XHQvLyAxLiBJZiB0aGUgb3JpZ2luIG9mIHJlZmVycmVyVVJMIGFuZCB0aGUgb3JpZ2luIG9mIHJlcXVlc3QncyBjdXJyZW50IFVSTCBhcmUgdGhlIHNhbWUsIHRoZW5cblx0XHRcdC8vICAgIHJldHVybiByZWZlcnJlclVSTC5cblx0XHRcdGlmIChyZWZlcnJlclVSTC5vcmlnaW4gPT09IGN1cnJlbnRVUkwub3JpZ2luKSB7XG5cdFx0XHRcdHJldHVybiByZWZlcnJlclVSTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gMi4gUmV0dXJuIG5vIHJlZmVycmVyLlxuXHRcdFx0cmV0dXJuICduby1yZWZlcnJlcic7XG5cblx0XHRjYXNlICdvcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nOlxuXHRcdFx0Ly8gMS4gSWYgdGhlIG9yaWdpbiBvZiByZWZlcnJlclVSTCBhbmQgdGhlIG9yaWdpbiBvZiByZXF1ZXN0J3MgY3VycmVudCBVUkwgYXJlIHRoZSBzYW1lLCB0aGVuXG5cdFx0XHQvLyAgICByZXR1cm4gcmVmZXJyZXJVUkwuXG5cdFx0XHRpZiAocmVmZXJyZXJVUkwub3JpZ2luID09PSBjdXJyZW50VVJMLm9yaWdpbikge1xuXHRcdFx0XHRyZXR1cm4gcmVmZXJyZXJVUkw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiByZWZlcnJlck9yaWdpbi5cblx0XHRcdHJldHVybiByZWZlcnJlck9yaWdpbjtcblxuXHRcdGNhc2UgJ25vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlJzpcblx0XHRcdC8vIDEuIElmIHJlZmVycmVyVVJMIGlzIGEgcG90ZW50aWFsbHkgdHJ1c3R3b3J0aHkgVVJMIGFuZCByZXF1ZXN0J3MgY3VycmVudCBVUkwgaXMgbm90IGFcblx0XHRcdC8vICAgIHBvdGVudGlhbGx5IHRydXN0d29ydGh5IFVSTCwgdGhlbiByZXR1cm4gbm8gcmVmZXJyZXIuXG5cdFx0XHRpZiAoaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5KHJlZmVycmVyVVJMKSAmJiAhaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5KGN1cnJlbnRVUkwpKSB7XG5cdFx0XHRcdHJldHVybiAnbm8tcmVmZXJyZXInO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyAyLiBSZXR1cm4gcmVmZXJyZXJVUkwuXG5cdFx0XHRyZXR1cm4gcmVmZXJyZXJVUkw7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCByZWZlcnJlclBvbGljeTogJHtwb2xpY3l9YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLXJlZmVycmVyLXBvbGljeS8jcGFyc2UtcmVmZXJyZXItcG9saWN5LWZyb20taGVhZGVyfFJlZmVycmVyIFBvbGljeSDCpzguMS4gUGFyc2UgYSByZWZlcnJlciBwb2xpY3kgZnJvbSBhIFJlZmVycmVyLVBvbGljeSBoZWFkZXJ9XG4gKiBAcGFyYW0ge0hlYWRlcnN9IGhlYWRlcnMgUmVzcG9uc2UgaGVhZGVyc1xuICogQHJldHVybnMge3N0cmluZ30gcG9saWN5XG4gKi9cbmZ1bmN0aW9uIHBhcnNlUmVmZXJyZXJQb2xpY3lGcm9tSGVhZGVyKGhlYWRlcnMpIHtcblx0Ly8gMS4gTGV0IHBvbGljeS10b2tlbnMgYmUgdGhlIHJlc3VsdCBvZiBleHRyYWN0aW5nIGhlYWRlciBsaXN0IHZhbHVlcyBnaXZlbiBgUmVmZXJyZXItUG9saWN5YFxuXHQvLyAgICBhbmQgcmVzcG9uc2XigJlzIGhlYWRlciBsaXN0LlxuXHRjb25zdCBwb2xpY3lUb2tlbnMgPSAoaGVhZGVycy5nZXQoJ3JlZmVycmVyLXBvbGljeScpIHx8ICcnKS5zcGxpdCgvWyxcXHNdKy8pO1xuXG5cdC8vIDIuIExldCBwb2xpY3kgYmUgdGhlIGVtcHR5IHN0cmluZy5cblx0bGV0IHBvbGljeSA9ICcnO1xuXG5cdC8vIDMuIEZvciBlYWNoIHRva2VuIGluIHBvbGljeS10b2tlbnMsIGlmIHRva2VuIGlzIGEgcmVmZXJyZXIgcG9saWN5IGFuZCB0b2tlbiBpcyBub3QgdGhlIGVtcHR5XG5cdC8vICAgIHN0cmluZywgdGhlbiBzZXQgcG9saWN5IHRvIHRva2VuLlxuXHQvLyBOb3RlOiBUaGlzIGFsZ29yaXRobSBsb29wcyBvdmVyIG11bHRpcGxlIHBvbGljeSB2YWx1ZXMgdG8gYWxsb3cgZGVwbG95bWVudCBvZiBuZXcgcG9saWN5XG5cdC8vIHZhbHVlcyB3aXRoIGZhbGxiYWNrcyBmb3Igb2xkZXIgdXNlciBhZ2VudHMsIGFzIGRlc2NyaWJlZCBpbiDCpyAxMS4xIFVua25vd24gUG9saWN5IFZhbHVlcy5cblx0Zm9yIChjb25zdCB0b2tlbiBvZiBwb2xpY3lUb2tlbnMpIHtcblx0XHRpZiAodG9rZW4gJiYgUmVmZXJyZXJQb2xpY3kuaGFzKHRva2VuKSkge1xuXHRcdFx0cG9saWN5ID0gdG9rZW47XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC4gUmV0dXJuIHBvbGljeS5cblx0cmV0dXJuIHBvbGljeTtcbn1cblxuLyoqXG4gKiBSZXF1ZXN0LmpzXG4gKlxuICogUmVxdWVzdCBjbGFzcyBjb250YWlucyBzZXJ2ZXIgb25seSBvcHRpb25zXG4gKlxuICogQWxsIHNwZWMgYWxnb3JpdGhtIHN0ZXAgbnVtYmVycyBhcmUgYmFzZWQgb24gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvY29tbWl0LXNuYXBzaG90cy9hZTcxNjgyMmNiM2E2MTg0MzIyNmNkMDkwZWVmYzY1ODk0NDZjMWQyLy5cbiAqL1xuXG5jb25zdCBJTlRFUk5BTFMgPSBTeW1ib2woJ1JlcXVlc3QgaW50ZXJuYWxzJyk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYW4gaW5zdGFuY2Ugb2YgUmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0gIHsqfSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzUmVxdWVzdCA9IG9iamVjdCA9PiB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2Ygb2JqZWN0W0lOVEVSTkFMU10gPT09ICdvYmplY3QnXG5cdCk7XG59O1xuXG5jb25zdCBkb0JhZERhdGFXYXJuID0gbm9kZV91dGlsLmRlcHJlY2F0ZSgoKSA9PiB7fSxcblx0Jy5kYXRhIGlzIG5vdCBhIHZhbGlkIFJlcXVlc3RJbml0IHByb3BlcnR5LCB1c2UgLmJvZHkgaW5zdGVhZCcsXG5cdCdodHRwczovL2dpdGh1Yi5jb20vbm9kZS1mZXRjaC9ub2RlLWZldGNoL2lzc3Vlcy8xMDAwIChyZXF1ZXN0KScpO1xuXG4vKipcbiAqIFJlcXVlc3QgY2xhc3NcbiAqXG4gKiBSZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWNsYXNzXG4gKlxuICogQHBhcmFtICAgTWl4ZWQgICBpbnB1dCAgVXJsIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEBwYXJhbSAgIE9iamVjdCAgaW5pdCAgIEN1c3RvbSBvcHRpb25zXG4gKiBAcmV0dXJuICBWb2lkXG4gKi9cbmNsYXNzIFJlcXVlc3QgZXh0ZW5kcyBCb2R5IHtcblx0Y29uc3RydWN0b3IoaW5wdXQsIGluaXQgPSB7fSkge1xuXHRcdGxldCBwYXJzZWRVUkw7XG5cblx0XHQvLyBOb3JtYWxpemUgaW5wdXQgYW5kIGZvcmNlIFVSTCB0byBiZSBlbmNvZGVkIGFzIFVURi04IChodHRwczovL2dpdGh1Yi5jb20vbm9kZS1mZXRjaC9ub2RlLWZldGNoL2lzc3Vlcy8yNDUpXG5cdFx0aWYgKGlzUmVxdWVzdChpbnB1dCkpIHtcblx0XHRcdHBhcnNlZFVSTCA9IG5ldyBVUkwoaW5wdXQudXJsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFyc2VkVVJMID0gbmV3IFVSTChpbnB1dCk7XG5cdFx0XHRpbnB1dCA9IHt9O1xuXHRcdH1cblxuXHRcdGlmIChwYXJzZWRVUkwudXNlcm5hbWUgIT09ICcnIHx8IHBhcnNlZFVSTC5wYXNzd29yZCAhPT0gJycpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYCR7cGFyc2VkVVJMfSBpcyBhbiB1cmwgd2l0aCBlbWJlZGRlZCBjcmVkZW50aWFscy5gKTtcblx0XHR9XG5cblx0XHRsZXQgbWV0aG9kID0gaW5pdC5tZXRob2QgfHwgaW5wdXQubWV0aG9kIHx8ICdHRVQnO1xuXHRcdGlmICgvXihkZWxldGV8Z2V0fGhlYWR8b3B0aW9uc3xwb3N0fHB1dCkkL2kudGVzdChtZXRob2QpKSB7XG5cdFx0XHRtZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcblx0XHR9XG5cblx0XHRpZiAoIWlzUmVxdWVzdChpbml0KSAmJiAnZGF0YScgaW4gaW5pdCkge1xuXHRcdFx0ZG9CYWREYXRhV2FybigpO1xuXHRcdH1cblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLCBlcWVxZXFcblx0XHRpZiAoKGluaXQuYm9keSAhPSBudWxsIHx8IChpc1JlcXVlc3QoaW5wdXQpICYmIGlucHV0LmJvZHkgIT09IG51bGwpKSAmJlxuXHRcdFx0KG1ldGhvZCA9PT0gJ0dFVCcgfHwgbWV0aG9kID09PSAnSEVBRCcpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdSZXF1ZXN0IHdpdGggR0VUL0hFQUQgbWV0aG9kIGNhbm5vdCBoYXZlIGJvZHknKTtcblx0XHR9XG5cblx0XHRjb25zdCBpbnB1dEJvZHkgPSBpbml0LmJvZHkgP1xuXHRcdFx0aW5pdC5ib2R5IDpcblx0XHRcdChpc1JlcXVlc3QoaW5wdXQpICYmIGlucHV0LmJvZHkgIT09IG51bGwgP1xuXHRcdFx0XHRjbG9uZShpbnB1dCkgOlxuXHRcdFx0XHRudWxsKTtcblxuXHRcdHN1cGVyKGlucHV0Qm9keSwge1xuXHRcdFx0c2l6ZTogaW5pdC5zaXplIHx8IGlucHV0LnNpemUgfHwgMFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycyB8fCBpbnB1dC5oZWFkZXJzIHx8IHt9KTtcblxuXHRcdGlmIChpbnB1dEJvZHkgIT09IG51bGwgJiYgIWhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKSkge1xuXHRcdFx0Y29uc3QgY29udGVudFR5cGUgPSBleHRyYWN0Q29udGVudFR5cGUoaW5wdXRCb2R5LCB0aGlzKTtcblx0XHRcdGlmIChjb250ZW50VHlwZSkge1xuXHRcdFx0XHRoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgY29udGVudFR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxldCBzaWduYWwgPSBpc1JlcXVlc3QoaW5wdXQpID9cblx0XHRcdGlucHV0LnNpZ25hbCA6XG5cdFx0XHRudWxsO1xuXHRcdGlmICgnc2lnbmFsJyBpbiBpbml0KSB7XG5cdFx0XHRzaWduYWwgPSBpbml0LnNpZ25hbDtcblx0XHR9XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxXG5cdFx0aWYgKHNpZ25hbCAhPSBudWxsICYmICFpc0Fib3J0U2lnbmFsKHNpZ25hbCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNpZ25hbCB0byBiZSBhbiBpbnN0YW5jZW9mIEFib3J0U2lnbmFsIG9yIEV2ZW50VGFyZ2V0Jyk7XG5cdFx0fVxuXG5cdFx0Ly8gwqc1LjQsIFJlcXVlc3QgY29uc3RydWN0b3Igc3RlcHMsIHN0ZXAgMTUuMVxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLCBlcWVxZXFcblx0XHRsZXQgcmVmZXJyZXIgPSBpbml0LnJlZmVycmVyID09IG51bGwgPyBpbnB1dC5yZWZlcnJlciA6IGluaXQucmVmZXJyZXI7XG5cdFx0aWYgKHJlZmVycmVyID09PSAnJykge1xuXHRcdFx0Ly8gwqc1LjQsIFJlcXVlc3QgY29uc3RydWN0b3Igc3RlcHMsIHN0ZXAgMTUuMlxuXHRcdFx0cmVmZXJyZXIgPSAnbm8tcmVmZXJyZXInO1xuXHRcdH0gZWxzZSBpZiAocmVmZXJyZXIpIHtcblx0XHRcdC8vIMKnNS40LCBSZXF1ZXN0IGNvbnN0cnVjdG9yIHN0ZXBzLCBzdGVwIDE1LjMuMSwgMTUuMy4yXG5cdFx0XHRjb25zdCBwYXJzZWRSZWZlcnJlciA9IG5ldyBVUkwocmVmZXJyZXIpO1xuXHRcdFx0Ly8gwqc1LjQsIFJlcXVlc3QgY29uc3RydWN0b3Igc3RlcHMsIHN0ZXAgMTUuMy4zLCAxNS4zLjRcblx0XHRcdHJlZmVycmVyID0gL15hYm91dDooXFwvXFwvKT9jbGllbnQkLy50ZXN0KHBhcnNlZFJlZmVycmVyKSA/ICdjbGllbnQnIDogcGFyc2VkUmVmZXJyZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlZmVycmVyID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHRoaXNbSU5URVJOQUxTXSA9IHtcblx0XHRcdG1ldGhvZCxcblx0XHRcdHJlZGlyZWN0OiBpbml0LnJlZGlyZWN0IHx8IGlucHV0LnJlZGlyZWN0IHx8ICdmb2xsb3cnLFxuXHRcdFx0aGVhZGVycyxcblx0XHRcdHBhcnNlZFVSTCxcblx0XHRcdHNpZ25hbCxcblx0XHRcdHJlZmVycmVyXG5cdFx0fTtcblxuXHRcdC8vIE5vZGUtZmV0Y2gtb25seSBvcHRpb25zXG5cdFx0dGhpcy5mb2xsb3cgPSBpbml0LmZvbGxvdyA9PT0gdW5kZWZpbmVkID8gKGlucHV0LmZvbGxvdyA9PT0gdW5kZWZpbmVkID8gMjAgOiBpbnB1dC5mb2xsb3cpIDogaW5pdC5mb2xsb3c7XG5cdFx0dGhpcy5jb21wcmVzcyA9IGluaXQuY29tcHJlc3MgPT09IHVuZGVmaW5lZCA/IChpbnB1dC5jb21wcmVzcyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlucHV0LmNvbXByZXNzKSA6IGluaXQuY29tcHJlc3M7XG5cdFx0dGhpcy5jb3VudGVyID0gaW5pdC5jb3VudGVyIHx8IGlucHV0LmNvdW50ZXIgfHwgMDtcblx0XHR0aGlzLmFnZW50ID0gaW5pdC5hZ2VudCB8fCBpbnB1dC5hZ2VudDtcblx0XHR0aGlzLmhpZ2hXYXRlck1hcmsgPSBpbml0LmhpZ2hXYXRlck1hcmsgfHwgaW5wdXQuaGlnaFdhdGVyTWFyayB8fCAxNjM4NDtcblx0XHR0aGlzLmluc2VjdXJlSFRUUFBhcnNlciA9IGluaXQuaW5zZWN1cmVIVFRQUGFyc2VyIHx8IGlucHV0Lmluc2VjdXJlSFRUUFBhcnNlciB8fCBmYWxzZTtcblxuXHRcdC8vIMKnNS40LCBSZXF1ZXN0IGNvbnN0cnVjdG9yIHN0ZXBzLCBzdGVwIDE2LlxuXHRcdC8vIERlZmF1bHQgaXMgZW1wdHkgc3RyaW5nIHBlciBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1yZXF1ZXN0LXJlZmVycmVyLXBvbGljeVxuXHRcdHRoaXMucmVmZXJyZXJQb2xpY3kgPSBpbml0LnJlZmVycmVyUG9saWN5IHx8IGlucHV0LnJlZmVycmVyUG9saWN5IHx8ICcnO1xuXHR9XG5cblx0LyoqIEByZXR1cm5zIHtzdHJpbmd9ICovXG5cdGdldCBtZXRob2QoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5tZXRob2Q7XG5cdH1cblxuXHQvKiogQHJldHVybnMge3N0cmluZ30gKi9cblx0Z2V0IHVybCgpIHtcblx0XHRyZXR1cm4gbm9kZV91cmwuZm9ybWF0KHRoaXNbSU5URVJOQUxTXS5wYXJzZWRVUkwpO1xuXHR9XG5cblx0LyoqIEByZXR1cm5zIHtIZWFkZXJzfSAqL1xuXHRnZXQgaGVhZGVycygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmhlYWRlcnM7XG5cdH1cblxuXHRnZXQgcmVkaXJlY3QoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5yZWRpcmVjdDtcblx0fVxuXG5cdC8qKiBAcmV0dXJucyB7QWJvcnRTaWduYWx9ICovXG5cdGdldCBzaWduYWwoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5zaWduYWw7XG5cdH1cblxuXHQvLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QtcmVmZXJyZXJcblx0Z2V0IHJlZmVycmVyKCkge1xuXHRcdGlmICh0aGlzW0lOVEVSTkFMU10ucmVmZXJyZXIgPT09ICduby1yZWZlcnJlcicpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyID09PSAnY2xpZW50Jykge1xuXHRcdFx0cmV0dXJuICdhYm91dDpjbGllbnQnO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzW0lOVEVSTkFMU10ucmVmZXJyZXIpIHtcblx0XHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10ucmVmZXJyZXIudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Z2V0IHJlZmVycmVyUG9saWN5KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10ucmVmZXJyZXJQb2xpY3k7XG5cdH1cblxuXHRzZXQgcmVmZXJyZXJQb2xpY3kocmVmZXJyZXJQb2xpY3kpIHtcblx0XHR0aGlzW0lOVEVSTkFMU10ucmVmZXJyZXJQb2xpY3kgPSB2YWxpZGF0ZVJlZmVycmVyUG9saWN5KHJlZmVycmVyUG9saWN5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbG9uZSB0aGlzIHJlcXVlc3Rcblx0ICpcblx0ICogQHJldHVybiAgUmVxdWVzdFxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMpO1xuXHR9XG5cblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuXHRcdHJldHVybiAnUmVxdWVzdCc7XG5cdH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVxdWVzdC5wcm90b3R5cGUsIHtcblx0bWV0aG9kOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHVybDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRoZWFkZXJzOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHJlZGlyZWN0OiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdGNsb25lOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXG5cdHNpZ25hbDoge2VudW1lcmFibGU6IHRydWV9LFxuXHRyZWZlcnJlcjoge2VudW1lcmFibGU6IHRydWV9LFxuXHRyZWZlcnJlclBvbGljeToge2VudW1lcmFibGU6IHRydWV9XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgUmVxdWVzdCB0byBOb2RlLmpzIGh0dHAgcmVxdWVzdCBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7UmVxdWVzdH0gcmVxdWVzdCAtIEEgUmVxdWVzdCBpbnN0YW5jZVxuICogQHJldHVybiBUaGUgb3B0aW9ucyBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIGh0dHAucmVxdWVzdFxuICovXG5jb25zdCBnZXROb2RlUmVxdWVzdE9wdGlvbnMgPSByZXF1ZXN0ID0+IHtcblx0Y29uc3Qge3BhcnNlZFVSTH0gPSByZXF1ZXN0W0lOVEVSTkFMU107XG5cdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXF1ZXN0W0lOVEVSTkFMU10uaGVhZGVycyk7XG5cblx0Ly8gRmV0Y2ggc3RlcCAxLjNcblx0aWYgKCFoZWFkZXJzLmhhcygnQWNjZXB0JykpIHtcblx0XHRoZWFkZXJzLnNldCgnQWNjZXB0JywgJyovKicpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIHN0ZXBzIDIuNC0yLjdcblx0bGV0IGNvbnRlbnRMZW5ndGhWYWx1ZSA9IG51bGw7XG5cdGlmIChyZXF1ZXN0LmJvZHkgPT09IG51bGwgJiYgL14ocG9zdHxwdXQpJC9pLnRlc3QocmVxdWVzdC5tZXRob2QpKSB7XG5cdFx0Y29udGVudExlbmd0aFZhbHVlID0gJzAnO1xuXHR9XG5cblx0aWYgKHJlcXVlc3QuYm9keSAhPT0gbnVsbCkge1xuXHRcdGNvbnN0IHRvdGFsQnl0ZXMgPSBnZXRUb3RhbEJ5dGVzKHJlcXVlc3QpO1xuXHRcdC8vIFNldCBDb250ZW50LUxlbmd0aCBpZiB0b3RhbEJ5dGVzIGlzIGEgbnVtYmVyICh0aGF0IGlzIG5vdCBOYU4pXG5cdFx0aWYgKHR5cGVvZiB0b3RhbEJ5dGVzID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzTmFOKHRvdGFsQnl0ZXMpKSB7XG5cdFx0XHRjb250ZW50TGVuZ3RoVmFsdWUgPSBTdHJpbmcodG90YWxCeXRlcyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGNvbnRlbnRMZW5ndGhWYWx1ZSkge1xuXHRcdGhlYWRlcnMuc2V0KCdDb250ZW50LUxlbmd0aCcsIGNvbnRlbnRMZW5ndGhWYWx1ZSk7XG5cdH1cblxuXHQvLyA0LjEuIE1haW4gZmV0Y2gsIHN0ZXAgMi42XG5cdC8vID4gSWYgcmVxdWVzdCdzIHJlZmVycmVyIHBvbGljeSBpcyB0aGUgZW1wdHkgc3RyaW5nLCB0aGVuIHNldCByZXF1ZXN0J3MgcmVmZXJyZXIgcG9saWN5IHRvIHRoZVxuXHQvLyA+IGRlZmF1bHQgcmVmZXJyZXIgcG9saWN5LlxuXHRpZiAocmVxdWVzdC5yZWZlcnJlclBvbGljeSA9PT0gJycpIHtcblx0XHRyZXF1ZXN0LnJlZmVycmVyUG9saWN5ID0gREVGQVVMVF9SRUZFUlJFUl9QT0xJQ1k7XG5cdH1cblxuXHQvLyA0LjEuIE1haW4gZmV0Y2gsIHN0ZXAgMi43XG5cdC8vID4gSWYgcmVxdWVzdCdzIHJlZmVycmVyIGlzIG5vdCBcIm5vLXJlZmVycmVyXCIsIHNldCByZXF1ZXN0J3MgcmVmZXJyZXIgdG8gdGhlIHJlc3VsdCBvZiBpbnZva2luZ1xuXHQvLyA+IGRldGVybWluZSByZXF1ZXN0J3MgcmVmZXJyZXIuXG5cdGlmIChyZXF1ZXN0LnJlZmVycmVyICYmIHJlcXVlc3QucmVmZXJyZXIgIT09ICduby1yZWZlcnJlcicpIHtcblx0XHRyZXF1ZXN0W0lOVEVSTkFMU10ucmVmZXJyZXIgPSBkZXRlcm1pbmVSZXF1ZXN0c1JlZmVycmVyKHJlcXVlc3QpO1xuXHR9IGVsc2Uge1xuXHRcdHJlcXVlc3RbSU5URVJOQUxTXS5yZWZlcnJlciA9ICduby1yZWZlcnJlcic7XG5cdH1cblxuXHQvLyA0LjUuIEhUVFAtbmV0d29yay1vci1jYWNoZSBmZXRjaCwgc3RlcCA2Ljlcblx0Ly8gPiBJZiBodHRwUmVxdWVzdCdzIHJlZmVycmVyIGlzIGEgVVJMLCB0aGVuIGFwcGVuZCBgUmVmZXJlcmAvaHR0cFJlcXVlc3QncyByZWZlcnJlciwgc2VyaWFsaXplZFxuXHQvLyA+ICBhbmQgaXNvbW9ycGhpYyBlbmNvZGVkLCB0byBodHRwUmVxdWVzdCdzIGhlYWRlciBsaXN0LlxuXHRpZiAocmVxdWVzdFtJTlRFUk5BTFNdLnJlZmVycmVyIGluc3RhbmNlb2YgVVJMKSB7XG5cdFx0aGVhZGVycy5zZXQoJ1JlZmVyZXInLCByZXF1ZXN0LnJlZmVycmVyKTtcblx0fVxuXG5cdC8vIEhUVFAtbmV0d29yay1vci1jYWNoZSBmZXRjaCBzdGVwIDIuMTFcblx0aWYgKCFoZWFkZXJzLmhhcygnVXNlci1BZ2VudCcpKSB7XG5cdFx0aGVhZGVycy5zZXQoJ1VzZXItQWdlbnQnLCAnbm9kZS1mZXRjaCcpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIHN0ZXAgMi4xNVxuXHRpZiAocmVxdWVzdC5jb21wcmVzcyAmJiAhaGVhZGVycy5oYXMoJ0FjY2VwdC1FbmNvZGluZycpKSB7XG5cdFx0aGVhZGVycy5zZXQoJ0FjY2VwdC1FbmNvZGluZycsICdnemlwLCBkZWZsYXRlLCBicicpO1xuXHR9XG5cblx0bGV0IHthZ2VudH0gPSByZXF1ZXN0O1xuXHRpZiAodHlwZW9mIGFnZW50ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0YWdlbnQgPSBhZ2VudChwYXJzZWRVUkwpO1xuXHR9XG5cblx0aWYgKCFoZWFkZXJzLmhhcygnQ29ubmVjdGlvbicpICYmICFhZ2VudCkge1xuXHRcdGhlYWRlcnMuc2V0KCdDb25uZWN0aW9uJywgJ2Nsb3NlJyk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCA0LjJcblx0Ly8gY2h1bmtlZCBlbmNvZGluZyBpcyBoYW5kbGVkIGJ5IE5vZGUuanNcblxuXHRjb25zdCBzZWFyY2ggPSBnZXRTZWFyY2gocGFyc2VkVVJMKTtcblxuXHQvLyBQYXNzIHRoZSBmdWxsIFVSTCBkaXJlY3RseSB0byByZXF1ZXN0KCksIGJ1dCBvdmVyd3JpdGUgdGhlIGZvbGxvd2luZ1xuXHQvLyBvcHRpb25zOlxuXHRjb25zdCBvcHRpb25zID0ge1xuXHRcdC8vIE92ZXJ3cml0ZSBzZWFyY2ggdG8gcmV0YWluIHRyYWlsaW5nID8gKGlzc3VlICM3NzYpXG5cdFx0cGF0aDogcGFyc2VkVVJMLnBhdGhuYW1lICsgc2VhcmNoLFxuXHRcdC8vIFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcmUgbm90IGV4cHJlc3NlZCBpbiB0aGUgVVJMXG5cdFx0bWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcblx0XHRoZWFkZXJzOiBoZWFkZXJzW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldKCksXG5cdFx0aW5zZWN1cmVIVFRQUGFyc2VyOiByZXF1ZXN0Lmluc2VjdXJlSFRUUFBhcnNlcixcblx0XHRhZ2VudFxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0LyoqIEB0eXBlIHtVUkx9ICovXG5cdFx0cGFyc2VkVVJMLFxuXHRcdG9wdGlvbnNcblx0fTtcbn07XG5cbi8qKlxuICogQWJvcnRFcnJvciBpbnRlcmZhY2UgZm9yIGNhbmNlbGxlZCByZXF1ZXN0c1xuICovXG5jbGFzcyBBYm9ydEVycm9yIGV4dGVuZHMgRmV0Y2hCYXNlRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlID0gJ2Fib3J0ZWQnKSB7XG5cdFx0c3VwZXIobWVzc2FnZSwgdHlwZSk7XG5cdH1cbn1cblxuLyohIG5vZGUtZG9tZXhjZXB0aW9uLiBNSVQgTGljZW5zZS4gSmltbXkgV8OkcnRpbmcgPGh0dHBzOi8vamltbXkud2FydGluZy5zZS9vcGVuc291cmNlPiAqL1xuXG5pZiAoIWdsb2JhbFRoaXMuRE9NRXhjZXB0aW9uKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBNZXNzYWdlQ2hhbm5lbCB9ID0gcmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKSxcbiAgICBwb3J0ID0gbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEsXG4gICAgYWIgPSBuZXcgQXJyYXlCdWZmZXIoKTtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKGFiLCBbYWIsIGFiXSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVyci5jb25zdHJ1Y3Rvci5uYW1lID09PSAnRE9NRXhjZXB0aW9uJyAmJiAoXG4gICAgICBnbG9iYWxUaGlzLkRPTUV4Y2VwdGlvbiA9IGVyci5jb25zdHJ1Y3RvclxuICAgICk7XG4gIH1cbn1cblxudmFyIG5vZGVEb21leGNlcHRpb24gPSBnbG9iYWxUaGlzLkRPTUV4Y2VwdGlvbjtcblxuLyoqXG4gKiBJbmRleC5qc1xuICpcbiAqIGEgcmVxdWVzdCBBUEkgY29tcGF0aWJsZSB3aXRoIHdpbmRvdy5mZXRjaFxuICpcbiAqIEFsbCBzcGVjIGFsZ29yaXRobSBzdGVwIG51bWJlcnMgYXJlIGJhc2VkIG9uIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnL2NvbW1pdC1zbmFwc2hvdHMvYWU3MTY4MjJjYjNhNjE4NDMyMjZjZDA5MGVlZmM2NTg5NDQ2YzFkMi8uXG4gKi9cblxuY29uc3Qgc3VwcG9ydGVkU2NoZW1hcyA9IG5ldyBTZXQoWydkYXRhOicsICdodHRwOicsICdodHRwczonXSk7XG5cbi8qKlxuICogRmV0Y2ggZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nIHwgVVJMIHwgaW1wb3J0KCcuL3JlcXVlc3QnKS5kZWZhdWx0fSB1cmwgLSBBYnNvbHV0ZSB1cmwgb3IgUmVxdWVzdCBpbnN0YW5jZVxuICogQHBhcmFtICAgeyp9IFtvcHRpb25zX10gLSBGZXRjaCBvcHRpb25zXG4gKiBAcmV0dXJuICB7UHJvbWlzZTxpbXBvcnQoJy4vcmVzcG9uc2UnKS5kZWZhdWx0Pn1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2godXJsLCBvcHRpb25zXykge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdC8vIEJ1aWxkIHJlcXVlc3Qgb2JqZWN0XG5cdFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwgb3B0aW9uc18pO1xuXHRcdGNvbnN0IHtwYXJzZWRVUkwsIG9wdGlvbnN9ID0gZ2V0Tm9kZVJlcXVlc3RPcHRpb25zKHJlcXVlc3QpO1xuXHRcdGlmICghc3VwcG9ydGVkU2NoZW1hcy5oYXMocGFyc2VkVVJMLnByb3RvY29sKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgbm9kZS1mZXRjaCBjYW5ub3QgbG9hZCAke3VybH0uIFVSTCBzY2hlbWUgXCIke3BhcnNlZFVSTC5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKX1cIiBpcyBub3Qgc3VwcG9ydGVkLmApO1xuXHRcdH1cblxuXHRcdGlmIChwYXJzZWRVUkwucHJvdG9jb2wgPT09ICdkYXRhOicpIHtcblx0XHRcdGNvbnN0IGRhdGEgPSBkYXRhVXJpVG9CdWZmZXIocmVxdWVzdC51cmwpO1xuXHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoZGF0YSwge2hlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogZGF0YS50eXBlRnVsbH19KTtcblx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFdyYXAgaHR0cC5yZXF1ZXN0IGludG8gZmV0Y2hcblx0XHRjb25zdCBzZW5kID0gKHBhcnNlZFVSTC5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHApLnJlcXVlc3Q7XG5cdFx0Y29uc3Qge3NpZ25hbH0gPSByZXF1ZXN0O1xuXHRcdGxldCByZXNwb25zZSA9IG51bGw7XG5cblx0XHRjb25zdCBhYm9ydCA9ICgpID0+IHtcblx0XHRcdGNvbnN0IGVycm9yID0gbmV3IEFib3J0RXJyb3IoJ1RoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQuJyk7XG5cdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0aWYgKHJlcXVlc3QuYm9keSAmJiByZXF1ZXN0LmJvZHkgaW5zdGFuY2VvZiBTdHJlYW0uUmVhZGFibGUpIHtcblx0XHRcdFx0cmVxdWVzdC5ib2R5LmRlc3Ryb3koZXJyb3IpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5ib2R5KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2UuYm9keS5lbWl0KCdlcnJvcicsIGVycm9yKTtcblx0XHR9O1xuXG5cdFx0aWYgKHNpZ25hbCAmJiBzaWduYWwuYWJvcnRlZCkge1xuXHRcdFx0YWJvcnQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBhYm9ydEFuZEZpbmFsaXplID0gKCkgPT4ge1xuXHRcdFx0YWJvcnQoKTtcblx0XHRcdGZpbmFsaXplKCk7XG5cdFx0fTtcblxuXHRcdC8vIFNlbmQgcmVxdWVzdFxuXHRcdGNvbnN0IHJlcXVlc3RfID0gc2VuZChwYXJzZWRVUkwudG9TdHJpbmcoKSwgb3B0aW9ucyk7XG5cblx0XHRpZiAoc2lnbmFsKSB7XG5cdFx0XHRzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHR9XG5cblx0XHRjb25zdCBmaW5hbGl6ZSA9ICgpID0+IHtcblx0XHRcdHJlcXVlc3RfLmFib3J0KCk7XG5cdFx0XHRpZiAoc2lnbmFsKSB7XG5cdFx0XHRcdHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0QW5kRmluYWxpemUpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXF1ZXN0Xy5vbignZXJyb3InLCBlcnJvciA9PiB7XG5cdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHJlcXVlc3QgdG8gJHtyZXF1ZXN0LnVybH0gZmFpbGVkLCByZWFzb246ICR7ZXJyb3IubWVzc2FnZX1gLCAnc3lzdGVtJywgZXJyb3IpKTtcblx0XHRcdGZpbmFsaXplKCk7XG5cdFx0fSk7XG5cblx0XHRmaXhSZXNwb25zZUNodW5rZWRUcmFuc2ZlckJhZEVuZGluZyhyZXF1ZXN0XywgZXJyb3IgPT4ge1xuXHRcdFx0aWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmJvZHkpIHtcblx0XHRcdFx0cmVzcG9uc2UuYm9keS5kZXN0cm95KGVycm9yKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8qIGM4IGlnbm9yZSBuZXh0IDE4ICovXG5cdFx0aWYgKHByb2Nlc3MudmVyc2lvbiA8ICd2MTQnKSB7XG5cdFx0XHQvLyBCZWZvcmUgTm9kZS5qcyAxNCwgcGlwZWxpbmUoKSBkb2VzIG5vdCBmdWxseSBzdXBwb3J0IGFzeW5jIGl0ZXJhdG9ycyBhbmQgZG9lcyBub3QgYWx3YXlzXG5cdFx0XHQvLyBwcm9wZXJseSBoYW5kbGUgd2hlbiB0aGUgc29ja2V0IGNsb3NlL2VuZCBldmVudHMgYXJlIG91dCBvZiBvcmRlci5cblx0XHRcdHJlcXVlc3RfLm9uKCdzb2NrZXQnLCBzID0+IHtcblx0XHRcdFx0bGV0IGVuZGVkV2l0aEV2ZW50c0NvdW50O1xuXHRcdFx0XHRzLnByZXBlbmRMaXN0ZW5lcignZW5kJywgKCkgPT4ge1xuXHRcdFx0XHRcdGVuZGVkV2l0aEV2ZW50c0NvdW50ID0gcy5fZXZlbnRzQ291bnQ7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzLnByZXBlbmRMaXN0ZW5lcignY2xvc2UnLCBoYWRFcnJvciA9PiB7XG5cdFx0XHRcdFx0Ly8gaWYgZW5kIGhhcHBlbmVkIGJlZm9yZSBjbG9zZSBidXQgdGhlIHNvY2tldCBkaWRuJ3QgZW1pdCBhbiBlcnJvciwgZG8gaXQgbm93XG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlICYmIGVuZGVkV2l0aEV2ZW50c0NvdW50IDwgcy5fZXZlbnRzQ291bnQgJiYgIWhhZEVycm9yKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcignUHJlbWF0dXJlIGNsb3NlJyk7XG5cdFx0XHRcdFx0XHRlcnJvci5jb2RlID0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJztcblx0XHRcdFx0XHRcdHJlc3BvbnNlLmJvZHkuZW1pdCgnZXJyb3InLCBlcnJvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJlcXVlc3RfLm9uKCdyZXNwb25zZScsIHJlc3BvbnNlXyA9PiB7XG5cdFx0XHRyZXF1ZXN0Xy5zZXRUaW1lb3V0KDApO1xuXHRcdFx0Y29uc3QgaGVhZGVycyA9IGZyb21SYXdIZWFkZXJzKHJlc3BvbnNlXy5yYXdIZWFkZXJzKTtcblxuXHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDVcblx0XHRcdGlmIChpc1JlZGlyZWN0KHJlc3BvbnNlXy5zdGF0dXNDb2RlKSkge1xuXHRcdFx0XHQvLyBIVFRQIGZldGNoIHN0ZXAgNS4yXG5cdFx0XHRcdGNvbnN0IGxvY2F0aW9uID0gaGVhZGVycy5nZXQoJ0xvY2F0aW9uJyk7XG5cblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuM1xuXHRcdFx0XHRsZXQgbG9jYXRpb25VUkwgPSBudWxsO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGxvY2F0aW9uVVJMID0gbG9jYXRpb24gPT09IG51bGwgPyBudWxsIDogbmV3IFVSTChsb2NhdGlvbiwgcmVxdWVzdC51cmwpO1xuXHRcdFx0XHR9IGNhdGNoIHtcblx0XHRcdFx0XHQvLyBlcnJvciBoZXJlIGNhbiBvbmx5IGJlIGludmFsaWQgVVJMIGluIExvY2F0aW9uOiBoZWFkZXJcblx0XHRcdFx0XHQvLyBkbyBub3QgdGhyb3cgd2hlbiBvcHRpb25zLnJlZGlyZWN0ID09IG1hbnVhbFxuXHRcdFx0XHRcdC8vIGxldCB0aGUgdXNlciBleHRyYWN0IHRoZSBlcnJvcm5lb3VzIHJlZGlyZWN0IFVSTFxuXHRcdFx0XHRcdGlmIChyZXF1ZXN0LnJlZGlyZWN0ICE9PSAnbWFudWFsJykge1xuXHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGB1cmkgcmVxdWVzdGVkIHJlc3BvbmRzIHdpdGggYW4gaW52YWxpZCByZWRpcmVjdCBVUkw6ICR7bG9jYXRpb259YCwgJ2ludmFsaWQtcmVkaXJlY3QnKSk7XG5cdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1LjVcblx0XHRcdFx0c3dpdGNoIChyZXF1ZXN0LnJlZGlyZWN0KSB7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3InOlxuXHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGB1cmkgcmVxdWVzdGVkIHJlc3BvbmRzIHdpdGggYSByZWRpcmVjdCwgcmVkaXJlY3QgbW9kZSBpcyBzZXQgdG8gZXJyb3I6ICR7cmVxdWVzdC51cmx9YCwgJ25vLXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRjYXNlICdtYW51YWwnOlxuXHRcdFx0XHRcdFx0Ly8gTm90aGluZyB0byBkb1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZm9sbG93Jzoge1xuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDJcblx0XHRcdFx0XHRcdGlmIChsb2NhdGlvblVSTCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDVcblx0XHRcdFx0XHRcdGlmIChyZXF1ZXN0LmNvdW50ZXIgPj0gcmVxdWVzdC5mb2xsb3cpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBtYXhpbXVtIHJlZGlyZWN0IHJlYWNoZWQgYXQ6ICR7cmVxdWVzdC51cmx9YCwgJ21heC1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgNiAoY291bnRlciBpbmNyZW1lbnQpXG5cdFx0XHRcdFx0XHQvLyBDcmVhdGUgYSBuZXcgUmVxdWVzdCBvYmplY3QuXG5cdFx0XHRcdFx0XHRjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcblx0XHRcdFx0XHRcdFx0aGVhZGVyczogbmV3IEhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKSxcblx0XHRcdFx0XHRcdFx0Zm9sbG93OiByZXF1ZXN0LmZvbGxvdyxcblx0XHRcdFx0XHRcdFx0Y291bnRlcjogcmVxdWVzdC5jb3VudGVyICsgMSxcblx0XHRcdFx0XHRcdFx0YWdlbnQ6IHJlcXVlc3QuYWdlbnQsXG5cdFx0XHRcdFx0XHRcdGNvbXByZXNzOiByZXF1ZXN0LmNvbXByZXNzLFxuXHRcdFx0XHRcdFx0XHRtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuXHRcdFx0XHRcdFx0XHRib2R5OiBjbG9uZShyZXF1ZXN0KSxcblx0XHRcdFx0XHRcdFx0c2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcblx0XHRcdFx0XHRcdFx0c2l6ZTogcmVxdWVzdC5zaXplLFxuXHRcdFx0XHRcdFx0XHRyZWZlcnJlcjogcmVxdWVzdC5yZWZlcnJlcixcblx0XHRcdFx0XHRcdFx0cmVmZXJyZXJQb2xpY3k6IHJlcXVlc3QucmVmZXJyZXJQb2xpY3lcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdC8vIHdoZW4gZm9yd2FyZGluZyBzZW5zaXRpdmUgaGVhZGVycyBsaWtlIFwiQXV0aG9yaXphdGlvblwiLFxuXHRcdFx0XHRcdFx0Ly8gXCJXV1ctQXV0aGVudGljYXRlXCIsIGFuZCBcIkNvb2tpZVwiIHRvIHVudHJ1c3RlZCB0YXJnZXRzLFxuXHRcdFx0XHRcdFx0Ly8gaGVhZGVycyB3aWxsIGJlIGlnbm9yZWQgd2hlbiBmb2xsb3dpbmcgYSByZWRpcmVjdCB0byBhIGRvbWFpblxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBpcyBub3QgYSBzdWJkb21haW4gbWF0Y2ggb3IgZXhhY3QgbWF0Y2ggb2YgdGhlIGluaXRpYWwgZG9tYWluLlxuXHRcdFx0XHRcdFx0Ly8gRm9yIGV4YW1wbGUsIGEgcmVkaXJlY3QgZnJvbSBcImZvby5jb21cIiB0byBlaXRoZXIgXCJmb28uY29tXCIgb3IgXCJzdWIuZm9vLmNvbVwiXG5cdFx0XHRcdFx0XHQvLyB3aWxsIGZvcndhcmQgdGhlIHNlbnNpdGl2ZSBoZWFkZXJzLCBidXQgYSByZWRpcmVjdCB0byBcImJhci5jb21cIiB3aWxsIG5vdC5cblx0XHRcdFx0XHRcdC8vIGhlYWRlcnMgd2lsbCBhbHNvIGJlIGlnbm9yZWQgd2hlbiBmb2xsb3dpbmcgYSByZWRpcmVjdCB0byBhIGRvbWFpbiB1c2luZ1xuXHRcdFx0XHRcdFx0Ly8gYSBkaWZmZXJlbnQgcHJvdG9jb2wuIEZvciBleGFtcGxlLCBhIHJlZGlyZWN0IGZyb20gXCJodHRwczovL2Zvby5jb21cIiB0byBcImh0dHA6Ly9mb28uY29tXCJcblx0XHRcdFx0XHRcdC8vIHdpbGwgbm90IGZvcndhcmQgdGhlIHNlbnNpdGl2ZSBoZWFkZXJzXG5cdFx0XHRcdFx0XHRpZiAoIWlzRG9tYWluT3JTdWJkb21haW4ocmVxdWVzdC51cmwsIGxvY2F0aW9uVVJMKSB8fCAhaXNTYW1lUHJvdG9jb2wocmVxdWVzdC51cmwsIGxvY2F0aW9uVVJMKSkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IG5hbWUgb2YgWydhdXRob3JpemF0aW9uJywgJ3d3dy1hdXRoZW50aWNhdGUnLCAnY29va2llJywgJ2Nvb2tpZTInXSkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRpb25zLmhlYWRlcnMuZGVsZXRlKG5hbWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCA5XG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2VfLnN0YXR1c0NvZGUgIT09IDMwMyAmJiByZXF1ZXN0LmJvZHkgJiYgb3B0aW9uc18uYm9keSBpbnN0YW5jZW9mIFN0cmVhbS5SZWFkYWJsZSkge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoJ0Nhbm5vdCBmb2xsb3cgcmVkaXJlY3Qgd2l0aCBib2R5IGJlaW5nIGEgcmVhZGFibGUgc3RyZWFtJywgJ3Vuc3VwcG9ydGVkLXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAxMVxuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlXy5zdGF0dXNDb2RlID09PSAzMDMgfHwgKChyZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMzAxIHx8IHJlc3BvbnNlXy5zdGF0dXNDb2RlID09PSAzMDIpICYmIHJlcXVlc3QubWV0aG9kID09PSAnUE9TVCcpKSB7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRpb25zLm1ldGhvZCA9ICdHRVQnO1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0aW9ucy5ib2R5ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLmRlbGV0ZSgnY29udGVudC1sZW5ndGgnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDE0XG5cdFx0XHRcdFx0XHRjb25zdCByZXNwb25zZVJlZmVycmVyUG9saWN5ID0gcGFyc2VSZWZlcnJlclBvbGljeUZyb21IZWFkZXIoaGVhZGVycyk7XG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2VSZWZlcnJlclBvbGljeSkge1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0aW9ucy5yZWZlcnJlclBvbGljeSA9IHJlc3BvbnNlUmVmZXJyZXJQb2xpY3k7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAxNVxuXHRcdFx0XHRcdFx0cmVzb2x2ZShmZXRjaChuZXcgUmVxdWVzdChsb2NhdGlvblVSTCwgcmVxdWVzdE9wdGlvbnMpKSk7XG5cdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoYFJlZGlyZWN0IG9wdGlvbiAnJHtyZXF1ZXN0LnJlZGlyZWN0fScgaXMgbm90IGEgdmFsaWQgdmFsdWUgb2YgUmVxdWVzdFJlZGlyZWN0YCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFByZXBhcmUgcmVzcG9uc2Vcblx0XHRcdGlmIChzaWduYWwpIHtcblx0XHRcdFx0cmVzcG9uc2VfLm9uY2UoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHRzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBib2R5ID0gU3RyZWFtLnBpcGVsaW5lKHJlc3BvbnNlXywgbmV3IFN0cmVhbS5QYXNzVGhyb3VnaCgpLCBlcnJvciA9PiB7XG5cdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Ly8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9wdWxsLzI5Mzc2XG5cdFx0XHQvKiBjOCBpZ25vcmUgbmV4dCAzICovXG5cdFx0XHRpZiAocHJvY2Vzcy52ZXJzaW9uIDwgJ3YxMi4xMCcpIHtcblx0XHRcdFx0cmVzcG9uc2VfLm9uKCdhYm9ydGVkJywgYWJvcnRBbmRGaW5hbGl6ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHJlc3BvbnNlT3B0aW9ucyA9IHtcblx0XHRcdFx0dXJsOiByZXF1ZXN0LnVybCxcblx0XHRcdFx0c3RhdHVzOiByZXNwb25zZV8uc3RhdHVzQ29kZSxcblx0XHRcdFx0c3RhdHVzVGV4dDogcmVzcG9uc2VfLnN0YXR1c01lc3NhZ2UsXG5cdFx0XHRcdGhlYWRlcnMsXG5cdFx0XHRcdHNpemU6IHJlcXVlc3Quc2l6ZSxcblx0XHRcdFx0Y291bnRlcjogcmVxdWVzdC5jb3VudGVyLFxuXHRcdFx0XHRoaWdoV2F0ZXJNYXJrOiByZXF1ZXN0LmhpZ2hXYXRlck1hcmtcblx0XHRcdH07XG5cblx0XHRcdC8vIEhUVFAtbmV0d29yayBmZXRjaCBzdGVwIDEyLjEuMS4zXG5cdFx0XHRjb25zdCBjb2RpbmdzID0gaGVhZGVycy5nZXQoJ0NvbnRlbnQtRW5jb2RpbmcnKTtcblxuXHRcdFx0Ly8gSFRUUC1uZXR3b3JrIGZldGNoIHN0ZXAgMTIuMS4xLjQ6IGhhbmRsZSBjb250ZW50IGNvZGluZ3NcblxuXHRcdFx0Ly8gaW4gZm9sbG93aW5nIHNjZW5hcmlvcyB3ZSBpZ25vcmUgY29tcHJlc3Npb24gc3VwcG9ydFxuXHRcdFx0Ly8gMS4gY29tcHJlc3Npb24gc3VwcG9ydCBpcyBkaXNhYmxlZFxuXHRcdFx0Ly8gMi4gSEVBRCByZXF1ZXN0XG5cdFx0XHQvLyAzLiBubyBDb250ZW50LUVuY29kaW5nIGhlYWRlclxuXHRcdFx0Ly8gNC4gbm8gY29udGVudCByZXNwb25zZSAoMjA0KVxuXHRcdFx0Ly8gNS4gY29udGVudCBub3QgbW9kaWZpZWQgcmVzcG9uc2UgKDMwNClcblx0XHRcdGlmICghcmVxdWVzdC5jb21wcmVzcyB8fCByZXF1ZXN0Lm1ldGhvZCA9PT0gJ0hFQUQnIHx8IGNvZGluZ3MgPT09IG51bGwgfHwgcmVzcG9uc2VfLnN0YXR1c0NvZGUgPT09IDIwNCB8fCByZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMzA0KSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlT3B0aW9ucyk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBOb2RlIHY2K1xuXHRcdFx0Ly8gQmUgbGVzcyBzdHJpY3Qgd2hlbiBkZWNvZGluZyBjb21wcmVzc2VkIHJlc3BvbnNlcywgc2luY2Ugc29tZXRpbWVzXG5cdFx0XHQvLyBzZXJ2ZXJzIHNlbmQgc2xpZ2h0bHkgaW52YWxpZCByZXNwb25zZXMgdGhhdCBhcmUgc3RpbGwgYWNjZXB0ZWRcblx0XHRcdC8vIGJ5IGNvbW1vbiBicm93c2Vycy5cblx0XHRcdC8vIEFsd2F5cyB1c2luZyBaX1NZTkNfRkxVU0ggaXMgd2hhdCBjVVJMIGRvZXMuXG5cdFx0XHRjb25zdCB6bGliT3B0aW9ucyA9IHtcblx0XHRcdFx0Zmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNILFxuXHRcdFx0XHRmaW5pc2hGbHVzaDogemxpYi5aX1NZTkNfRkxVU0hcblx0XHRcdH07XG5cblx0XHRcdC8vIEZvciBnemlwXG5cdFx0XHRpZiAoY29kaW5ncyA9PT0gJ2d6aXAnIHx8IGNvZGluZ3MgPT09ICd4LWd6aXAnKSB7XG5cdFx0XHRcdGJvZHkgPSBTdHJlYW0ucGlwZWxpbmUoYm9keSwgemxpYi5jcmVhdGVHdW56aXAoemxpYk9wdGlvbnMpLCBlcnJvciA9PiB7XG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlT3B0aW9ucyk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBkZWZsYXRlXG5cdFx0XHRpZiAoY29kaW5ncyA9PT0gJ2RlZmxhdGUnIHx8IGNvZGluZ3MgPT09ICd4LWRlZmxhdGUnKSB7XG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgaW5mYW1vdXMgcmF3IGRlZmxhdGUgcmVzcG9uc2UgZnJvbSBvbGQgc2VydmVyc1xuXHRcdFx0XHQvLyBhIGhhY2sgZm9yIG9sZCBJSVMgYW5kIEFwYWNoZSBzZXJ2ZXJzXG5cdFx0XHRcdGNvbnN0IHJhdyA9IFN0cmVhbS5waXBlbGluZShyZXNwb25zZV8sIG5ldyBTdHJlYW0uUGFzc1Rocm91Z2goKSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyYXcub25jZSgnZGF0YScsIGNodW5rID0+IHtcblx0XHRcdFx0XHQvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNzUxOTgyOFxuXHRcdFx0XHRcdGlmICgoY2h1bmtbMF0gJiAweDBGKSA9PT0gMHgwOCkge1xuXHRcdFx0XHRcdFx0Ym9keSA9IFN0cmVhbS5waXBlbGluZShib2R5LCB6bGliLmNyZWF0ZUluZmxhdGUoKSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym9keSA9IFN0cmVhbS5waXBlbGluZShib2R5LCB6bGliLmNyZWF0ZUluZmxhdGVSYXcoKSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xuXHRcdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmF3Lm9uY2UoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHQvLyBTb21lIG9sZCBJSVMgc2VydmVycyByZXR1cm4gemVyby1sZW5ndGggT0sgZGVmbGF0ZSByZXNwb25zZXMsIHNvXG5cdFx0XHRcdFx0Ly8gJ2RhdGEnIGlzIG5ldmVyIGVtaXR0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZS1mZXRjaC9ub2RlLWZldGNoL3B1bGwvOTAzXG5cdFx0XHRcdFx0aWYgKCFyZXNwb25zZSkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VPcHRpb25zKTtcblx0XHRcdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIGJyXG5cdFx0XHRpZiAoY29kaW5ncyA9PT0gJ2JyJykge1xuXHRcdFx0XHRib2R5ID0gU3RyZWFtLnBpcGVsaW5lKGJvZHksIHpsaWIuY3JlYXRlQnJvdGxpRGVjb21wcmVzcygpLCBlcnJvciA9PiB7XG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlT3B0aW9ucyk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSwgdXNlIHJlc3BvbnNlIGFzLWlzXG5cdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xuXHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSk7XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuXHRcdHdyaXRlVG9TdHJlYW0ocmVxdWVzdF8sIHJlcXVlc3QpLmNhdGNoKHJlamVjdCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBmaXhSZXNwb25zZUNodW5rZWRUcmFuc2ZlckJhZEVuZGluZyhyZXF1ZXN0LCBlcnJvckNhbGxiYWNrKSB7XG5cdGNvbnN0IExBU1RfQ0hVTksgPSBub2RlX2J1ZmZlci5CdWZmZXIuZnJvbSgnMFxcclxcblxcclxcbicpO1xuXG5cdGxldCBpc0NodW5rZWRUcmFuc2ZlciA9IGZhbHNlO1xuXHRsZXQgcHJvcGVyTGFzdENodW5rUmVjZWl2ZWQgPSBmYWxzZTtcblx0bGV0IHByZXZpb3VzQ2h1bms7XG5cblx0cmVxdWVzdC5vbigncmVzcG9uc2UnLCByZXNwb25zZSA9PiB7XG5cdFx0Y29uc3Qge2hlYWRlcnN9ID0gcmVzcG9uc2U7XG5cdFx0aXNDaHVua2VkVHJhbnNmZXIgPSBoZWFkZXJzWyd0cmFuc2Zlci1lbmNvZGluZyddID09PSAnY2h1bmtlZCcgJiYgIWhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ107XG5cdH0pO1xuXG5cdHJlcXVlc3Qub24oJ3NvY2tldCcsIHNvY2tldCA9PiB7XG5cdFx0Y29uc3Qgb25Tb2NrZXRDbG9zZSA9ICgpID0+IHtcblx0XHRcdGlmIChpc0NodW5rZWRUcmFuc2ZlciAmJiAhcHJvcGVyTGFzdENodW5rUmVjZWl2ZWQpIHtcblx0XHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1ByZW1hdHVyZSBjbG9zZScpO1xuXHRcdFx0XHRlcnJvci5jb2RlID0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJztcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IG9uRGF0YSA9IGJ1ZiA9PiB7XG5cdFx0XHRwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCA9IG5vZGVfYnVmZmVyLkJ1ZmZlci5jb21wYXJlKGJ1Zi5zbGljZSgtNSksIExBU1RfQ0hVTkspID09PSAwO1xuXG5cdFx0XHQvLyBTb21ldGltZXMgZmluYWwgMC1sZW5ndGggY2h1bmsgYW5kIGVuZCBvZiBtZXNzYWdlIGNvZGUgYXJlIGluIHNlcGFyYXRlIHBhY2tldHNcblx0XHRcdGlmICghcHJvcGVyTGFzdENodW5rUmVjZWl2ZWQgJiYgcHJldmlvdXNDaHVuaykge1xuXHRcdFx0XHRwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCA9IChcblx0XHRcdFx0XHRub2RlX2J1ZmZlci5CdWZmZXIuY29tcGFyZShwcmV2aW91c0NodW5rLnNsaWNlKC0zKSwgTEFTVF9DSFVOSy5zbGljZSgwLCAzKSkgPT09IDAgJiZcblx0XHRcdFx0XHRub2RlX2J1ZmZlci5CdWZmZXIuY29tcGFyZShidWYuc2xpY2UoLTIpLCBMQVNUX0NIVU5LLnNsaWNlKDMpKSA9PT0gMFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmV2aW91c0NodW5rID0gYnVmO1xuXHRcdH07XG5cblx0XHRzb2NrZXQucHJlcGVuZExpc3RlbmVyKCdjbG9zZScsIG9uU29ja2V0Q2xvc2UpO1xuXHRcdHNvY2tldC5vbignZGF0YScsIG9uRGF0YSk7XG5cblx0XHRyZXF1ZXN0Lm9uKCdjbG9zZScsICgpID0+IHtcblx0XHRcdHNvY2tldC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblNvY2tldENsb3NlKTtcblx0XHRcdHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uRGF0YSk7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIEBhdXRob3IgVG9ydSBOYWdhc2hpbWEgPGh0dHBzOi8vZ2l0aHViLmNvbS9teXN0aWNhdGVhPlxuICogQGNvcHlyaWdodCAyMDE1IFRvcnUgTmFnYXNoaW1hLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGRpcmVjdG9yeSBmb3IgZnVsbCBsaWNlbnNlLlxuICovXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFByaXZhdGVEYXRhXG4gKiBAcHJvcGVydHkge0V2ZW50VGFyZ2V0fSBldmVudFRhcmdldCBUaGUgZXZlbnQgdGFyZ2V0LlxuICogQHByb3BlcnR5IHt7dHlwZTpzdHJpbmd9fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50UGhhc2UgVGhlIGN1cnJlbnQgZXZlbnQgcGhhc2UuXG4gKiBAcHJvcGVydHkge0V2ZW50VGFyZ2V0fG51bGx9IGN1cnJlbnRUYXJnZXQgVGhlIGN1cnJlbnQgZXZlbnQgdGFyZ2V0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBjYW5jZWxlZCBUaGUgZmxhZyB0byBwcmV2ZW50IGRlZmF1bHQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHN0b3BwZWQgVGhlIGZsYWcgdG8gc3RvcCBwcm9wYWdhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaW1tZWRpYXRlU3RvcHBlZCBUaGUgZmxhZyB0byBzdG9wIHByb3BhZ2F0aW9uIGltbWVkaWF0ZWx5LlxuICogQHByb3BlcnR5IHtGdW5jdGlvbnxudWxsfSBwYXNzaXZlTGlzdGVuZXIgVGhlIGxpc3RlbmVyIGlmIHRoZSBjdXJyZW50IGxpc3RlbmVyIGlzIHBhc3NpdmUuIE90aGVyd2lzZSB0aGlzIGlzIG51bGwuXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZVN0YW1wIFRoZSB1bml4IHRpbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbi8qKlxuICogUHJpdmF0ZSBkYXRhIGZvciBldmVudCB3cmFwcGVycy5cbiAqIEB0eXBlIHtXZWFrTWFwPEV2ZW50LCBQcml2YXRlRGF0YT59XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBwcml2YXRlRGF0YSA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogQ2FjaGUgZm9yIHdyYXBwZXIgY2xhc3Nlcy5cbiAqIEB0eXBlIHtXZWFrTWFwPE9iamVjdCwgRnVuY3Rpb24+fVxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgd3JhcHBlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEdldCBwcml2YXRlIGRhdGEuXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgb2JqZWN0IHRvIGdldCBwcml2YXRlIGRhdGEuXG4gKiBAcmV0dXJucyB7UHJpdmF0ZURhdGF9IFRoZSBwcml2YXRlIGRhdGEgb2YgdGhlIGV2ZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcGQoZXZlbnQpIHtcbiAgICBjb25zdCByZXR2ID0gcHJpdmF0ZURhdGEuZ2V0KGV2ZW50KTtcbiAgICBjb25zb2xlLmFzc2VydChcbiAgICAgICAgcmV0diAhPSBudWxsLFxuICAgICAgICBcIid0aGlzJyBpcyBleHBlY3RlZCBhbiBFdmVudCBvYmplY3QsIGJ1dCBnb3RcIixcbiAgICAgICAgZXZlbnRcbiAgICApO1xuICAgIHJldHVybiByZXR2XG59XG5cbi8qKlxuICogaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNzZXQtdGhlLWNhbmNlbGVkLWZsYWdcbiAqIEBwYXJhbSBkYXRhIHtQcml2YXRlRGF0YX0gcHJpdmF0ZSBkYXRhLlxuICovXG5mdW5jdGlvbiBzZXRDYW5jZWxGbGFnKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5wYXNzaXZlTGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgXCJVbmFibGUgdG8gcHJldmVudERlZmF1bHQgaW5zaWRlIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXIgaW52b2NhdGlvbi5cIixcbiAgICAgICAgICAgICAgICBkYXRhLnBhc3NpdmVMaXN0ZW5lclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCFkYXRhLmV2ZW50LmNhbmNlbGFibGUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZGF0YS5jYW5jZWxlZCA9IHRydWU7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmV2ZW50LnByZXZlbnREZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGF0YS5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLWV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG4vKipcbiAqIFRoZSBldmVudCB3cmFwcGVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBldmVudFRhcmdldCBUaGUgZXZlbnQgdGFyZ2V0IG9mIHRoaXMgZGlzcGF0Y2hpbmcuXG4gKiBAcGFyYW0ge0V2ZW50fHt0eXBlOnN0cmluZ319IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCB0byB3cmFwLlxuICovXG5mdW5jdGlvbiBFdmVudChldmVudFRhcmdldCwgZXZlbnQpIHtcbiAgICBwcml2YXRlRGF0YS5zZXQodGhpcywge1xuICAgICAgICBldmVudFRhcmdldCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGV2ZW50UGhhc2U6IDIsXG4gICAgICAgIGN1cnJlbnRUYXJnZXQ6IGV2ZW50VGFyZ2V0LFxuICAgICAgICBjYW5jZWxlZDogZmFsc2UsXG4gICAgICAgIHN0b3BwZWQ6IGZhbHNlLFxuICAgICAgICBpbW1lZGlhdGVTdG9wcGVkOiBmYWxzZSxcbiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyOiBudWxsLFxuICAgICAgICB0aW1lU3RhbXA6IGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpLFxuICAgIH0pO1xuXG4gICAgLy8gaHR0cHM6Ly9oZXljYW0uZ2l0aHViLmlvL3dlYmlkbC8jVW5mb3JnZWFibGVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpc1RydXN0ZWRcIiwgeyB2YWx1ZTogZmFsc2UsIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAvLyBEZWZpbmUgYWNjZXNzb3JzXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKCEoa2V5IGluIHRoaXMpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCBkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3Ioa2V5KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIFNob3VsZCBiZSBlbnVtZXJhYmxlLCBidXQgY2xhc3MgbWV0aG9kcyBhcmUgbm90IGVudW1lcmFibGUuXG5FdmVudC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhpcyBldmVudC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gcGQodGhpcykuZXZlbnQudHlwZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQuXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fVxuICAgICAqL1xuICAgIGdldCB0YXJnZXQoKSB7XG4gICAgICAgIHJldHVybiBwZCh0aGlzKS5ldmVudFRhcmdldFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQuXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fVxuICAgICAqL1xuICAgIGdldCBjdXJyZW50VGFyZ2V0KCkge1xuICAgICAgICByZXR1cm4gcGQodGhpcykuY3VycmVudFRhcmdldFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRUYXJnZXRbXX0gVGhlIGNvbXBvc2VkIHBhdGggb2YgdGhpcyBldmVudC5cbiAgICAgKi9cbiAgICBjb21wb3NlZFBhdGgoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYXJnZXQgPSBwZCh0aGlzKS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBpZiAoY3VycmVudFRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2N1cnJlbnRUYXJnZXRdXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0YW50IG9mIE5PTkUuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgTk9ORSgpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RhbnQgb2YgQ0FQVFVSSU5HX1BIQVNFLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IENBUFRVUklOR19QSEFTRSgpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RhbnQgb2YgQVRfVEFSR0VULlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IEFUX1RBUkdFVCgpIHtcbiAgICAgICAgcmV0dXJuIDJcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RhbnQgb2YgQlVCQkxJTkdfUEhBU0UuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgQlVCQkxJTkdfUEhBU0UoKSB7XG4gICAgICAgIHJldHVybiAzXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgb2YgdGhpcyBldmVudC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBldmVudFBoYXNlKCkge1xuICAgICAgICByZXR1cm4gcGQodGhpcykuZXZlbnRQaGFzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdG9wIGV2ZW50IGJ1YmJsaW5nLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHBkKHRoaXMpO1xuXG4gICAgICAgIGRhdGEuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5ldmVudC5zdG9wUHJvcGFnYXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgZGF0YS5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdG9wIGV2ZW50IGJ1YmJsaW5nLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHBkKHRoaXMpO1xuXG4gICAgICAgIGRhdGEuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIGRhdGEuaW1tZWRpYXRlU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgZGF0YS5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0byBiZSBidWJibGluZy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgYnViYmxlcygpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4ocGQodGhpcykuZXZlbnQuYnViYmxlcylcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGZsYWcgdG8gYmUgY2FuY2VsYWJsZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgY2FuY2VsYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4ocGQodGhpcykuZXZlbnQuY2FuY2VsYWJsZSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FuY2VsIHRoaXMgZXZlbnQuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgIHNldENhbmNlbEZsYWcocGQodGhpcykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0byBpbmRpY2F0ZSBjYW5jZWxsYXRpb24gc3RhdGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKSB7XG4gICAgICAgIHJldHVybiBwZCh0aGlzKS5jYW5jZWxlZFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0byBiZSBjb21wb3NlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgY29tcG9zZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHBkKHRoaXMpLmV2ZW50LmNvbXBvc2VkKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdW5peCB0aW1lIG9mIHRoaXMgZXZlbnQuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgdGltZVN0YW1wKCkge1xuICAgICAgICByZXR1cm4gcGQodGhpcykudGltZVN0YW1wXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgb2YgdGhpcyBldmVudC5cbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR9XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBnZXQgc3JjRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHBkKHRoaXMpLmV2ZW50VGFyZ2V0XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBmbGFnIHRvIHN0b3AgZXZlbnQgYnViYmxpbmcuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBnZXQgY2FuY2VsQnViYmxlKCkge1xuICAgICAgICByZXR1cm4gcGQodGhpcykuc3RvcHBlZFxuICAgIH0sXG4gICAgc2V0IGNhbmNlbEJ1YmJsZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gcGQodGhpcyk7XG5cbiAgICAgICAgZGF0YS5zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmV2ZW50LmNhbmNlbEJ1YmJsZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIGRhdGEuZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0byBpbmRpY2F0ZSBjYW5jZWxsYXRpb24gc3RhdGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBnZXQgcmV0dXJuVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAhcGQodGhpcykuY2FuY2VsZWRcbiAgICB9LFxuICAgIHNldCByZXR1cm5WYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBzZXRDYW5jZWxGbGFnKHBkKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoaXMgZXZlbnQgb2JqZWN0LiBCdXQgZG8gbm90aGluZyB1bmRlciBldmVudCBkaXNwYXRjaGluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtidWJibGVzPWZhbHNlXSBUaGUgZmxhZyB0byBiZSBwb3NzaWJsZSB0byBidWJibGUgdXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2FuY2VsYWJsZT1mYWxzZV0gVGhlIGZsYWcgdG8gYmUgcG9zc2libGUgdG8gY2FuY2VsLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgaW5pdEV2ZW50KCkge1xuICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgIH0sXG59O1xuXG4vLyBgY29uc3RydWN0b3JgIGlzIG5vdCBlbnVtZXJhYmxlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50LnByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCB7XG4gICAgdmFsdWU6IEV2ZW50LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbn0pO1xuXG4vLyBFbnN1cmUgYGV2ZW50IGluc3RhbmNlb2Ygd2luZG93LkV2ZW50YCBpcyBgdHJ1ZWAuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LkV2ZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKEV2ZW50LnByb3RvdHlwZSwgd2luZG93LkV2ZW50LnByb3RvdHlwZSk7XG5cbiAgICAvLyBNYWtlIGFzc29jaWF0aW9uIGZvciB3cmFwcGVycy5cbiAgICB3cmFwcGVycy5zZXQod2luZG93LkV2ZW50LnByb3RvdHlwZSwgRXZlbnQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciB0byByZWRpcmVjdCBhIGdpdmVuIHByb3BlcnR5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBQcm9wZXJ0eSBuYW1lIHRvIGRlZmluZSBwcm9wZXJ0eSBkZXNjcmlwdG9yLlxuICogQHJldHVybnMge1Byb3BlcnR5RGVzY3JpcHRvcn0gVGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gcmVkaXJlY3QgdGhlIHByb3BlcnR5LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVkaXJlY3REZXNjcmlwdG9yKGtleSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBwZCh0aGlzKS5ldmVudFtrZXldXG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgcGQodGhpcykuZXZlbnRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciB0byBjYWxsIGEgZ2l2ZW4gbWV0aG9kIHByb3BlcnR5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBQcm9wZXJ0eSBuYW1lIHRvIGRlZmluZSBwcm9wZXJ0eSBkZXNjcmlwdG9yLlxuICogQHJldHVybnMge1Byb3BlcnR5RGVzY3JpcHRvcn0gVGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gY2FsbCB0aGUgbWV0aG9kIHByb3BlcnR5LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVmaW5lQ2FsbERlc2NyaXB0b3Ioa2V5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUoKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IHBkKHRoaXMpLmV2ZW50O1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50W2tleV0uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cylcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmUgbmV3IHdyYXBwZXIgY2xhc3MuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBCYXNlRXZlbnQgVGhlIGJhc2Ugd3JhcHBlciBjbGFzcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgcHJvdG90eXBlIG9mIHRoZSBvcmlnaW5hbCBldmVudC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIGRlZmluZWQgd3JhcHBlciBjbGFzcy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVdyYXBwZXIoQmFzZUV2ZW50LCBwcm90bykge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm90byk7XG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCYXNlRXZlbnRcbiAgICB9XG5cbiAgICAvKiogQ3VzdG9tRXZlbnQgKi9cbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudFRhcmdldCwgZXZlbnQpIHtcbiAgICAgICAgQmFzZUV2ZW50LmNhbGwodGhpcywgZXZlbnRUYXJnZXQsIGV2ZW50KTtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJhc2VFdmVudC5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHsgdmFsdWU6IEN1c3RvbUV2ZW50LCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgfSk7XG5cbiAgICAvLyBEZWZpbmUgYWNjZXNzb3JzLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoIShrZXkgaW4gQmFzZUV2ZW50LnByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBrZXkpO1xuICAgICAgICAgICAgY29uc3QgaXNGdW5jID0gdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBDdXN0b21FdmVudC5wcm90b3R5cGUsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGlzRnVuY1xuICAgICAgICAgICAgICAgICAgICA/IGRlZmluZUNhbGxEZXNjcmlwdG9yKGtleSlcbiAgICAgICAgICAgICAgICAgICAgOiBkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3Ioa2V5KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDdXN0b21FdmVudFxufVxuXG4vKipcbiAqIEdldCB0aGUgd3JhcHBlciBjbGFzcyBvZiBhIGdpdmVuIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgcHJvdG90eXBlIG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byBnZXQgaXRzIHdyYXBwZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSB3cmFwcGVyIGNsYXNzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0V3JhcHBlcihwcm90bykge1xuICAgIGlmIChwcm90byA9PSBudWxsIHx8IHByb3RvID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgIHJldHVybiBFdmVudFxuICAgIH1cblxuICAgIGxldCB3cmFwcGVyID0gd3JhcHBlcnMuZ2V0KHByb3RvKTtcbiAgICBpZiAod3JhcHBlciA9PSBudWxsKSB7XG4gICAgICAgIHdyYXBwZXIgPSBkZWZpbmVXcmFwcGVyKGdldFdyYXBwZXIoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSksIHByb3RvKTtcbiAgICAgICAgd3JhcHBlcnMuc2V0KHByb3RvLCB3cmFwcGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBwZXJcbn1cblxuLyoqXG4gKiBXcmFwIGEgZ2l2ZW4gZXZlbnQgdG8gbWFuYWdlbWVudCBhIGRpc3BhdGNoaW5nLlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZXZlbnRUYXJnZXQgVGhlIGV2ZW50IHRhcmdldCBvZiB0aGlzIGRpc3BhdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IFRoZSBldmVudCB0byB3cmFwLlxuICogQHJldHVybnMge0V2ZW50fSBUaGUgd3JhcHBlciBpbnN0YW5jZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHdyYXBFdmVudChldmVudFRhcmdldCwgZXZlbnQpIHtcbiAgICBjb25zdCBXcmFwcGVyID0gZ2V0V3JhcHBlcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZXZlbnQpKTtcbiAgICByZXR1cm4gbmV3IFdyYXBwZXIoZXZlbnRUYXJnZXQsIGV2ZW50KVxufVxuXG4vKipcbiAqIEdldCB0aGUgaW1tZWRpYXRlU3RvcHBlZCBmbGFnIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgdG8gZ2V0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRoZSBmbGFnIHRvIHN0b3AgcHJvcGFnYXRpb24gaW1tZWRpYXRlbHkuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1N0b3BwZWQoZXZlbnQpIHtcbiAgICByZXR1cm4gcGQoZXZlbnQpLmltbWVkaWF0ZVN0b3BwZWRcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGN1cnJlbnQgZXZlbnQgcGhhc2Ugb2YgYSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBzZXQgY3VycmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge251bWJlcn0gZXZlbnRQaGFzZSBOZXcgZXZlbnQgcGhhc2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldEV2ZW50UGhhc2UoZXZlbnQsIGV2ZW50UGhhc2UpIHtcbiAgICBwZChldmVudCkuZXZlbnRQaGFzZSA9IGV2ZW50UGhhc2U7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjdXJyZW50IHRhcmdldCBvZiBhIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHRvIHNldCBjdXJyZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8bnVsbH0gY3VycmVudFRhcmdldCBOZXcgY3VycmVudCB0YXJnZXQuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldEN1cnJlbnRUYXJnZXQoZXZlbnQsIGN1cnJlbnRUYXJnZXQpIHtcbiAgICBwZChldmVudCkuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG59XG5cbi8qKlxuICogU2V0IGEgcGFzc2l2ZSBsaXN0ZW5lciBvZiBhIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHRvIHNldCBjdXJyZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gcGFzc2l2ZUxpc3RlbmVyIE5ldyBwYXNzaXZlIGxpc3RlbmVyLlxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXRQYXNzaXZlTGlzdGVuZXIoZXZlbnQsIHBhc3NpdmVMaXN0ZW5lcikge1xuICAgIHBkKGV2ZW50KS5wYXNzaXZlTGlzdGVuZXIgPSBwYXNzaXZlTGlzdGVuZXI7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gTGlzdGVuZXJOb2RlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBsaXN0ZW5lclxuICogQHByb3BlcnR5IHsxfDJ8M30gbGlzdGVuZXJUeXBlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHBhc3NpdmVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb25jZVxuICogQHByb3BlcnR5IHtMaXN0ZW5lck5vZGV8bnVsbH0gbmV4dFxuICogQHByaXZhdGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtXZWFrTWFwPG9iamVjdCwgTWFwPHN0cmluZywgTGlzdGVuZXJOb2RlPj59XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBsaXN0ZW5lcnNNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vLyBMaXN0ZW5lciB0eXBlc1xuY29uc3QgQ0FQVFVSRSA9IDE7XG5jb25zdCBCVUJCTEUgPSAyO1xuY29uc3QgQVRUUklCVVRFID0gMztcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0IG9yIG5vdC5cbiAqIEBwYXJhbSB7YW55fSB4IFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9PSBudWxsICYmIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiIC8vZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxufVxuXG4vKipcbiAqIEdldCBsaXN0ZW5lcnMuXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBldmVudFRhcmdldCBUaGUgZXZlbnQgdGFyZ2V0IHRvIGdldC5cbiAqIEByZXR1cm5zIHtNYXA8c3RyaW5nLCBMaXN0ZW5lck5vZGU+fSBUaGUgbGlzdGVuZXJzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKGV2ZW50VGFyZ2V0KSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdGVuZXJzTWFwLmdldChldmVudFRhcmdldCk7XG4gICAgaWYgKGxpc3RlbmVycyA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICBcIid0aGlzJyBpcyBleHBlY3RlZCBhbiBFdmVudFRhcmdldCBvYmplY3QsIGJ1dCBnb3QgYW5vdGhlciB2YWx1ZS5cIlxuICAgICAgICApXG4gICAgfVxuICAgIHJldHVybiBsaXN0ZW5lcnNcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIHRoZSBldmVudCBhdHRyaWJ1dGUgb2YgYSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgdG8gZ2V0IHByb3BlcnR5IGRlc2NyaXB0b3IuXG4gKiBAcmV0dXJucyB7UHJvcGVydHlEZXNjcmlwdG9yfSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvci5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlZmluZUV2ZW50QXR0cmlidXRlRGVzY3JpcHRvcihldmVudE5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5saXN0ZW5lclR5cGUgPT09IEFUVFJJQlVURSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5saXN0ZW5lclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfSxcblxuICAgICAgICBzZXQobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAhaXNPYmplY3QobGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBudWxsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG5cbiAgICAgICAgICAgIC8vIFRyYXZlcnNlIHRvIHRoZSB0YWlsIHdoaWxlIHJlbW92aW5nIG9sZCB2YWx1ZS5cbiAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBub2RlID0gbGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuICAgICAgICAgICAgd2hpbGUgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmxpc3RlbmVyVHlwZSA9PT0gQVRUUklCVVRFKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5kZWxldGUoZXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBub2RlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCBuZXcgdmFsdWUuXG4gICAgICAgICAgICBpZiAobGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdOb2RlID0ge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJUeXBlOiBBVFRSSUJVVEUsXG4gICAgICAgICAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvbmNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zZXQoZXZlbnROYW1lLCBuZXdOb2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmV2Lm5leHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmUgYW4gZXZlbnQgYXR0cmlidXRlIChlLmcuIGBldmVudFRhcmdldC5vbmNsaWNrYCkuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRUYXJnZXRQcm90b3R5cGUgVGhlIGV2ZW50IHRhcmdldCBwcm90b3R5cGUgdG8gZGVmaW5lIGFuIGV2ZW50IGF0dHJiaXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZSB0byBkZWZpbmUuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZGVmaW5lRXZlbnRBdHRyaWJ1dGUoZXZlbnRUYXJnZXRQcm90b3R5cGUsIGV2ZW50TmFtZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgZXZlbnRUYXJnZXRQcm90b3R5cGUsXG4gICAgICAgIGBvbiR7ZXZlbnROYW1lfWAsXG4gICAgICAgIGRlZmluZUV2ZW50QXR0cmlidXRlRGVzY3JpcHRvcihldmVudE5hbWUpXG4gICAgKTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBjdXN0b20gRXZlbnRUYXJnZXQgd2l0aCBldmVudCBhdHRyaWJ1dGVzLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZXZlbnROYW1lcyBFdmVudCBuYW1lcyBmb3IgZXZlbnQgYXR0cmlidXRlcy5cbiAqIEByZXR1cm5zIHtFdmVudFRhcmdldH0gVGhlIGN1c3RvbSBFdmVudFRhcmdldC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0KGV2ZW50TmFtZXMpIHtcbiAgICAvKiogQ3VzdG9tRXZlbnRUYXJnZXQgKi9cbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudFRhcmdldCgpIHtcbiAgICAgICAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudFRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEV2ZW50VGFyZ2V0LnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgICAgdmFsdWU6IEN1c3RvbUV2ZW50VGFyZ2V0LFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50TmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZGVmaW5lRXZlbnRBdHRyaWJ1dGUoQ3VzdG9tRXZlbnRUYXJnZXQucHJvdG90eXBlLCBldmVudE5hbWVzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQ3VzdG9tRXZlbnRUYXJnZXRcbn1cblxuLyoqXG4gKiBFdmVudFRhcmdldC5cbiAqXG4gKiAtIFRoaXMgaXMgY29uc3RydWN0b3IgaWYgbm8gYXJndW1lbnRzLlxuICogLSBUaGlzIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIEN1c3RvbUV2ZW50VGFyZ2V0IGNvbnN0cnVjdG9yIGlmIHRoZXJlIGFyZSBhcmd1bWVudHMuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGNsYXNzIEEgZXh0ZW5kcyBFdmVudFRhcmdldCB7fVxuICogICAgIGNsYXNzIEIgZXh0ZW5kcyBFdmVudFRhcmdldChcIm1lc3NhZ2VcIikge31cbiAqICAgICBjbGFzcyBDIGV4dGVuZHMgRXZlbnRUYXJnZXQoXCJtZXNzYWdlXCIsIFwiZXJyb3JcIikge31cbiAqICAgICBjbGFzcyBEIGV4dGVuZHMgRXZlbnRUYXJnZXQoW1wibWVzc2FnZVwiLCBcImVycm9yXCJdKSB7fVxuICovXG5mdW5jdGlvbiBFdmVudFRhcmdldCgpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBFdmVudFRhcmdldCkge1xuICAgICAgICBsaXN0ZW5lcnNNYXAuc2V0KHRoaXMsIG5ldyBNYXAoKSk7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0KGFyZ3VtZW50c1swXSlcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdHlwZXNbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0KHR5cGVzKVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpXG4gICAgLyplc2xpbnQtZW5hYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG59XG5cbi8vIFNob3VsZCBiZSBlbnVtZXJhYmxlLCBidXQgY2xhc3MgbWV0aG9kcyBhcmUgbm90IGVudW1lcmFibGUuXG5FdmVudFRhcmdldC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQWRkIGEgZ2l2ZW4gbGlzdGVuZXIgdG8gdGhpcyBldmVudCB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZSB0byBhZGQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58e2NhcHR1cmU/OmJvb2xlYW4scGFzc2l2ZT86Ym9vbGVhbixvbmNlPzpib29sZWFufX0gW29wdGlvbnNdIFRoZSBvcHRpb25zIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgICAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiICYmICFpc09iamVjdChsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCInbGlzdGVuZXInIHNob3VsZCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC5cIilcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGdldExpc3RlbmVycyh0aGlzKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uc0lzT2JqID0gaXNPYmplY3Qob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBvcHRpb25zSXNPYmpcbiAgICAgICAgICAgID8gQm9vbGVhbihvcHRpb25zLmNhcHR1cmUpXG4gICAgICAgICAgICA6IEJvb2xlYW4ob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyVHlwZSA9IGNhcHR1cmUgPyBDQVBUVVJFIDogQlVCQkxFO1xuICAgICAgICBjb25zdCBuZXdOb2RlID0ge1xuICAgICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgICBsaXN0ZW5lclR5cGUsXG4gICAgICAgICAgICBwYXNzaXZlOiBvcHRpb25zSXNPYmogJiYgQm9vbGVhbihvcHRpb25zLnBhc3NpdmUpLFxuICAgICAgICAgICAgb25jZTogb3B0aW9uc0lzT2JqICYmIEJvb2xlYW4ob3B0aW9ucy5vbmNlKSxcbiAgICAgICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU2V0IGl0IGFzIHRoZSBmaXJzdCBub2RlIGlmIHRoZSBmaXJzdCBub2RlIGlzIG51bGwuXG4gICAgICAgIGxldCBub2RlID0gbGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuICAgICAgICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbmV3Tm9kZSk7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYXZlcnNlIHRvIHRoZSB0YWlsIHdoaWxlIGNoZWNraW5nIGR1cGxpY2F0aW9uLi5cbiAgICAgICAgbGV0IHByZXYgPSBudWxsO1xuICAgICAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbm9kZS5saXN0ZW5lciA9PT0gbGlzdGVuZXIgJiZcbiAgICAgICAgICAgICAgICBub2RlLmxpc3RlbmVyVHlwZSA9PT0gbGlzdGVuZXJUeXBlXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBTaG91bGQgaWdub3JlIGR1cGxpY2F0aW9uLlxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldiA9IG5vZGU7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGl0LlxuICAgICAgICBwcmV2Lm5leHQgPSBuZXdOb2RlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBnaXZlbiBsaXN0ZW5lciBmcm9tIHRoaXMgZXZlbnQgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufHtjYXB0dXJlPzpib29sZWFuLHBhc3NpdmU/OmJvb2xlYW4sb25jZT86Ym9vbGVhbn19IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICBjb25zdCBjYXB0dXJlID0gaXNPYmplY3Qob3B0aW9ucylcbiAgICAgICAgICAgID8gQm9vbGVhbihvcHRpb25zLmNhcHR1cmUpXG4gICAgICAgICAgICA6IEJvb2xlYW4ob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyVHlwZSA9IGNhcHR1cmUgPyBDQVBUVVJFIDogQlVCQkxFO1xuXG4gICAgICAgIGxldCBwcmV2ID0gbnVsbDtcbiAgICAgICAgbGV0IG5vZGUgPSBsaXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk7XG4gICAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBub2RlLmxpc3RlbmVyID09PSBsaXN0ZW5lciAmJlxuICAgICAgICAgICAgICAgIG5vZGUubGlzdGVuZXJUeXBlID09PSBsaXN0ZW5lclR5cGVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUubmV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2ggYSBnaXZlbiBldmVudC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fHt0eXBlOnN0cmluZ319IGV2ZW50IFRoZSBldmVudCB0byBkaXNwYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYGZhbHNlYCBpZiBjYW5jZWxlZC5cbiAgICAgKi9cbiAgICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCA9PSBudWxsIHx8IHR5cGVvZiBldmVudC50eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV2ZW50LnR5cGVcIiBzaG91bGQgYmUgYSBzdHJpbmcuJylcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGxpc3RlbmVycyBhcmVuJ3QgcmVnaXN0ZXJlZCwgdGVybWluYXRlLlxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGV2ZW50LnR5cGU7XG4gICAgICAgIGxldCBub2RlID0gbGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuICAgICAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2luY2Ugd2UgY2Fubm90IHJld3JpdGUgc2V2ZXJhbCBwcm9wZXJ0aWVzLCBzbyB3cmFwIG9iamVjdC5cbiAgICAgICAgY29uc3Qgd3JhcHBlZEV2ZW50ID0gd3JhcEV2ZW50KHRoaXMsIGV2ZW50KTtcblxuICAgICAgICAvLyBUaGlzIGRvZXNuJ3QgcHJvY2VzcyBjYXB0dXJpbmcgcGhhc2UgYW5kIGJ1YmJsaW5nIHBoYXNlLlxuICAgICAgICAvLyBUaGlzIGlzbid0IHBhcnRpY2lwYXRpbmcgaW4gYSB0cmVlLlxuICAgICAgICBsZXQgcHJldiA9IG51bGw7XG4gICAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGlzIGxpc3RlbmVyIGlmIGl0J3Mgb25jZVxuICAgICAgICAgICAgaWYgKG5vZGUub25jZSkge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUubmV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsbCB0aGlzIGxpc3RlbmVyXG4gICAgICAgICAgICBzZXRQYXNzaXZlTGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgd3JhcHBlZEV2ZW50LFxuICAgICAgICAgICAgICAgIG5vZGUucGFzc2l2ZSA/IG5vZGUubGlzdGVuZXIgOiBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBub2RlLmxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmxpc3RlbmVyLmNhbGwodGhpcywgd3JhcHBlZEV2ZW50KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIG5vZGUubGlzdGVuZXJUeXBlICE9PSBBVFRSSUJVVEUgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygbm9kZS5saXN0ZW5lci5oYW5kbGVFdmVudCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBub2RlLmxpc3RlbmVyLmhhbmRsZUV2ZW50KHdyYXBwZWRFdmVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEJyZWFrIGlmIGBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25gIHdhcyBjYWxsZWQuXG4gICAgICAgICAgICBpZiAoaXNTdG9wcGVkKHdyYXBwZWRFdmVudCkpIHtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHNldFBhc3NpdmVMaXN0ZW5lcih3cmFwcGVkRXZlbnQsIG51bGwpO1xuICAgICAgICBzZXRFdmVudFBoYXNlKHdyYXBwZWRFdmVudCwgMCk7XG4gICAgICAgIHNldEN1cnJlbnRUYXJnZXQod3JhcHBlZEV2ZW50LCBudWxsKTtcblxuICAgICAgICByZXR1cm4gIXdyYXBwZWRFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgfSxcbn07XG5cbi8vIGBjb25zdHJ1Y3RvcmAgaXMgbm90IGVudW1lcmFibGUuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRUYXJnZXQucHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgICB2YWx1ZTogRXZlbnRUYXJnZXQsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxufSk7XG5cbi8vIEVuc3VyZSBgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnRUYXJnZXRgIGlzIGB0cnVlYC5cbmlmIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHdpbmRvdy5FdmVudFRhcmdldCAhPT0gXCJ1bmRlZmluZWRcIlxuKSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKEV2ZW50VGFyZ2V0LnByb3RvdHlwZSwgd2luZG93LkV2ZW50VGFyZ2V0LnByb3RvdHlwZSk7XG59XG5cbi8qKlxuICogQGF1dGhvciBUb3J1IE5hZ2FzaGltYSA8aHR0cHM6Ly9naXRodWIuY29tL215c3RpY2F0ZWE+XG4gKiBTZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZGlyZWN0b3J5IGZvciBmdWxsIGxpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBUaGUgc2lnbmFsIGNsYXNzLlxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2Fib3J0c2lnbmFsXG4gKi9cbmNsYXNzIEFib3J0U2lnbmFsIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAgIC8qKlxuICAgICAqIEFib3J0U2lnbmFsIGNhbm5vdCBiZSBjb25zdHJ1Y3RlZCBkaXJlY3RseS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFib3J0U2lnbmFsIGNhbm5vdCBiZSBjb25zdHJ1Y3RlZCBkaXJlY3RseVwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBgQWJvcnRTaWduYWxgJ3MgYEFib3J0Q29udHJvbGxlcmAgaGFzIHNpZ25hbGVkIHRvIGFib3J0LCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZ2V0IGFib3J0ZWQoKSB7XG4gICAgICAgIGNvbnN0IGFib3J0ZWQgPSBhYm9ydGVkRmxhZ3MuZ2V0KHRoaXMpO1xuICAgICAgICBpZiAodHlwZW9mIGFib3J0ZWQgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCAndGhpcycgdG8gYmUgYW4gJ0Fib3J0U2lnbmFsJyBvYmplY3QsIGJ1dCBnb3QgJHt0aGlzID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2YgdGhpc31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWJvcnRlZDtcbiAgICB9XG59XG5kZWZpbmVFdmVudEF0dHJpYnV0ZShBYm9ydFNpZ25hbC5wcm90b3R5cGUsIFwiYWJvcnRcIik7XG4vKipcbiAqIENyZWF0ZSBhbiBBYm9ydFNpZ25hbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFib3J0U2lnbmFsKCkge1xuICAgIGNvbnN0IHNpZ25hbCA9IE9iamVjdC5jcmVhdGUoQWJvcnRTaWduYWwucHJvdG90eXBlKTtcbiAgICBFdmVudFRhcmdldC5jYWxsKHNpZ25hbCk7XG4gICAgYWJvcnRlZEZsYWdzLnNldChzaWduYWwsIGZhbHNlKTtcbiAgICByZXR1cm4gc2lnbmFsO1xufVxuLyoqXG4gKiBBYm9ydCBhIGdpdmVuIHNpZ25hbC5cbiAqL1xuZnVuY3Rpb24gYWJvcnRTaWduYWwoc2lnbmFsKSB7XG4gICAgaWYgKGFib3J0ZWRGbGFncy5nZXQoc2lnbmFsKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhYm9ydGVkRmxhZ3Muc2V0KHNpZ25hbCwgdHJ1ZSk7XG4gICAgc2lnbmFsLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcImFib3J0XCIgfSk7XG59XG4vKipcbiAqIEFib3J0ZWQgZmxhZyBmb3IgZWFjaCBpbnN0YW5jZXMuXG4gKi9cbmNvbnN0IGFib3J0ZWRGbGFncyA9IG5ldyBXZWFrTWFwKCk7XG4vLyBQcm9wZXJ0aWVzIHNob3VsZCBiZSBlbnVtZXJhYmxlLlxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQWJvcnRTaWduYWwucHJvdG90eXBlLCB7XG4gICAgYWJvcnRlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG59KTtcbi8vIGB0b1N0cmluZygpYCBzaG91bGQgcmV0dXJuIGBcIltvYmplY3QgQWJvcnRTaWduYWxdXCJgXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09IFwic3ltYm9sXCIpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJvcnRTaWduYWwucHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogXCJBYm9ydFNpZ25hbFwiLFxuICAgIH0pO1xufVxuXG4vKipcbiAqIFRoZSBBYm9ydENvbnRyb2xsZXIuXG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jYWJvcnRjb250cm9sbGVyXG4gKi9cbmNsYXNzIEFib3J0Q29udHJvbGxlciQxIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoaXMgY29udHJvbGxlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc2lnbmFscy5zZXQodGhpcywgY3JlYXRlQWJvcnRTaWduYWwoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBBYm9ydFNpZ25hbGAgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQgc2lnbmFsKCkge1xuICAgICAgICByZXR1cm4gZ2V0U2lnbmFsKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBYm9ydCBhbmQgc2lnbmFsIHRvIGFueSBvYnNlcnZlcnMgdGhhdCB0aGUgYXNzb2NpYXRlZCBhY3Rpdml0eSBpcyB0byBiZSBhYm9ydGVkLlxuICAgICAqL1xuICAgIGFib3J0KCkge1xuICAgICAgICBhYm9ydFNpZ25hbChnZXRTaWduYWwodGhpcykpO1xuICAgIH1cbn1cbi8qKlxuICogQXNzb2NpYXRlZCBzaWduYWxzLlxuICovXG5jb25zdCBzaWduYWxzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogR2V0IHRoZSBhc3NvY2lhdGVkIHNpZ25hbCBvZiBhIGdpdmVuIGNvbnRyb2xsZXIuXG4gKi9cbmZ1bmN0aW9uIGdldFNpZ25hbChjb250cm9sbGVyKSB7XG4gICAgY29uc3Qgc2lnbmFsID0gc2lnbmFscy5nZXQoY29udHJvbGxlcik7XG4gICAgaWYgKHNpZ25hbCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkICd0aGlzJyB0byBiZSBhbiAnQWJvcnRDb250cm9sbGVyJyBvYmplY3QsIGJ1dCBnb3QgJHtjb250cm9sbGVyID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2YgY29udHJvbGxlcn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpZ25hbDtcbn1cbi8vIFByb3BlcnRpZXMgc2hvdWxkIGJlIGVudW1lcmFibGUuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBYm9ydENvbnRyb2xsZXIkMS5wcm90b3R5cGUsIHtcbiAgICBzaWduYWw6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIGFib3J0OiB7IGVudW1lcmFibGU6IHRydWUgfSxcbn0pO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSBcInN5bWJvbFwiKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFib3J0Q29udHJvbGxlciQxLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IFwiQWJvcnRDb250cm9sbGVyXCIsXG4gICAgfSk7XG59XG5cbmV4cG9ydHMuQWJvcnRDb250cm9sbGVyID0gQWJvcnRDb250cm9sbGVyJDE7XG5leHBvcnRzLkFib3J0RXJyb3IgPSBBYm9ydEVycm9yO1xuZXhwb3J0cy5GZXRjaEVycm9yID0gRmV0Y2hFcnJvcjtcbmV4cG9ydHMuRmlsZSA9IEZpbGUkMTtcbmV4cG9ydHMuRm9ybURhdGEgPSBGb3JtRGF0YTtcbmV4cG9ydHMuSGVhZGVycyA9IEhlYWRlcnM7XG5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuZXhwb3J0cy5SZXNwb25zZSA9IFJlc3BvbnNlO1xuZXhwb3J0cy5fQmxvYiA9IF9CbG9iJDE7XG5leHBvcnRzLmZldGNoID0gZmV0Y2g7XG5leHBvcnRzLmlzUmVkaXJlY3QgPSBpc1JlZGlyZWN0O1xuZXhwb3J0cy5ub2RlRG9tZXhjZXB0aW9uID0gbm9kZURvbWV4Y2VwdGlvbjtcbiJdLCJuYW1lcyI6WyJodHRwIiwicmVxdWlyZSIsImh0dHBzIiwiemxpYiIsIlN0cmVhbSIsIm5vZGVfYnVmZmVyIiwibm9kZV91dGlsIiwibm9kZV91cmwiLCJub2RlX25ldCIsImRhdGFVcmlUb0J1ZmZlciIsInVyaSIsInRlc3QiLCJUeXBlRXJyb3IiLCJyZXBsYWNlIiwiZmlyc3RDb21tYSIsImluZGV4T2YiLCJtZXRhIiwic3Vic3RyaW5nIiwic3BsaXQiLCJjaGFyc2V0IiwiYmFzZTY0IiwidHlwZSIsInR5cGVGdWxsIiwiaSIsImxlbmd0aCIsImVuY29kaW5nIiwiZGF0YSIsInVuZXNjYXBlIiwiYnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJwb255ZmlsbF9lczIwMTgiLCJleHBvcnRzIiwiaGFzUmVxdWlyZWRQb255ZmlsbF9lczIwMTgiLCJyZXF1aXJlUG9ueWZpbGxfZXMyMDE4IiwibW9kdWxlIiwiZmFjdG9yeSIsIlN5bWJvbFBvbHlmaWxsIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJkZXNjcmlwdGlvbiIsIm5vb3AiLCJ1bmRlZmluZWQiLCJnZXRHbG9iYWxzIiwiZ2xvYmFscyIsInR5cGVJc09iamVjdCIsIngiLCJyZXRocm93QXNzZXJ0aW9uRXJyb3JSZWplY3Rpb24iLCJvcmlnaW5hbFByb21pc2UiLCJQcm9taXNlIiwib3JpZ2luYWxQcm9taXNlVGhlbiIsInByb3RvdHlwZSIsInRoZW4iLCJvcmlnaW5hbFByb21pc2VSZXNvbHZlIiwicmVzb2x2ZSIsImJpbmQiLCJvcmlnaW5hbFByb21pc2VSZWplY3QiLCJyZWplY3QiLCJuZXdQcm9taXNlIiwiZXhlY3V0b3IiLCJwcm9taXNlUmVzb2x2ZWRXaXRoIiwidmFsdWUiLCJwcm9taXNlUmVqZWN0ZWRXaXRoIiwicmVhc29uIiwiUGVyZm9ybVByb21pc2VUaGVuIiwicHJvbWlzZSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhbGwiLCJ1cG9uUHJvbWlzZSIsInVwb25GdWxmaWxsbWVudCIsInVwb25SZWplY3Rpb24iLCJ0cmFuc2Zvcm1Qcm9taXNlV2l0aCIsImZ1bGZpbGxtZW50SGFuZGxlciIsInJlamVjdGlvbkhhbmRsZXIiLCJzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlIiwicXVldWVNaWNyb3Rhc2siLCJnbG9iYWxRdWV1ZU1pY3JvdGFzayIsInJlc29sdmVkUHJvbWlzZSIsImZuIiwicmVmbGVjdENhbGwiLCJGIiwiViIsImFyZ3MiLCJGdW5jdGlvbiIsImFwcGx5IiwicHJvbWlzZUNhbGwiLCJRVUVVRV9NQVhfQVJSQVlfU0laRSIsIlNpbXBsZVF1ZXVlIiwiY29uc3RydWN0b3IiLCJfY3Vyc29yIiwiX3NpemUiLCJfZnJvbnQiLCJfZWxlbWVudHMiLCJfbmV4dCIsIl9iYWNrIiwicHVzaCIsImVsZW1lbnQiLCJvbGRCYWNrIiwibmV3QmFjayIsInNoaWZ0Iiwib2xkRnJvbnQiLCJuZXdGcm9udCIsIm9sZEN1cnNvciIsIm5ld0N1cnNvciIsImVsZW1lbnRzIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwibm9kZSIsInBlZWsiLCJmcm9udCIsImN1cnNvciIsIlJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0luaXRpYWxpemUiLCJyZWFkZXIiLCJzdHJlYW0iLCJfb3duZXJSZWFkYWJsZVN0cmVhbSIsIl9yZWFkZXIiLCJfc3RhdGUiLCJkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUiLCJkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkIiwiZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZCIsIl9zdG9yZWRFcnJvciIsIlJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbCIsIlJlYWRhYmxlU3RyZWFtQ2FuY2VsIiwiUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZSIsImRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVqZWN0IiwiZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNldFRvUmVqZWN0ZWQiLCJyZWFkZXJMb2NrRXhjZXB0aW9uIiwibmFtZSIsIl9jbG9zZWRQcm9taXNlIiwiX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSIsIl9jbG9zZWRQcm9taXNlX3JlamVjdCIsImRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVzb2x2ZSIsIkFib3J0U3RlcHMiLCJFcnJvclN0ZXBzIiwiQ2FuY2VsU3RlcHMiLCJQdWxsU3RlcHMiLCJOdW1iZXJJc0Zpbml0ZSIsIk51bWJlciIsImlzRmluaXRlIiwiTWF0aFRydW5jIiwiTWF0aCIsInRydW5jIiwidiIsImNlaWwiLCJmbG9vciIsImlzRGljdGlvbmFyeSIsImFzc2VydERpY3Rpb25hcnkiLCJvYmoiLCJjb250ZXh0IiwiYXNzZXJ0RnVuY3Rpb24iLCJpc09iamVjdCIsImFzc2VydE9iamVjdCIsImFzc2VydFJlcXVpcmVkQXJndW1lbnQiLCJwb3NpdGlvbiIsImFzc2VydFJlcXVpcmVkRmllbGQiLCJmaWVsZCIsImNvbnZlcnRVbnJlc3RyaWN0ZWREb3VibGUiLCJjZW5zb3JOZWdhdGl2ZVplcm8iLCJpbnRlZ2VyUGFydCIsImNvbnZlcnRVbnNpZ25lZExvbmdMb25nV2l0aEVuZm9yY2VSYW5nZSIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiTUFYX1NBRkVfSU5URUdFUiIsImFzc2VydFJlYWRhYmxlU3RyZWFtIiwiSXNSZWFkYWJsZVN0cmVhbSIsIkFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIiLCJSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0IiwicmVhZFJlcXVlc3QiLCJfcmVhZFJlcXVlc3RzIiwiUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3QiLCJjaHVuayIsImRvbmUiLCJfY2xvc2VTdGVwcyIsIl9jaHVua1N0ZXBzIiwiUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkUmVxdWVzdHMiLCJSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXIiLCJJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlciIsIklzUmVhZGFibGVTdHJlYW1Mb2NrZWQiLCJjbG9zZWQiLCJkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbiIsImNhbmNlbCIsInJlYWQiLCJyZXNvbHZlUHJvbWlzZSIsInJlamVjdFByb21pc2UiLCJfZXJyb3JTdGVwcyIsImUiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJSZWFkIiwicmVsZWFzZUxvY2siLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bWVyYWJsZSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9kaXN0dXJiZWQiLCJfcmVhZGFibGVTdHJlYW1Db250cm9sbGVyIiwiQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwiUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9ySW1wbCIsInByZXZlbnRDYW5jZWwiLCJfb25nb2luZ1Byb21pc2UiLCJfaXNGaW5pc2hlZCIsIl9wcmV2ZW50Q2FuY2VsIiwibmV4dCIsIm5leHRTdGVwcyIsIl9uZXh0U3RlcHMiLCJyZXR1cm4iLCJyZXR1cm5TdGVwcyIsIl9yZXR1cm5TdGVwcyIsInJlc3VsdCIsIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsIklzUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yIiwic3RyZWFtQXN5bmNJdGVyYXRvckJyYW5kQ2hlY2tFeGNlcHRpb24iLCJfYXN5bmNJdGVyYXRvckltcGwiLCJzZXRQcm90b3R5cGVPZiIsIkFjcXVpcmVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IiLCJpbXBsIiwiY3JlYXRlIiwiX2EiLCJOdW1iZXJJc05hTiIsImlzTmFOIiwiQ3JlYXRlQXJyYXlGcm9tTGlzdCIsInNsaWNlIiwiQ29weURhdGFCbG9ja0J5dGVzIiwiZGVzdCIsImRlc3RPZmZzZXQiLCJzcmMiLCJzcmNPZmZzZXQiLCJuIiwiVWludDhBcnJheSIsInNldCIsIlRyYW5zZmVyQXJyYXlCdWZmZXIiLCJPIiwiSXNEZXRhY2hlZEJ1ZmZlciIsIkFycmF5QnVmZmVyU2xpY2UiLCJiZWdpbiIsImVuZCIsIkFycmF5QnVmZmVyIiwiSXNOb25OZWdhdGl2ZU51bWJlciIsIkNsb25lQXNVaW50OEFycmF5IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJEZXF1ZXVlVmFsdWUiLCJjb250YWluZXIiLCJwYWlyIiwiX3F1ZXVlIiwiX3F1ZXVlVG90YWxTaXplIiwic2l6ZSIsIkVucXVldWVWYWx1ZVdpdGhTaXplIiwiSW5maW5pdHkiLCJSYW5nZUVycm9yIiwiUGVla1F1ZXVlVmFsdWUiLCJSZXNldFF1ZXVlIiwiUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCIsInZpZXciLCJJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QiLCJieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24iLCJfdmlldyIsInJlc3BvbmQiLCJieXRlc1dyaXR0ZW4iLCJfYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZCIsInJlc3BvbmRXaXRoTmV3VmlldyIsImlzVmlldyIsIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kV2l0aE5ld1ZpZXciLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyIiwiYnlvYlJlcXVlc3QiLCJJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIiLCJieXRlU3RyZWFtQ29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24iLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyR2V0QllPQlJlcXVlc3QiLCJkZXNpcmVkU2l6ZSIsIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZSIsImNsb3NlIiwiX2Nsb3NlUmVxdWVzdGVkIiwic3RhdGUiLCJfY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSIsIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbG9zZSIsImVucXVldWUiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZSIsImVycm9yIiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yIiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyUGVuZGluZ1B1bGxJbnRvcyIsIl9jYW5jZWxBbGdvcml0aG0iLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJBbGdvcml0aG1zIiwiZW50cnkiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbiIsImF1dG9BbGxvY2F0ZUNodW5rU2l6ZSIsIl9hdXRvQWxsb2NhdGVDaHVua1NpemUiLCJidWZmZXJFIiwicHVsbEludG9EZXNjcmlwdG9yIiwiYnVmZmVyQnl0ZUxlbmd0aCIsImJ5dGVzRmlsbGVkIiwiZWxlbWVudFNpemUiLCJ2aWV3Q29uc3RydWN0b3IiLCJyZWFkZXJUeXBlIiwiX3BlbmRpbmdQdWxsSW50b3MiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCIsImNvbnRyb2xsZXIiLCJzaG91bGRQdWxsIiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNob3VsZENhbGxQdWxsIiwiX3B1bGxpbmciLCJfcHVsbEFnYWluIiwicHVsbFByb21pc2UiLCJfcHVsbEFsZ29yaXRobSIsIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJJbnZhbGlkYXRlQllPQlJlcXVlc3QiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29tbWl0UHVsbEludG9EZXNjcmlwdG9yIiwiZmlsbGVkVmlldyIsIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb252ZXJ0UHVsbEludG9EZXNjcmlwdG9yIiwiUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZEludG9SZXF1ZXN0IiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbFB1bGxJbnRvRGVzY3JpcHRvckZyb21RdWV1ZSIsImN1cnJlbnRBbGlnbmVkQnl0ZXMiLCJtYXhCeXRlc1RvQ29weSIsIm1pbiIsIm1heEJ5dGVzRmlsbGVkIiwibWF4QWxpZ25lZEJ5dGVzIiwidG90YWxCeXRlc1RvQ29weVJlbWFpbmluZyIsInJlYWR5IiwicXVldWUiLCJoZWFkT2ZRdWV1ZSIsImJ5dGVzVG9Db3B5IiwiZGVzdFN0YXJ0IiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxIZWFkUHVsbEludG9EZXNjcmlwdG9yIiwiUmVhZGFibGVTdHJlYW1DbG9zZSIsIl9ieW9iUmVxdWVzdCIsIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJQcm9jZXNzUHVsbEludG9EZXNjcmlwdG9yc1VzaW5nUXVldWUiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8iLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHVsbEludG8iLCJyZWFkSW50b1JlcXVlc3QiLCJEYXRhVmlldyIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiY3RvciIsIlJlYWRhYmxlU3RyZWFtQWRkUmVhZEludG9SZXF1ZXN0IiwiZW1wdHlWaWV3IiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbkNsb3NlZFN0YXRlIiwiZmlyc3REZXNjcmlwdG9yIiwiUmVhZGFibGVTdHJlYW1IYXNCWU9CUmVhZGVyIiwiUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkSW50b1JlcXVlc3RzIiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJblJlYWRhYmxlU3RhdGUiLCJyZW1haW5kZXJTaXplIiwicmVtYWluZGVyIiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbnRlcm5hbCIsImRlc2NyaXB0b3IiLCJfc3RhcnRlZCIsImZpcnN0UGVuZGluZ1B1bGxJbnRvIiwidHJhbnNmZXJyZWRCdWZmZXIiLCJ0cmFuc2ZlcnJlZFZpZXciLCJSZWFkYWJsZVN0cmVhbUVycm9yIiwiU2V0VXBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0IiwiX3N0cmF0ZWd5SFdNIiwidmlld0J5dGVMZW5ndGgiLCJTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIiLCJzdGFydEFsZ29yaXRobSIsInB1bGxBbGdvcml0aG0iLCJjYW5jZWxBbGdvcml0aG0iLCJoaWdoV2F0ZXJNYXJrIiwic3RhcnRSZXN1bHQiLCJyIiwiU2V0VXBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRnJvbVVuZGVybHlpbmdTb3VyY2UiLCJ1bmRlcmx5aW5nQnl0ZVNvdXJjZSIsInN0YXJ0IiwicHVsbCIsInJlcXVlc3QiLCJBY3F1aXJlUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyIiwiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyIiwiX3JlYWRJbnRvUmVxdWVzdHMiLCJJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlciIsImJ5b2JSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uIiwiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyUmVhZCIsIkV4dHJhY3RIaWdoV2F0ZXJNYXJrIiwic3RyYXRlZ3kiLCJkZWZhdWx0SFdNIiwiRXh0cmFjdFNpemVBbGdvcml0aG0iLCJjb252ZXJ0UXVldWluZ1N0cmF0ZWd5IiwiaW5pdCIsImNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lTaXplIiwiY29udmVydFVuZGVybHlpbmdTaW5rIiwib3JpZ2luYWwiLCJhYm9ydCIsIndyaXRlIiwiY29udmVydFVuZGVybHlpbmdTaW5rQWJvcnRDYWxsYmFjayIsImNvbnZlcnRVbmRlcmx5aW5nU2lua0Nsb3NlQ2FsbGJhY2siLCJjb252ZXJ0VW5kZXJseWluZ1NpbmtTdGFydENhbGxiYWNrIiwiY29udmVydFVuZGVybHlpbmdTaW5rV3JpdGVDYWxsYmFjayIsImFzc2VydFdyaXRhYmxlU3RyZWFtIiwiSXNXcml0YWJsZVN0cmVhbSIsImlzQWJvcnRTaWduYWwiLCJhYm9ydGVkIiwic3VwcG9ydHNBYm9ydENvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJjcmVhdGVBYm9ydENvbnRyb2xsZXIiLCJXcml0YWJsZVN0cmVhbSIsInJhd1VuZGVybHlpbmdTaW5rIiwicmF3U3RyYXRlZ3kiLCJ1bmRlcmx5aW5nU2luayIsIkluaXRpYWxpemVXcml0YWJsZVN0cmVhbSIsInNpemVBbGdvcml0aG0iLCJTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NpbmsiLCJsb2NrZWQiLCJzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDIiLCJJc1dyaXRhYmxlU3RyZWFtTG9ja2VkIiwiV3JpdGFibGVTdHJlYW1BYm9ydCIsIldyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0IiwiV3JpdGFibGVTdHJlYW1DbG9zZSIsImdldFdyaXRlciIsIkFjcXVpcmVXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIiLCJDcmVhdGVXcml0YWJsZVN0cmVhbSIsIndyaXRlQWxnb3JpdGhtIiwiY2xvc2VBbGdvcml0aG0iLCJhYm9ydEFsZ29yaXRobSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIiLCJTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIiLCJfd3JpdGVyIiwiX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlciIsIl93cml0ZVJlcXVlc3RzIiwiX2luRmxpZ2h0V3JpdGVSZXF1ZXN0IiwiX2Nsb3NlUmVxdWVzdCIsIl9pbkZsaWdodENsb3NlUmVxdWVzdCIsIl9wZW5kaW5nQWJvcnRSZXF1ZXN0IiwiX2JhY2twcmVzc3VyZSIsIl9hYm9ydFJlYXNvbiIsIl9hYm9ydENvbnRyb2xsZXIiLCJfcHJvbWlzZSIsIndhc0FscmVhZHlFcnJvcmluZyIsIl9yZXNvbHZlIiwiX3JlamVjdCIsIl9yZWFzb24iLCJfd2FzQWxyZWFkeUVycm9yaW5nIiwiV3JpdGFibGVTdHJlYW1TdGFydEVycm9yaW5nIiwiY2xvc2VSZXF1ZXN0Iiwid3JpdGVyIiwiZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmUiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UiLCJXcml0YWJsZVN0cmVhbUFkZFdyaXRlUmVxdWVzdCIsIndyaXRlUmVxdWVzdCIsIldyaXRhYmxlU3RyZWFtRGVhbFdpdGhSZWplY3Rpb24iLCJXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyRW5zdXJlUmVhZHlQcm9taXNlUmVqZWN0ZWQiLCJXcml0YWJsZVN0cmVhbUhhc09wZXJhdGlvbk1hcmtlZEluRmxpZ2h0Iiwic3RvcmVkRXJyb3IiLCJXcml0YWJsZVN0cmVhbVJlamVjdENsb3NlQW5kQ2xvc2VkUHJvbWlzZUlmTmVlZGVkIiwiYWJvcnRSZXF1ZXN0IiwiV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlIiwiV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlV2l0aEVycm9yIiwiV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlIiwiZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNvbHZlIiwiV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlV2l0aEVycm9yIiwiV3JpdGFibGVTdHJlYW1NYXJrQ2xvc2VSZXF1ZXN0SW5GbGlnaHQiLCJXcml0YWJsZVN0cmVhbU1hcmtGaXJzdFdyaXRlUmVxdWVzdEluRmxpZ2h0IiwiZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZWplY3QiLCJXcml0YWJsZVN0cmVhbVVwZGF0ZUJhY2twcmVzc3VyZSIsImJhY2twcmVzc3VyZSIsImRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldCIsIl9vd25lcldyaXRhYmxlU3RyZWFtIiwiZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUiLCJkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWQiLCJkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUiLCJkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQiLCJkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkIiwiZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZCIsIklzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyIiwiZGVmYXVsdFdyaXRlckJyYW5kQ2hlY2tFeGNlcHRpb24iLCJkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbiIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckdldERlc2lyZWRTaXplIiwiX3JlYWR5UHJvbWlzZSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckFib3J0IiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQ2xvc2UiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJSZWxlYXNlIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJDbG9zZVdpdGhFcnJvclByb3BhZ2F0aW9uIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyRW5zdXJlQ2xvc2VkUHJvbWlzZVJlamVjdGVkIiwiX2Nsb3NlZFByb21pc2VTdGF0ZSIsImRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzZXRUb1JlamVjdGVkIiwiX3JlYWR5UHJvbWlzZVN0YXRlIiwiZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCIsImRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFRvUmVqZWN0ZWQiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUiLCJyZWxlYXNlZEVycm9yIiwiY2h1bmtTaXplIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldENodW5rU2l6ZSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJXcml0ZSIsImNsb3NlU2VudGluZWwiLCJhYm9ydFJlYXNvbiIsIklzV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciIsImRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQyIiwic2lnbmFsIiwiX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvciIsIl9hYm9ydEFsZ29yaXRobSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMiLCJfc3RyYXRlZ3lTaXplQWxnb3JpdGhtIiwiX3dyaXRlQWxnb3JpdGhtIiwiX2Nsb3NlQWxnb3JpdGhtIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZSIsInN0YXJ0UHJvbWlzZSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJBZHZhbmNlUXVldWVJZk5lZWRlZCIsImNodW5rU2l6ZUUiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3JJZk5lZWRlZCIsImVucXVldWVFIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclByb2Nlc3NDbG9zZSIsIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJQcm9jZXNzV3JpdGUiLCJzaW5rQ2xvc2VQcm9taXNlIiwic2lua1dyaXRlUHJvbWlzZSIsIl9yZWFkeVByb21pc2VfcmVzb2x2ZSIsIl9yZWFkeVByb21pc2VfcmVqZWN0IiwiTmF0aXZlRE9NRXhjZXB0aW9uIiwiRE9NRXhjZXB0aW9uIiwiaXNET01FeGNlcHRpb25Db25zdHJ1Y3RvciIsImNyZWF0ZURPTUV4Y2VwdGlvblBvbHlmaWxsIiwibWVzc2FnZSIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ3cml0YWJsZSIsIkRPTUV4Y2VwdGlvbiQxIiwiUmVhZGFibGVTdHJlYW1QaXBlVG8iLCJzb3VyY2UiLCJwcmV2ZW50Q2xvc2UiLCJwcmV2ZW50QWJvcnQiLCJzaHV0dGluZ0Rvd24iLCJjdXJyZW50V3JpdGUiLCJhY3Rpb25zIiwic2h1dGRvd25XaXRoQWN0aW9uIiwiYWxsIiwibWFwIiwiYWN0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBpcGVMb29wIiwicmVzb2x2ZUxvb3AiLCJyZWplY3RMb29wIiwicGlwZVN0ZXAiLCJyZXNvbHZlUmVhZCIsInJlamVjdFJlYWQiLCJpc09yQmVjb21lc0Vycm9yZWQiLCJzaHV0ZG93biIsImlzT3JCZWNvbWVzQ2xvc2VkIiwiZGVzdENsb3NlZCIsIndhaXRGb3JXcml0ZXNUb0ZpbmlzaCIsIm9sZEN1cnJlbnRXcml0ZSIsIm9yaWdpbmFsSXNFcnJvciIsIm9yaWdpbmFsRXJyb3IiLCJkb1RoZVJlc3QiLCJmaW5hbGl6ZSIsIm5ld0Vycm9yIiwiaXNFcnJvciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIiwiSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIiwiZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDEiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZSIsIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvciIsIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMiLCJfY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtIiwiUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyU2hvdWxkQ2FsbFB1bGwiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVySGFzQmFja3ByZXNzdXJlIiwiU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIiwiU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRnJvbVVuZGVybHlpbmdTb3VyY2UiLCJ1bmRlcmx5aW5nU291cmNlIiwiUmVhZGFibGVTdHJlYW1UZWUiLCJjbG9uZUZvckJyYW5jaDIiLCJSZWFkYWJsZUJ5dGVTdHJlYW1UZWUiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRUZWUiLCJyZWFkaW5nIiwicmVhZEFnYWluIiwiY2FuY2VsZWQxIiwiY2FuY2VsZWQyIiwicmVhc29uMSIsInJlYXNvbjIiLCJicmFuY2gxIiwiYnJhbmNoMiIsInJlc29sdmVDYW5jZWxQcm9taXNlIiwiY2FuY2VsUHJvbWlzZSIsImNodW5rMSIsImNodW5rMiIsImNhbmNlbDFBbGdvcml0aG0iLCJjb21wb3NpdGVSZWFzb24iLCJjYW5jZWxSZXN1bHQiLCJjYW5jZWwyQWxnb3JpdGhtIiwiQ3JlYXRlUmVhZGFibGVTdHJlYW0iLCJyZWFkQWdhaW5Gb3JCcmFuY2gxIiwicmVhZEFnYWluRm9yQnJhbmNoMiIsImZvcndhcmRSZWFkZXJFcnJvciIsInRoaXNSZWFkZXIiLCJwdWxsV2l0aERlZmF1bHRSZWFkZXIiLCJjbG9uZUUiLCJwdWxsMUFsZ29yaXRobSIsInB1bGwyQWxnb3JpdGhtIiwicHVsbFdpdGhCWU9CUmVhZGVyIiwiZm9yQnJhbmNoMiIsImJ5b2JCcmFuY2giLCJvdGhlckJyYW5jaCIsImJ5b2JDYW5jZWxlZCIsIm90aGVyQ2FuY2VsZWQiLCJjbG9uZWRDaHVuayIsIkNyZWF0ZVJlYWRhYmxlQnl0ZVN0cmVhbSIsImNvbnZlcnRVbmRlcmx5aW5nRGVmYXVsdE9yQnl0ZVNvdXJjZSIsImNvbnZlcnRVbmRlcmx5aW5nU291cmNlQ2FuY2VsQ2FsbGJhY2siLCJjb252ZXJ0VW5kZXJseWluZ1NvdXJjZVB1bGxDYWxsYmFjayIsImNvbnZlcnRVbmRlcmx5aW5nU291cmNlU3RhcnRDYWxsYmFjayIsImNvbnZlcnRSZWFkYWJsZVN0cmVhbVR5cGUiLCJjb252ZXJ0UmVhZGVyT3B0aW9ucyIsIm9wdGlvbnMiLCJtb2RlIiwiY29udmVydFJlYWRhYmxlU3RyZWFtUmVhZGVyTW9kZSIsImNvbnZlcnRJdGVyYXRvck9wdGlvbnMiLCJCb29sZWFuIiwiY29udmVydFBpcGVPcHRpb25zIiwiYXNzZXJ0QWJvcnRTaWduYWwiLCJjb252ZXJ0UmVhZGFibGVXcml0YWJsZVBhaXIiLCJyZWFkYWJsZSIsIlJlYWRhYmxlU3RyZWFtIiwicmF3VW5kZXJseWluZ1NvdXJjZSIsIkluaXRpYWxpemVSZWFkYWJsZVN0cmVhbSIsInN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSIsImdldFJlYWRlciIsInJhd09wdGlvbnMiLCJwaXBlVGhyb3VnaCIsInJhd1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInBpcGVUbyIsImRlc3RpbmF0aW9uIiwidGVlIiwiYnJhbmNoZXMiLCJ2YWx1ZXMiLCJhc3luY0l0ZXJhdG9yIiwic291cmNlQ2FuY2VsUHJvbWlzZSIsImNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lJbml0IiwiYnl0ZUxlbmd0aFNpemVGdW5jdGlvbiIsIkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kiLCJfYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmsiLCJJc0J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kiLCJieXRlTGVuZ3RoQnJhbmRDaGVja0V4Y2VwdGlvbiIsImNvdW50U2l6ZUZ1bmN0aW9uIiwiQ291bnRRdWV1aW5nU3RyYXRlZ3kiLCJfY291bnRRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrIiwiSXNDb3VudFF1ZXVpbmdTdHJhdGVneSIsImNvdW50QnJhbmRDaGVja0V4Y2VwdGlvbiIsImNvbnZlcnRUcmFuc2Zvcm1lciIsImZsdXNoIiwicmVhZGFibGVUeXBlIiwid3JpdGFibGVUeXBlIiwiY29udmVydFRyYW5zZm9ybWVyRmx1c2hDYWxsYmFjayIsImNvbnZlcnRUcmFuc2Zvcm1lclN0YXJ0Q2FsbGJhY2siLCJjb252ZXJ0VHJhbnNmb3JtZXJUcmFuc2Zvcm1DYWxsYmFjayIsIlRyYW5zZm9ybVN0cmVhbSIsInJhd1RyYW5zZm9ybWVyIiwicmF3V3JpdGFibGVTdHJhdGVneSIsInJhd1JlYWRhYmxlU3RyYXRlZ3kiLCJ3cml0YWJsZVN0cmF0ZWd5IiwicmVhZGFibGVTdHJhdGVneSIsInRyYW5zZm9ybWVyIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwicmVhZGFibGVTaXplQWxnb3JpdGhtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwid3JpdGFibGVTaXplQWxnb3JpdGhtIiwic3RhcnRQcm9taXNlX3Jlc29sdmUiLCJJbml0aWFsaXplVHJhbnNmb3JtU3RyZWFtIiwiU2V0VXBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21UcmFuc2Zvcm1lciIsIl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyIiwiSXNUcmFuc2Zvcm1TdHJlYW0iLCJzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uIiwiX3JlYWRhYmxlIiwiX3dyaXRhYmxlIiwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtXcml0ZUFsZ29yaXRobSIsIlRyYW5zZm9ybVN0cmVhbURlZmF1bHRTaW5rQWJvcnRBbGdvcml0aG0iLCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Nsb3NlQWxnb3JpdGhtIiwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNvdXJjZVB1bGxBbGdvcml0aG0iLCJUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlIiwiX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UiLCJfYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlIiwiVHJhbnNmb3JtU3RyZWFtU2V0QmFja3ByZXNzdXJlIiwiVHJhbnNmb3JtU3RyZWFtRXJyb3IiLCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyIsIlRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyIiwiSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciIsImRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiIsInJlYWRhYmxlQ29udHJvbGxlciIsIl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtIiwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlIiwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvciIsInRlcm1pbmF0ZSIsIlRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyVGVybWluYXRlIiwiU2V0VXBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciIsInRyYW5zZm9ybUFsZ29yaXRobSIsImZsdXNoQWxnb3JpdGhtIiwiX3RyYW5zZm9ybUFsZ29yaXRobSIsIl9mbHVzaEFsZ29yaXRobSIsInRyYW5zZm9ybVJlc3VsdEUiLCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclBlcmZvcm1UcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1Qcm9taXNlIiwiYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZSIsImZsdXNoUHJvbWlzZSIsIlBPT0xfU0laRSQxIiwicHJvY2VzcyIsImVtaXRXYXJuaW5nIiwiYXNzaWduIiwiQmxvYiIsInBhcmFtcyIsImJsb2IiLCJjdHJsIiwiYXJyYXlCdWZmZXIiLCJQT09MX1NJWkUiLCJ0b0l0ZXJhdG9yIiwicGFydHMiLCJjbG9uZSIsInBhcnQiLCJiIiwiX0Jsb2IiLCJlbmRpbmdzIiwiYmxvYlBhcnRzIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiU3RyaW5nIiwidGV4dCIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsInN0ciIsImRlY29kZSIsIm9mZnNldCIsIml0IiwicmVsYXRpdmVTdGFydCIsIm1heCIsInJlbGF0aXZlRW5kIiwic3BhbiIsImFkZGVkIiwic3ViYXJyYXkiLCJ0b0xvd2VyQ2FzZSIsImhhc0luc3RhbmNlIiwib2JqZWN0IiwiX0Jsb2IkMSIsIl9GaWxlIiwiRmlsZSIsImxhc3RNb2RpZmllZCIsImZpbGVCaXRzIiwiZmlsZU5hbWUiLCJhcmd1bWVudHMiLCJEYXRlIiwibm93IiwiRmlsZSQxIiwidCIsImgiLCJyYW5kb20iLCJtIiwiZiIsImEiLCJjIiwiRm9ybURhdGEiLCJkIiwiZW50cmllcyIsIm8iLCJzb21lIiwiYXBwZW5kIiwiZGVsZXRlIiwiZmlsdGVyIiwiZ2V0IiwibCIsImdldEFsbCIsImhhcyIsImtleXMiLCJmb3JtRGF0YVRvQmxvYiIsIkIiLCJwYWRTdGFydCIsInAiLCJGZXRjaEJhc2VFcnJvciIsIkZldGNoRXJyb3IiLCJzeXN0ZW1FcnJvciIsImNvZGUiLCJlcnJubyIsImVycm9yZWRTeXNDYWxsIiwic3lzY2FsbCIsIk5BTUUiLCJpc1VSTFNlYXJjaFBhcmFtZXRlcnMiLCJzb3J0IiwiaXNCbG9iIiwiaXNEb21haW5PclN1YmRvbWFpbiIsIm9yaWciLCJVUkwiLCJob3N0bmFtZSIsImVuZHNXaXRoIiwiaXNTYW1lUHJvdG9jb2wiLCJwcm90b2NvbCIsInBpcGVsaW5lIiwicHJvbWlzaWZ5IiwiSU5URVJOQUxTJDIiLCJCb2R5IiwiYm9keSIsImJvdW5kYXJ5IiwidG9TdHJpbmciLCJpc0J1ZmZlciIsInR5cGVzIiwiaXNBbnlBcnJheUJ1ZmZlciIsIlJlYWRhYmxlIiwiZGlzdHVyYmVkIiwib24iLCJlcnJvcl8iLCJ1cmwiLCJib2R5VXNlZCIsImNvbnN1bWVCb2R5IiwiZm9ybURhdGEiLCJjdCIsImhlYWRlcnMiLCJzdGFydHNXaXRoIiwicGFyYW1ldGVycyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvRm9ybURhdGEiLCJidWYiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwiZGVwcmVjYXRlIiwiYWxsb2MiLCJhY2N1bSIsImFjY3VtQnl0ZXMiLCJkZXN0cm95IiwicmVhZGFibGVFbmRlZCIsIl9yZWFkYWJsZVN0YXRlIiwiZW5kZWQiLCJldmVyeSIsImpvaW4iLCJjb25jYXQiLCJpbnN0YW5jZSIsInAxIiwicDIiLCJnZXRCb3VuZGFyeSIsIlBhc3NUaHJvdWdoIiwicGlwZSIsImdldE5vblNwZWNGb3JtRGF0YUJvdW5kYXJ5IiwiZXh0cmFjdENvbnRlbnRUeXBlIiwiZ2V0VG90YWxCeXRlcyIsImdldExlbmd0aFN5bmMiLCJoYXNLbm93bkxlbmd0aCIsIndyaXRlVG9TdHJlYW0iLCJ2YWxpZGF0ZUhlYWRlck5hbWUiLCJ2YWxpZGF0ZUhlYWRlclZhbHVlIiwiSGVhZGVycyIsInJhdyIsImlzQm94ZWRQcmltaXRpdmUiLCJtZXRob2QiLCJQcm94eSIsInRhcmdldCIsInJlY2VpdmVyIiwiU2V0IiwiUmVmbGVjdCIsInRoaXNBcmciLCJyZWR1Y2UiLCJrZXkiLCJmb3IiLCJwcm9wZXJ0eSIsImZyb21SYXdIZWFkZXJzIiwiaW5kZXgiLCJhcnJheSIsInJlZGlyZWN0U3RhdHVzIiwiaXNSZWRpcmVjdCIsIklOVEVSTkFMUyQxIiwiUmVzcG9uc2UiLCJzdGF0dXMiLCJjb250ZW50VHlwZSIsInN0YXR1c1RleHQiLCJjb3VudGVyIiwib2siLCJyZWRpcmVjdGVkIiwicmVkaXJlY3QiLCJsb2NhdGlvbiIsInJlc3BvbnNlIiwic3RyaW5naWZ5IiwiZ2V0U2VhcmNoIiwicGFyc2VkVVJMIiwic2VhcmNoIiwibGFzdE9mZnNldCIsImhyZWYiLCJoYXNoIiwic3RyaXBVUkxGb3JVc2VBc0FSZWZlcnJlciIsIm9yaWdpbk9ubHkiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicGF0aG5hbWUiLCJSZWZlcnJlclBvbGljeSIsIkRFRkFVTFRfUkVGRVJSRVJfUE9MSUNZIiwidmFsaWRhdGVSZWZlcnJlclBvbGljeSIsInJlZmVycmVyUG9saWN5IiwiaXNPcmlnaW5Qb3RlbnRpYWxseVRydXN0d29ydGh5IiwiaG9zdElwIiwiaG9zdCIsImhvc3RJUFZlcnNpb24iLCJpc0lQIiwiaXNVcmxQb3RlbnRpYWxseVRydXN0d29ydGh5IiwiZGV0ZXJtaW5lUmVxdWVzdHNSZWZlcnJlciIsInJlZmVycmVyVVJMQ2FsbGJhY2siLCJyZWZlcnJlck9yaWdpbkNhbGxiYWNrIiwicmVmZXJyZXIiLCJwb2xpY3kiLCJyZWZlcnJlclNvdXJjZSIsInJlZmVycmVyVVJMIiwicmVmZXJyZXJPcmlnaW4iLCJjdXJyZW50VVJMIiwib3JpZ2luIiwicGFyc2VSZWZlcnJlclBvbGljeUZyb21IZWFkZXIiLCJwb2xpY3lUb2tlbnMiLCJ0b2tlbiIsIklOVEVSTkFMUyIsImlzUmVxdWVzdCIsImRvQmFkRGF0YVdhcm4iLCJSZXF1ZXN0IiwiaW5wdXQiLCJ0b1VwcGVyQ2FzZSIsImlucHV0Qm9keSIsInBhcnNlZFJlZmVycmVyIiwiZm9sbG93IiwiY29tcHJlc3MiLCJhZ2VudCIsImluc2VjdXJlSFRUUFBhcnNlciIsImZvcm1hdCIsImdldE5vZGVSZXF1ZXN0T3B0aW9ucyIsImNvbnRlbnRMZW5ndGhWYWx1ZSIsInRvdGFsQnl0ZXMiLCJwYXRoIiwiQWJvcnRFcnJvciIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydCIsInBvcnQxIiwiYWIiLCJwb3N0TWVzc2FnZSIsImVyciIsIm5vZGVEb21leGNlcHRpb24iLCJzdXBwb3J0ZWRTY2hlbWFzIiwiZmV0Y2giLCJvcHRpb25zXyIsInNlbmQiLCJlbWl0IiwiYWJvcnRBbmRGaW5hbGl6ZSIsInJlcXVlc3RfIiwiZml4UmVzcG9uc2VDaHVua2VkVHJhbnNmZXJCYWRFbmRpbmciLCJ2ZXJzaW9uIiwicyIsImVuZGVkV2l0aEV2ZW50c0NvdW50IiwicHJlcGVuZExpc3RlbmVyIiwiX2V2ZW50c0NvdW50IiwiaGFkRXJyb3IiLCJyZXNwb25zZV8iLCJzZXRUaW1lb3V0IiwicmF3SGVhZGVycyIsInN0YXR1c0NvZGUiLCJsb2NhdGlvblVSTCIsInJlcXVlc3RPcHRpb25zIiwicmVzcG9uc2VSZWZlcnJlclBvbGljeSIsIm9uY2UiLCJyZXNwb25zZU9wdGlvbnMiLCJzdGF0dXNNZXNzYWdlIiwiY29kaW5ncyIsInpsaWJPcHRpb25zIiwiWl9TWU5DX0ZMVVNIIiwiZmluaXNoRmx1c2giLCJjcmVhdGVHdW56aXAiLCJjcmVhdGVJbmZsYXRlIiwiY3JlYXRlSW5mbGF0ZVJhdyIsImNyZWF0ZUJyb3RsaURlY29tcHJlc3MiLCJjYXRjaCIsImVycm9yQ2FsbGJhY2siLCJMQVNUX0NIVU5LIiwiaXNDaHVua2VkVHJhbnNmZXIiLCJwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCIsInByZXZpb3VzQ2h1bmsiLCJzb2NrZXQiLCJvblNvY2tldENsb3NlIiwib25EYXRhIiwiY29tcGFyZSIsInJlbW92ZUxpc3RlbmVyIiwicHJpdmF0ZURhdGEiLCJXZWFrTWFwIiwid3JhcHBlcnMiLCJwZCIsImV2ZW50IiwicmV0diIsImNvbnNvbGUiLCJhc3NlcnQiLCJzZXRDYW5jZWxGbGFnIiwicGFzc2l2ZUxpc3RlbmVyIiwiY2FuY2VsYWJsZSIsImNhbmNlbGVkIiwicHJldmVudERlZmF1bHQiLCJFdmVudCIsImV2ZW50VGFyZ2V0IiwiZXZlbnRQaGFzZSIsImN1cnJlbnRUYXJnZXQiLCJzdG9wcGVkIiwiaW1tZWRpYXRlU3RvcHBlZCIsInRpbWVTdGFtcCIsImRlZmluZVJlZGlyZWN0RGVzY3JpcHRvciIsImNvbXBvc2VkUGF0aCIsIk5PTkUiLCJDQVBUVVJJTkdfUEhBU0UiLCJBVF9UQVJHRVQiLCJCVUJCTElOR19QSEFTRSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImJ1YmJsZXMiLCJkZWZhdWx0UHJldmVudGVkIiwiY29tcG9zZWQiLCJzcmNFbGVtZW50IiwiY2FuY2VsQnViYmxlIiwicmV0dXJuVmFsdWUiLCJpbml0RXZlbnQiLCJkZWZpbmVDYWxsRGVzY3JpcHRvciIsImRlZmluZVdyYXBwZXIiLCJCYXNlRXZlbnQiLCJwcm90byIsIkN1c3RvbUV2ZW50IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXNGdW5jIiwiZ2V0V3JhcHBlciIsIndyYXBwZXIiLCJ3cmFwRXZlbnQiLCJXcmFwcGVyIiwiaXNTdG9wcGVkIiwic2V0RXZlbnRQaGFzZSIsInNldEN1cnJlbnRUYXJnZXQiLCJzZXRQYXNzaXZlTGlzdGVuZXIiLCJsaXN0ZW5lcnNNYXAiLCJDQVBUVVJFIiwiQlVCQkxFIiwiQVRUUklCVVRFIiwiZ2V0TGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiZGVmaW5lRXZlbnRBdHRyaWJ1dGVEZXNjcmlwdG9yIiwiZXZlbnROYW1lIiwibGlzdGVuZXJUeXBlIiwibGlzdGVuZXIiLCJwcmV2IiwibmV3Tm9kZSIsInBhc3NpdmUiLCJkZWZpbmVFdmVudEF0dHJpYnV0ZSIsImV2ZW50VGFyZ2V0UHJvdG90eXBlIiwiZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQiLCJldmVudE5hbWVzIiwiQ3VzdG9tRXZlbnRUYXJnZXQiLCJFdmVudFRhcmdldCIsIk1hcCIsIkFycmF5IiwiaXNBcnJheSIsIm9wdGlvbnNJc09iaiIsImNhcHR1cmUiLCJkaXNwYXRjaEV2ZW50Iiwid3JhcHBlZEV2ZW50IiwiaGFuZGxlRXZlbnQiLCJBYm9ydFNpZ25hbCIsImFib3J0ZWRGbGFncyIsImNyZWF0ZUFib3J0U2lnbmFsIiwiYWJvcnRTaWduYWwiLCJBYm9ydENvbnRyb2xsZXIkMSIsInNpZ25hbHMiLCJnZXRTaWduYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/lib/index.cjs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst nodeFetch = __webpack_require__(/*! ../dist/index.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/index.cjs\");\nfunction fetch(input, options) {\n    return nodeFetch.fetch(input, options);\n}\nfor(const key in nodeFetch){\n    fetch[key] = nodeFetch[key];\n}\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsWUFBWUMsbUJBQU9BLENBQUMsZ0ZBQW1CO0FBRTdDLFNBQVNDLE1BQU9DLEtBQUssRUFBRUMsT0FBTztJQUM1QixPQUFPSixVQUFVRSxLQUFLLENBQUNDLE9BQU9DO0FBQ2hDO0FBRUEsSUFBSyxNQUFNQyxPQUFPTCxVQUFXO0lBQzNCRSxLQUFLLENBQUNHLElBQUksR0FBR0wsU0FBUyxDQUFDSyxJQUFJO0FBQzdCO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXRhc2tzLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gtbmF0aXZlL2xpYi9pbmRleC5janM/MDc0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKFwiLi4vZGlzdC9pbmRleC5janNcIik7XG5cbmZ1bmN0aW9uIGZldGNoIChpbnB1dCwgb3B0aW9ucykge1xuICByZXR1cm4gbm9kZUZldGNoLmZldGNoKGlucHV0LCBvcHRpb25zKTtcbn1cblxuZm9yIChjb25zdCBrZXkgaW4gbm9kZUZldGNoKSB7XG4gIGZldGNoW2tleV0gPSBub2RlRmV0Y2hba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZXRjaDtcbiJdLCJuYW1lcyI6WyJub2RlRmV0Y2giLCJyZXF1aXJlIiwiZmV0Y2giLCJpbnB1dCIsIm9wdGlvbnMiLCJrZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/lib/index.cjs\n");

/***/ })

};
;